   1               		.file	"send_string.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.send_char,"ax",@progbits
  11               	.global	send_char
  13               	send_char:
  14               	.LVL0:
  15               	.LFB30:
  16               		.file 1 "quantum/send_string.c"
   1:quantum/send_string.c **** /* Copyright 2021
   2:quantum/send_string.c ****  *
   3:quantum/send_string.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/send_string.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/send_string.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/send_string.c ****  * (at your option) any later version.
   7:quantum/send_string.c ****  *
   8:quantum/send_string.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/send_string.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/send_string.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/send_string.c ****  * GNU General Public License for more details.
  12:quantum/send_string.c ****  *
  13:quantum/send_string.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/send_string.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/send_string.c ****  */
  16:quantum/send_string.c **** 
  17:quantum/send_string.c **** #include <ctype.h>
  18:quantum/send_string.c **** 
  19:quantum/send_string.c **** #include "quantum.h"
  20:quantum/send_string.c **** 
  21:quantum/send_string.c **** #include "send_string.h"
  22:quantum/send_string.c **** 
  23:quantum/send_string.c **** #if defined(AUDIO_ENABLE) && defined(SENDSTRING_BELL)
  24:quantum/send_string.c **** #    include "audio.h"
  25:quantum/send_string.c **** #    ifndef BELL_SOUND
  26:quantum/send_string.c **** #        define BELL_SOUND TERMINAL_SOUND
  27:quantum/send_string.c **** #    endif
  28:quantum/send_string.c **** float bell_song[][2] = SONG(BELL_SOUND);
  29:quantum/send_string.c **** #endif
  30:quantum/send_string.c **** 
  31:quantum/send_string.c **** // clang-format off
  32:quantum/send_string.c **** 
  33:quantum/send_string.c **** /* Bit-Packed look-up table to convert an ASCII character to whether
  34:quantum/send_string.c ****  * [Shift] needs to be sent with the keycode.
  35:quantum/send_string.c ****  */
  36:quantum/send_string.c **** __attribute__((weak)) const uint8_t ascii_to_shift_lut[16] PROGMEM = {
  37:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  38:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  39:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  40:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  41:quantum/send_string.c **** 
  42:quantum/send_string.c ****     KCLUT_ENTRY(0, 1, 1, 1, 1, 1, 1, 0),
  43:quantum/send_string.c ****     KCLUT_ENTRY(1, 1, 1, 1, 0, 0, 0, 0),
  44:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  45:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 1, 0, 1, 0, 1, 1),
  46:quantum/send_string.c ****     KCLUT_ENTRY(1, 1, 1, 1, 1, 1, 1, 1),
  47:quantum/send_string.c ****     KCLUT_ENTRY(1, 1, 1, 1, 1, 1, 1, 1),
  48:quantum/send_string.c ****     KCLUT_ENTRY(1, 1, 1, 1, 1, 1, 1, 1),
  49:quantum/send_string.c ****     KCLUT_ENTRY(1, 1, 1, 0, 0, 0, 1, 1),
  50:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  51:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  52:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  53:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 1, 1, 1, 1, 0)
  54:quantum/send_string.c **** };
  55:quantum/send_string.c **** 
  56:quantum/send_string.c **** /* Bit-Packed look-up table to convert an ASCII character to whether
  57:quantum/send_string.c ****  * [AltGr] needs to be sent with the keycode.
  58:quantum/send_string.c ****  */
  59:quantum/send_string.c **** __attribute__((weak)) const uint8_t ascii_to_altgr_lut[16] PROGMEM = {
  60:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  61:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  62:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  63:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  64:quantum/send_string.c **** 
  65:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  66:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  67:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  68:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  69:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  70:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  71:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  72:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  73:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  74:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  75:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  76:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0)
  77:quantum/send_string.c **** };
  78:quantum/send_string.c **** 
  79:quantum/send_string.c **** /* Bit-Packed look-up table to convert an ASCII character to whether
  80:quantum/send_string.c ****  * [Space] needs to be sent after the keycode
  81:quantum/send_string.c ****  */
  82:quantum/send_string.c **** __attribute__((weak)) const uint8_t ascii_to_dead_lut[16] PROGMEM = {
  83:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  84:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  85:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  86:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  87:quantum/send_string.c **** 
  88:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  89:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  90:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  91:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  92:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  93:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  94:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  95:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  96:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  97:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  98:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  99:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0)
 100:quantum/send_string.c **** };
 101:quantum/send_string.c **** 
 102:quantum/send_string.c **** /* Look-up table to convert an ASCII character to a keycode.
 103:quantum/send_string.c ****  */
 104:quantum/send_string.c **** __attribute__((weak)) const uint8_t ascii_to_keycode_lut[128] PROGMEM = {
 105:quantum/send_string.c ****     // NUL   SOH      STX      ETX      EOT      ENQ      ACK      BEL
 106:quantum/send_string.c ****     XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
 107:quantum/send_string.c ****     // BS    TAB      LF       VT       FF       CR       SO       SI
 108:quantum/send_string.c ****     KC_BSPC, KC_TAB,  KC_ENT,  XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
 109:quantum/send_string.c ****     // DLE   DC1      DC2      DC3      DC4      NAK      SYN      ETB
 110:quantum/send_string.c ****     XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
 111:quantum/send_string.c ****     // CAN   EM       SUB      ESC      FS       GS       RS       US
 112:quantum/send_string.c ****     XXXXXXX, XXXXXXX, XXXXXXX, KC_ESC,  XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
 113:quantum/send_string.c **** 
 114:quantum/send_string.c ****     //       !        "        #        $        %        &        '
 115:quantum/send_string.c ****     KC_SPC,  KC_1,    KC_QUOT, KC_3,    KC_4,    KC_5,    KC_7,    KC_QUOT,
 116:quantum/send_string.c ****     // (     )        *        +        ,        -        .        /
 117:quantum/send_string.c ****     KC_9,    KC_0,    KC_8,    KC_EQL,  KC_COMM, KC_MINS, KC_DOT,  KC_SLSH,
 118:quantum/send_string.c ****     // 0     1        2        3        4        5        6        7
 119:quantum/send_string.c ****     KC_0,    KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,
 120:quantum/send_string.c ****     // 8     9        :        ;        <        =        >        ?
 121:quantum/send_string.c ****     KC_8,    KC_9,    KC_SCLN, KC_SCLN, KC_COMM, KC_EQL,  KC_DOT,  KC_SLSH,
 122:quantum/send_string.c ****     // @     A        B        C        D        E        F        G
 123:quantum/send_string.c ****     KC_2,    KC_A,    KC_B,    KC_C,    KC_D,    KC_E,    KC_F,    KC_G,
 124:quantum/send_string.c ****     // H     I        J        K        L        M        N        O
 125:quantum/send_string.c ****     KC_H,    KC_I,    KC_J,    KC_K,    KC_L,    KC_M,    KC_N,    KC_O,
 126:quantum/send_string.c ****     // P     Q        R        S        T        U        V        W
 127:quantum/send_string.c ****     KC_P,    KC_Q,    KC_R,    KC_S,    KC_T,    KC_U,    KC_V,    KC_W,
 128:quantum/send_string.c ****     // X     Y        Z        [        \        ]        ^        _
 129:quantum/send_string.c ****     KC_X,    KC_Y,    KC_Z,    KC_LBRC, KC_BSLS, KC_RBRC, KC_6,    KC_MINS,
 130:quantum/send_string.c ****     // `     a        b        c        d        e        f        g
 131:quantum/send_string.c ****     KC_GRV,  KC_A,    KC_B,    KC_C,    KC_D,    KC_E,    KC_F,    KC_G,
 132:quantum/send_string.c ****     // h     i        j        k        l        m        n        o
 133:quantum/send_string.c ****     KC_H,    KC_I,    KC_J,    KC_K,    KC_L,    KC_M,    KC_N,    KC_O,
 134:quantum/send_string.c ****     // p     q        r        s        t        u        v        w
 135:quantum/send_string.c ****     KC_P,    KC_Q,    KC_R,    KC_S,    KC_T,    KC_U,    KC_V,    KC_W,
 136:quantum/send_string.c ****     // x     y        z        {        |        }        ~        DEL
 137:quantum/send_string.c ****     KC_X,    KC_Y,    KC_Z,    KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV,  KC_DEL
 138:quantum/send_string.c **** };
 139:quantum/send_string.c **** 
 140:quantum/send_string.c **** // clang-format on
 141:quantum/send_string.c **** 
 142:quantum/send_string.c **** // Note: we bit-pack in "reverse" order to optimize loading
 143:quantum/send_string.c **** #define PGM_LOADBIT(mem, pos) ((pgm_read_byte(&((mem)[(pos) / 8])) >> ((pos) % 8)) & 0x01)
 144:quantum/send_string.c **** 
 145:quantum/send_string.c **** void send_string(const char *str) { send_string_with_delay(str, 0); }
 146:quantum/send_string.c **** 
 147:quantum/send_string.c **** void send_string_P(const char *str) { send_string_with_delay_P(str, 0); }
 148:quantum/send_string.c **** 
 149:quantum/send_string.c **** void send_string_with_delay(const char *str, uint8_t interval) {
 150:quantum/send_string.c ****     while (1) {
 151:quantum/send_string.c ****         char ascii_code = *str;
 152:quantum/send_string.c ****         if (!ascii_code) break;
 153:quantum/send_string.c ****         if (ascii_code == SS_QMK_PREFIX) {
 154:quantum/send_string.c ****             ascii_code = *(++str);
 155:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 156:quantum/send_string.c ****                 // tap
 157:quantum/send_string.c ****                 uint8_t keycode = *(++str);
 158:quantum/send_string.c ****                 tap_code(keycode);
 159:quantum/send_string.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 160:quantum/send_string.c ****                 // down
 161:quantum/send_string.c ****                 uint8_t keycode = *(++str);
 162:quantum/send_string.c ****                 register_code(keycode);
 163:quantum/send_string.c ****             } else if (ascii_code == SS_UP_CODE) {
 164:quantum/send_string.c ****                 // up
 165:quantum/send_string.c ****                 uint8_t keycode = *(++str);
 166:quantum/send_string.c ****                 unregister_code(keycode);
 167:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 168:quantum/send_string.c ****                 // delay
 169:quantum/send_string.c ****                 int     ms      = 0;
 170:quantum/send_string.c ****                 uint8_t keycode = *(++str);
 171:quantum/send_string.c ****                 while (isdigit(keycode)) {
 172:quantum/send_string.c ****                     ms *= 10;
 173:quantum/send_string.c ****                     ms += keycode - '0';
 174:quantum/send_string.c ****                     keycode = *(++str);
 175:quantum/send_string.c ****                 }
 176:quantum/send_string.c ****                 while (ms--) wait_ms(1);
 177:quantum/send_string.c ****             }
 178:quantum/send_string.c ****         } else {
 179:quantum/send_string.c ****             send_char(ascii_code);
 180:quantum/send_string.c ****         }
 181:quantum/send_string.c ****         ++str;
 182:quantum/send_string.c ****         // interval
 183:quantum/send_string.c ****         {
 184:quantum/send_string.c ****             uint8_t ms = interval;
 185:quantum/send_string.c ****             while (ms--) wait_ms(1);
 186:quantum/send_string.c ****         }
 187:quantum/send_string.c ****     }
 188:quantum/send_string.c **** }
 189:quantum/send_string.c **** 
 190:quantum/send_string.c **** void send_string_with_delay_P(const char *str, uint8_t interval) {
 191:quantum/send_string.c ****     while (1) {
 192:quantum/send_string.c ****         char ascii_code = pgm_read_byte(str);
 193:quantum/send_string.c ****         if (!ascii_code) break;
 194:quantum/send_string.c ****         if (ascii_code == SS_QMK_PREFIX) {
 195:quantum/send_string.c ****             ascii_code = pgm_read_byte(++str);
 196:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 197:quantum/send_string.c ****                 // tap
 198:quantum/send_string.c ****                 uint8_t keycode = pgm_read_byte(++str);
 199:quantum/send_string.c ****                 tap_code(keycode);
 200:quantum/send_string.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 201:quantum/send_string.c ****                 // down
 202:quantum/send_string.c ****                 uint8_t keycode = pgm_read_byte(++str);
 203:quantum/send_string.c ****                 register_code(keycode);
 204:quantum/send_string.c ****             } else if (ascii_code == SS_UP_CODE) {
 205:quantum/send_string.c ****                 // up
 206:quantum/send_string.c ****                 uint8_t keycode = pgm_read_byte(++str);
 207:quantum/send_string.c ****                 unregister_code(keycode);
 208:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 209:quantum/send_string.c ****                 // delay
 210:quantum/send_string.c ****                 int     ms      = 0;
 211:quantum/send_string.c ****                 uint8_t keycode = pgm_read_byte(++str);
 212:quantum/send_string.c ****                 while (isdigit(keycode)) {
 213:quantum/send_string.c ****                     ms *= 10;
 214:quantum/send_string.c ****                     ms += keycode - '0';
 215:quantum/send_string.c ****                     keycode = pgm_read_byte(++str);
 216:quantum/send_string.c ****                 }
 217:quantum/send_string.c ****                 while (ms--) wait_ms(1);
 218:quantum/send_string.c ****             }
 219:quantum/send_string.c ****         } else {
 220:quantum/send_string.c ****             send_char(ascii_code);
 221:quantum/send_string.c ****         }
 222:quantum/send_string.c ****         ++str;
 223:quantum/send_string.c ****         // interval
 224:quantum/send_string.c ****         {
 225:quantum/send_string.c ****             uint8_t ms = interval;
 226:quantum/send_string.c ****             while (ms--) wait_ms(1);
 227:quantum/send_string.c ****         }
 228:quantum/send_string.c ****     }
 229:quantum/send_string.c **** }
 230:quantum/send_string.c **** 
 231:quantum/send_string.c **** void send_char(char ascii_code) {
  17               		.loc 1 231 33 view -0
  18               		.cfi_startproc
  19               		.loc 1 231 33 is_stmt 0 view .LVU1
  20 0000 DF92      		push r13
  21               	.LCFI0:
  22               		.cfi_def_cfa_offset 3
  23               		.cfi_offset 13, -2
  24 0002 EF92      		push r14
  25               	.LCFI1:
  26               		.cfi_def_cfa_offset 4
  27               		.cfi_offset 14, -3
  28 0004 FF92      		push r15
  29               	.LCFI2:
  30               		.cfi_def_cfa_offset 5
  31               		.cfi_offset 15, -4
  32 0006 0F93      		push r16
  33               	.LCFI3:
  34               		.cfi_def_cfa_offset 6
  35               		.cfi_offset 16, -5
  36 0008 1F93      		push r17
  37               	.LCFI4:
  38               		.cfi_def_cfa_offset 7
  39               		.cfi_offset 17, -6
  40 000a CF93      		push r28
  41               	.LCFI5:
  42               		.cfi_def_cfa_offset 8
  43               		.cfi_offset 28, -7
  44 000c DF93      		push r29
  45               	.LCFI6:
  46               		.cfi_def_cfa_offset 9
  47               		.cfi_offset 29, -8
  48               	/* prologue: function */
  49               	/* frame size = 0 */
  50               	/* stack size = 7 */
  51               	.L__stack_usage = 7
 232:quantum/send_string.c **** #if defined(AUDIO_ENABLE) && defined(SENDSTRING_BELL)
 233:quantum/send_string.c ****     if (ascii_code == '\a') {  // BEL
 234:quantum/send_string.c ****         PLAY_SONG(bell_song);
 235:quantum/send_string.c ****         return;
 236:quantum/send_string.c ****     }
 237:quantum/send_string.c **** #endif
 238:quantum/send_string.c **** 
 239:quantum/send_string.c ****     uint8_t keycode    = pgm_read_byte(&ascii_to_keycode_lut[(uint8_t)ascii_code]);
  52               		.loc 1 239 5 is_stmt 1 view .LVU2
  53               	.LBB29:
  54               		.loc 1 239 26 view .LVU3
  55               	.LVL1:
  56               		.loc 1 239 26 view .LVU4
  57               		.loc 1 239 26 view .LVU5
  58 000e E82F      		mov r30,r24
  59 0010 F0E0      		ldi r31,0
  60 0012 E050      		subi r30,lo8(-(ascii_to_keycode_lut))
  61 0014 F040      		sbci r31,hi8(-(ascii_to_keycode_lut))
  62               	/* #APP */
  63               	 ;  239 "quantum/send_string.c" 1
  64 0016 D490      		lpm r13, Z
  65               		
  66               	 ;  0 "" 2
  67               	.LVL2:
  68               		.loc 1 239 26 view .LVU6
  69               		.loc 1 239 26 is_stmt 0 view .LVU7
  70               	/* #NOAPP */
  71               	.LBE29:
 240:quantum/send_string.c ****     bool    is_shifted = PGM_LOADBIT(ascii_to_shift_lut, (uint8_t)ascii_code);
  72               		.loc 1 240 5 is_stmt 1 view .LVU8
  73               	.LBB30:
  74               		.loc 1 240 26 view .LVU9
  75 0018 282F      		mov r18,r24
  76 001a 2695      		lsr r18
  77 001c 2695      		lsr r18
  78 001e 2695      		lsr r18
  79 0020 30E0      		ldi r19,0
  80               	.LVL3:
  81               		.loc 1 240 26 view .LVU10
  82               		.loc 1 240 26 view .LVU11
  83 0022 F901      		movw r30,r18
  84 0024 E050      		subi r30,lo8(-(ascii_to_shift_lut))
  85 0026 F040      		sbci r31,hi8(-(ascii_to_shift_lut))
  86               	.LVL4:
  87               		.loc 1 240 26 is_stmt 0 view .LVU12
  88               	/* #APP */
  89               	 ;  240 "quantum/send_string.c" 1
  90 0028 0491      		lpm r16, Z
  91               		
  92               	 ;  0 "" 2
  93               	.LVL5:
  94               		.loc 1 240 26 is_stmt 1 view .LVU13
  95               	/* #NOAPP */
  96               	.LBE30:
  97 002a 8770      		andi r24,lo8(7)
  98               	.LVL6:
  99               		.loc 1 240 26 is_stmt 0 view .LVU14
 100 002c 10E0      		ldi r17,0
 101 002e 082E      		mov r0,r24
 102 0030 00C0      		rjmp 2f
 103               		1:
 104 0032 1595      		asr r17
 105 0034 0795      		ror r16
 106               		2:
 107 0036 0A94      		dec r0
 108 0038 02F4      		brpl 1b
 109               	.LVL7:
 110               		.loc 1 240 26 view .LVU15
 111 003a 0170      		andi r16,1
 112 003c 1127      		clr r17
 113               	.LVL8:
 241:quantum/send_string.c ****     bool    is_altgred = PGM_LOADBIT(ascii_to_altgr_lut, (uint8_t)ascii_code);
 114               		.loc 1 241 5 is_stmt 1 view .LVU16
 115               	.LBB31:
 116               		.loc 1 241 26 view .LVU17
 117               		.loc 1 241 26 view .LVU18
 118               		.loc 1 241 26 view .LVU19
 119 003e F901      		movw r30,r18
 120               	.LVL9:
 121               		.loc 1 241 26 is_stmt 0 view .LVU20
 122 0040 E050      		subi r30,lo8(-(ascii_to_altgr_lut))
 123 0042 F040      		sbci r31,hi8(-(ascii_to_altgr_lut))
 124               	.LVL10:
 125               		.loc 1 241 26 view .LVU21
 126               	/* #APP */
 127               	 ;  241 "quantum/send_string.c" 1
 128 0044 E490      		lpm r14, Z
 129               		
 130               	 ;  0 "" 2
 131               	.LVL11:
 132               		.loc 1 241 26 is_stmt 1 view .LVU22
 133               	/* #NOAPP */
 134               	.LBE31:
 135 0046 F12C      		mov r15,__zero_reg__
 136 0048 082E      		mov r0,r24
 137 004a 00C0      		rjmp 2f
 138               		1:
 139 004c F594      		asr r15
 140 004e E794      		ror r14
 141               		2:
 142 0050 0A94      		dec r0
 143 0052 02F4      		brpl 1b
 144               	.LVL12:
 145               		.loc 1 241 26 is_stmt 0 view .LVU23
 146 0054 91E0      		ldi r25,1
 147 0056 E922      		and r14,r25
 148 0058 FF24      		clr r15
 149               	.LVL13:
 242:quantum/send_string.c ****     bool    is_dead    = PGM_LOADBIT(ascii_to_dead_lut, (uint8_t)ascii_code);
 150               		.loc 1 242 5 is_stmt 1 view .LVU24
 151               	.LBB32:
 152               		.loc 1 242 26 view .LVU25
 153               		.loc 1 242 26 view .LVU26
 154               		.loc 1 242 26 view .LVU27
 155 005a F901      		movw r30,r18
 156               	.LVL14:
 157               		.loc 1 242 26 is_stmt 0 view .LVU28
 158 005c E050      		subi r30,lo8(-(ascii_to_dead_lut))
 159 005e F040      		sbci r31,hi8(-(ascii_to_dead_lut))
 160               	.LVL15:
 161               		.loc 1 242 26 view .LVU29
 162               	/* #APP */
 163               	 ;  242 "quantum/send_string.c" 1
 164 0060 C491      		lpm r28, Z
 165               		
 166               	 ;  0 "" 2
 167               	.LVL16:
 168               		.loc 1 242 26 is_stmt 1 view .LVU30
 169               	/* #NOAPP */
 170               	.LBE32:
 171 0062 D0E0      		ldi r29,0
 172 0064 00C0      		rjmp 2f
 173               		1:
 174 0066 D595      		asr r29
 175 0068 C795      		ror r28
 176               		2:
 177 006a 8A95      		dec r24
 178 006c 02F4      		brpl 1b
 179               	.LVL17:
 180               		.loc 1 242 26 is_stmt 0 view .LVU31
 181 006e C170      		andi r28,1
 182 0070 DD27      		clr r29
 183               	.LVL18:
 243:quantum/send_string.c **** 
 244:quantum/send_string.c ****     if (is_shifted) {
 184               		.loc 1 244 5 is_stmt 1 view .LVU32
 185               		.loc 1 244 8 is_stmt 0 view .LVU33
 186 0072 0115      		cp r16,__zero_reg__
 187 0074 1105      		cpc r17,__zero_reg__
 188 0076 01F0      		breq .L2
 245:quantum/send_string.c ****         register_code(KC_LSFT);
 189               		.loc 1 245 9 is_stmt 1 view .LVU34
 190 0078 81EE      		ldi r24,lo8(-31)
 191 007a 0E94 0000 		call register_code
 192               	.LVL19:
 193               	.L2:
 246:quantum/send_string.c ****     }
 247:quantum/send_string.c ****     if (is_altgred) {
 194               		.loc 1 247 5 view .LVU35
 195               		.loc 1 247 8 is_stmt 0 view .LVU36
 196 007e E114      		cp r14,__zero_reg__
 197 0080 F104      		cpc r15,__zero_reg__
 198 0082 01F0      		breq .L3
 248:quantum/send_string.c ****         register_code(KC_RALT);
 199               		.loc 1 248 9 is_stmt 1 view .LVU37
 200 0084 86EE      		ldi r24,lo8(-26)
 201 0086 0E94 0000 		call register_code
 202               	.LVL20:
 203               	.L3:
 249:quantum/send_string.c ****     }
 250:quantum/send_string.c ****     tap_code(keycode);
 204               		.loc 1 250 5 view .LVU38
 205 008a 8D2D      		mov r24,r13
 206 008c 0E94 0000 		call tap_code
 207               	.LVL21:
 251:quantum/send_string.c ****     if (is_altgred) {
 208               		.loc 1 251 5 view .LVU39
 209               		.loc 1 251 8 is_stmt 0 view .LVU40
 210 0090 EF28      		or r14,r15
 211 0092 01F0      		breq .L4
 252:quantum/send_string.c ****         unregister_code(KC_RALT);
 212               		.loc 1 252 9 is_stmt 1 view .LVU41
 213 0094 86EE      		ldi r24,lo8(-26)
 214 0096 0E94 0000 		call unregister_code
 215               	.LVL22:
 216               	.L4:
 253:quantum/send_string.c ****     }
 254:quantum/send_string.c ****     if (is_shifted) {
 217               		.loc 1 254 5 view .LVU42
 218               		.loc 1 254 8 is_stmt 0 view .LVU43
 219 009a 012B      		or r16,r17
 220 009c 01F0      		breq .L5
 255:quantum/send_string.c ****         unregister_code(KC_LSFT);
 221               		.loc 1 255 9 is_stmt 1 view .LVU44
 222 009e 81EE      		ldi r24,lo8(-31)
 223 00a0 0E94 0000 		call unregister_code
 224               	.LVL23:
 225               	.L5:
 256:quantum/send_string.c ****     }
 257:quantum/send_string.c ****     if (is_dead) {
 226               		.loc 1 257 5 view .LVU45
 227               		.loc 1 257 8 is_stmt 0 view .LVU46
 228 00a4 CD2B      		or r28,r29
 229 00a6 01F0      		breq .L1
 258:quantum/send_string.c ****         tap_code(KC_SPACE);
 230               		.loc 1 258 9 is_stmt 1 view .LVU47
 231 00a8 8CE2      		ldi r24,lo8(44)
 232               	/* epilogue start */
 259:quantum/send_string.c ****     }
 260:quantum/send_string.c **** }
 233               		.loc 1 260 1 is_stmt 0 view .LVU48
 234 00aa DF91      		pop r29
 235 00ac CF91      		pop r28
 236               	.LVL24:
 237               		.loc 1 260 1 view .LVU49
 238 00ae 1F91      		pop r17
 239 00b0 0F91      		pop r16
 240               	.LVL25:
 241               		.loc 1 260 1 view .LVU50
 242 00b2 FF90      		pop r15
 243 00b4 EF90      		pop r14
 244               	.LVL26:
 245               		.loc 1 260 1 view .LVU51
 246 00b6 DF90      		pop r13
 247               	.LVL27:
 258:quantum/send_string.c ****         tap_code(KC_SPACE);
 248               		.loc 1 258 9 view .LVU52
 249 00b8 0C94 0000 		jmp tap_code
 250               	.LVL28:
 251               	.L1:
 252               	/* epilogue start */
 253               		.loc 1 260 1 view .LVU53
 254 00bc DF91      		pop r29
 255 00be CF91      		pop r28
 256               	.LVL29:
 257               		.loc 1 260 1 view .LVU54
 258 00c0 1F91      		pop r17
 259 00c2 0F91      		pop r16
 260               	.LVL30:
 261               		.loc 1 260 1 view .LVU55
 262 00c4 FF90      		pop r15
 263 00c6 EF90      		pop r14
 264               	.LVL31:
 265               		.loc 1 260 1 view .LVU56
 266 00c8 DF90      		pop r13
 267               	.LVL32:
 268               		.loc 1 260 1 view .LVU57
 269 00ca 0895      		ret
 270               		.cfi_endproc
 271               	.LFE30:
 273               		.section	.text.send_string_with_delay,"ax",@progbits
 274               	.global	send_string_with_delay
 276               	send_string_with_delay:
 277               	.LVL33:
 278               	.LFB28:
 149:quantum/send_string.c ****     while (1) {
 279               		.loc 1 149 64 is_stmt 1 view -0
 280               		.cfi_startproc
 149:quantum/send_string.c ****     while (1) {
 281               		.loc 1 149 64 is_stmt 0 view .LVU59
 282 0000 EF92      		push r14
 283               	.LCFI7:
 284               		.cfi_def_cfa_offset 3
 285               		.cfi_offset 14, -2
 286 0002 FF92      		push r15
 287               	.LCFI8:
 288               		.cfi_def_cfa_offset 4
 289               		.cfi_offset 15, -3
 290 0004 0F93      		push r16
 291               	.LCFI9:
 292               		.cfi_def_cfa_offset 5
 293               		.cfi_offset 16, -4
 294 0006 1F93      		push r17
 295               	.LCFI10:
 296               		.cfi_def_cfa_offset 6
 297               		.cfi_offset 17, -5
 298 0008 CF93      		push r28
 299               	.LCFI11:
 300               		.cfi_def_cfa_offset 7
 301               		.cfi_offset 28, -6
 302 000a DF93      		push r29
 303               	.LCFI12:
 304               		.cfi_def_cfa_offset 8
 305               		.cfi_offset 29, -7
 306               	/* prologue: function */
 307               	/* frame size = 0 */
 308               	/* stack size = 6 */
 309               	.L__stack_usage = 6
 310 000c EC01      		movw r28,r24
 311 000e 162F      		mov r17,r22
 312               	.LBB33:
 313               	.LBB34:
 172:quantum/send_string.c ****                     ms += keycode - '0';
 314               		.loc 1 172 24 view .LVU60
 315 0010 0AE0      		ldi r16,lo8(10)
 316               	.LVL34:
 317               	.L33:
 172:quantum/send_string.c ****                     ms += keycode - '0';
 318               		.loc 1 172 24 view .LVU61
 319               	.LBE34:
 320               	.LBE33:
 150:quantum/send_string.c ****         char ascii_code = *str;
 321               		.loc 1 150 5 is_stmt 1 view .LVU62
 322               	.LBB45:
 151:quantum/send_string.c ****         if (!ascii_code) break;
 323               		.loc 1 151 9 view .LVU63
 151:quantum/send_string.c ****         if (!ascii_code) break;
 324               		.loc 1 151 14 is_stmt 0 view .LVU64
 325 0012 8881      		ld r24,Y
 326               	.LVL35:
 152:quantum/send_string.c ****         if (ascii_code == SS_QMK_PREFIX) {
 327               		.loc 1 152 9 is_stmt 1 view .LVU65
 152:quantum/send_string.c ****         if (ascii_code == SS_QMK_PREFIX) {
 328               		.loc 1 152 12 is_stmt 0 view .LVU66
 329 0014 8823      		tst r24
 330 0016 01F4      		brne .+2
 331 0018 00C0      		rjmp .L19
 153:quantum/send_string.c ****             ascii_code = *(++str);
 332               		.loc 1 153 9 is_stmt 1 view .LVU67
 153:quantum/send_string.c ****             ascii_code = *(++str);
 333               		.loc 1 153 12 is_stmt 0 view .LVU68
 334 001a 8130      		cpi r24,lo8(1)
 335 001c 01F0      		breq .+2
 336 001e 00C0      		rjmp .L21
 154:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 337               		.loc 1 154 13 is_stmt 1 view .LVU69
 338               	.LVL36:
 154:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 339               		.loc 1 154 24 is_stmt 0 view .LVU70
 340 0020 8981      		ldd r24,Y+1
 341               	.LVL37:
 155:quantum/send_string.c ****                 // tap
 342               		.loc 1 155 13 is_stmt 1 view .LVU71
 155:quantum/send_string.c ****                 // tap
 343               		.loc 1 155 16 is_stmt 0 view .LVU72
 344 0022 8130      		cpi r24,lo8(1)
 345 0024 01F4      		brne .L22
 346               	.LBB37:
 157:quantum/send_string.c ****                 tap_code(keycode);
 347               		.loc 1 157 17 is_stmt 1 view .LVU73
 157:quantum/send_string.c ****                 tap_code(keycode);
 348               		.loc 1 157 25 is_stmt 0 view .LVU74
 349 0026 7E01      		movw r14,r28
 350 0028 22E0      		ldi r18,2
 351 002a E20E      		add r14,r18
 352 002c F11C      		adc r15,__zero_reg__
 353               	.LVL38:
 158:quantum/send_string.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 354               		.loc 1 158 17 is_stmt 1 view .LVU75
 355 002e 8A81      		ldd r24,Y+2
 356               	.LVL39:
 158:quantum/send_string.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 357               		.loc 1 158 17 is_stmt 0 view .LVU76
 358 0030 0E94 0000 		call tap_code
 359               	.LVL40:
 360               	.L34:
 158:quantum/send_string.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 361               		.loc 1 158 17 view .LVU77
 362               	.LBE37:
 363               	.LBB38:
 165:quantum/send_string.c ****                 unregister_code(keycode);
 364               		.loc 1 165 25 view .LVU78
 365 0034 E701      		movw r28,r14
 366               	.LVL41:
 367               	.L23:
 165:quantum/send_string.c ****                 unregister_code(keycode);
 368               		.loc 1 165 25 view .LVU79
 369               	.LBE38:
 181:quantum/send_string.c ****         // interval
 370               		.loc 1 181 9 is_stmt 1 view .LVU80
 181:quantum/send_string.c ****         // interval
 371               		.loc 1 181 9 is_stmt 0 view .LVU81
 372 0036 2196      		adiw r28,1
 373               	.LVL42:
 374               	.LBB39:
 184:quantum/send_string.c ****             while (ms--) wait_ms(1);
 375               		.loc 1 184 13 is_stmt 1 view .LVU82
 185:quantum/send_string.c ****         }
 376               		.loc 1 185 13 view .LVU83
 184:quantum/send_string.c ****             while (ms--) wait_ms(1);
 377               		.loc 1 184 21 is_stmt 0 view .LVU84
 378 0038 812F      		mov r24,r17
 379               	.LVL43:
 380               	.L31:
 185:quantum/send_string.c ****         }
 381               		.loc 1 185 22 discriminator 7 view .LVU85
 382               	.LVL44:
 383 003a 8150      		subi r24,1
 384 003c 00F0      		brcs .L33
 185:quantum/send_string.c ****         }
 385               		.loc 1 185 26 is_stmt 1 view .LVU86
 185:quantum/send_string.c ****         }
 386               		.loc 1 185 26 view .LVU87
 185:quantum/send_string.c ****         }
 387               		.loc 1 185 26 view .LVU88
 388               	.LBB40:
 389               	.LBI40:
 390               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 391               		.loc 2 166 1 view .LVU89
 392               	.LBB41:
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 393               		.loc 2 168 2 view .LVU90
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 394               		.loc 2 172 2 view .LVU91
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 395               		.loc 2 173 2 view .LVU92
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 396               		.loc 2 174 2 view .LVU93
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 397               		.loc 2 184 3 view .LVU94
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 398               		.loc 2 187 2 view .LVU95
 399 003e EFE9      		ldi r30,lo8(3999)
 400 0040 FFE0      		ldi r31,hi8(3999)
 401 0042 3197      	1:	sbiw r30,1
 402 0044 01F4      		brne 1b
 403 0046 00C0      		rjmp .
 404 0048 0000      		nop
 405 004a 00C0      		rjmp .L31
 406               	.LVL45:
 407               	.L22:
 408               		.loc 2 187 2 is_stmt 0 view .LVU96
 409               	.LBE41:
 410               	.LBE40:
 411               	.LBE39:
 159:quantum/send_string.c ****                 // down
 412               		.loc 1 159 20 is_stmt 1 view .LVU97
 159:quantum/send_string.c ****                 // down
 413               		.loc 1 159 23 is_stmt 0 view .LVU98
 414 004c 8230      		cpi r24,lo8(2)
 415 004e 01F4      		brne .L24
 416               	.LBB42:
 161:quantum/send_string.c ****                 register_code(keycode);
 417               		.loc 1 161 17 is_stmt 1 view .LVU99
 161:quantum/send_string.c ****                 register_code(keycode);
 418               		.loc 1 161 25 is_stmt 0 view .LVU100
 419 0050 7E01      		movw r14,r28
 420 0052 82E0      		ldi r24,2
 421 0054 E80E      		add r14,r24
 422 0056 F11C      		adc r15,__zero_reg__
 423               	.LVL46:
 162:quantum/send_string.c ****             } else if (ascii_code == SS_UP_CODE) {
 424               		.loc 1 162 17 is_stmt 1 view .LVU101
 425 0058 8A81      		ldd r24,Y+2
 426 005a 0E94 0000 		call register_code
 427               	.LVL47:
 162:quantum/send_string.c ****             } else if (ascii_code == SS_UP_CODE) {
 428               		.loc 1 162 17 is_stmt 0 view .LVU102
 429 005e 00C0      		rjmp .L34
 430               	.LVL48:
 431               	.L24:
 162:quantum/send_string.c ****             } else if (ascii_code == SS_UP_CODE) {
 432               		.loc 1 162 17 view .LVU103
 433               	.LBE42:
 163:quantum/send_string.c ****                 // up
 434               		.loc 1 163 20 is_stmt 1 view .LVU104
 163:quantum/send_string.c ****                 // up
 435               		.loc 1 163 23 is_stmt 0 view .LVU105
 436 0060 8330      		cpi r24,lo8(3)
 437 0062 01F4      		brne .L25
 438               	.LBB43:
 165:quantum/send_string.c ****                 unregister_code(keycode);
 439               		.loc 1 165 17 is_stmt 1 view .LVU106
 165:quantum/send_string.c ****                 unregister_code(keycode);
 440               		.loc 1 165 25 is_stmt 0 view .LVU107
 441 0064 7E01      		movw r14,r28
 442 0066 E2E0      		ldi r30,2
 443 0068 EE0E      		add r14,r30
 444 006a F11C      		adc r15,__zero_reg__
 445               	.LVL49:
 166:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 446               		.loc 1 166 17 is_stmt 1 view .LVU108
 447 006c 8A81      		ldd r24,Y+2
 448               	.LVL50:
 166:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 449               		.loc 1 166 17 is_stmt 0 view .LVU109
 450 006e 0E94 0000 		call unregister_code
 451               	.LVL51:
 166:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 452               		.loc 1 166 17 view .LVU110
 453 0072 00C0      		rjmp .L34
 454               	.LVL52:
 455               	.L25:
 166:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 456               		.loc 1 166 17 view .LVU111
 457               	.LBE43:
 167:quantum/send_string.c ****                 // delay
 458               		.loc 1 167 20 is_stmt 1 view .LVU112
 167:quantum/send_string.c ****                 // delay
 459               		.loc 1 167 23 is_stmt 0 view .LVU113
 460 0074 8430      		cpi r24,lo8(4)
 461 0076 01F0      		breq .L26
 462               	.LVL53:
 167:quantum/send_string.c ****                 // delay
 463               		.loc 1 167 23 view .LVU114
 464 0078 2196      		adiw r28,1
 465               	.LVL54:
 167:quantum/send_string.c ****                 // delay
 466               		.loc 1 167 23 view .LVU115
 467 007a 00C0      		rjmp .L23
 468               	.L26:
 469               	.LBB44:
 169:quantum/send_string.c ****                 uint8_t keycode = *(++str);
 470               		.loc 1 169 17 is_stmt 1 view .LVU116
 471               	.LVL55:
 170:quantum/send_string.c ****                 while (isdigit(keycode)) {
 472               		.loc 1 170 17 view .LVU117
 170:quantum/send_string.c ****                 while (isdigit(keycode)) {
 473               		.loc 1 170 25 is_stmt 0 view .LVU118
 474 007c 2A81      		ldd r18,Y+2
 475               	.LVL56:
 171:quantum/send_string.c ****                     ms *= 10;
 476               		.loc 1 171 17 is_stmt 1 view .LVU119
 170:quantum/send_string.c ****                 while (isdigit(keycode)) {
 477               		.loc 1 170 25 is_stmt 0 view .LVU120
 478 007e 2296      		adiw r28,2
 479               	.LVL57:
 169:quantum/send_string.c ****                 uint8_t keycode = *(++str);
 480               		.loc 1 169 25 view .LVU121
 481 0080 90E0      		ldi r25,0
 482 0082 80E0      		ldi r24,0
 483               	.LVL58:
 484               	.L27:
 169:quantum/send_string.c ****                 uint8_t keycode = *(++str);
 485               		.loc 1 169 25 view .LVU122
 486 0084 AE01      		movw r20,r28
 487 0086 4F5F      		subi r20,-1
 488 0088 5F4F      		sbci r21,-1
 171:quantum/send_string.c ****                     ms *= 10;
 489               		.loc 1 171 24 view .LVU123
 490 008a 2053      		subi r18,48
 491 008c 330B      		sbc r19,r19
 492               	.LVL59:
 171:quantum/send_string.c ****                     ms *= 10;
 493               		.loc 1 171 23 view .LVU124
 494 008e 2A30      		cpi r18,10
 495 0090 3105      		cpc r19,__zero_reg__
 496 0092 00F0      		brlo .L28
 497               	.L29:
 176:quantum/send_string.c ****             }
 498               		.loc 1 176 26 discriminator 7 view .LVU125
 499               	.LVL60:
 500 0094 0197      		sbiw r24,1
 501 0096 00F0      		brcs .L23
 176:quantum/send_string.c ****             }
 502               		.loc 1 176 30 is_stmt 1 view .LVU126
 176:quantum/send_string.c ****             }
 503               		.loc 1 176 30 view .LVU127
 176:quantum/send_string.c ****             }
 504               		.loc 1 176 30 view .LVU128
 505               	.LBB35:
 506               	.LBI35:
 166:/usr/avr/include/util/delay.h **** {
 507               		.loc 2 166 1 view .LVU129
 508               	.LBB36:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 509               		.loc 2 168 2 view .LVU130
 172:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 510               		.loc 2 172 2 view .LVU131
 173:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 511               		.loc 2 173 2 view .LVU132
 174:/usr/avr/include/util/delay.h **** 
 512               		.loc 2 174 2 view .LVU133
 184:/usr/avr/include/util/delay.h **** 	#endif
 513               		.loc 2 184 3 view .LVU134
 514               		.loc 2 187 2 view .LVU135
 515 0098 EFE9      		ldi r30,lo8(3999)
 516 009a FFE0      		ldi r31,hi8(3999)
 517 009c 3197      	1:	sbiw r30,1
 518 009e 01F4      		brne 1b
 519 00a0 00C0      		rjmp .
 520 00a2 0000      		nop
 521 00a4 00C0      		rjmp .L29
 522               	.LVL61:
 523               	.L28:
 524               		.loc 2 187 2 is_stmt 0 view .LVU136
 525               	.LBE36:
 526               	.LBE35:
 172:quantum/send_string.c ****                     ms += keycode - '0';
 527               		.loc 1 172 21 is_stmt 1 view .LVU137
 172:quantum/send_string.c ****                     ms += keycode - '0';
 528               		.loc 1 172 24 is_stmt 0 view .LVU138
 529 00a6 089F      		mul r16,r24
 530 00a8 B001      		movw r22,r0
 531 00aa 099F      		mul r16,r25
 532 00ac 700D      		add r23,r0
 533 00ae 1124      		clr __zero_reg__
 534               	.LVL62:
 173:quantum/send_string.c ****                     keycode = *(++str);
 535               		.loc 1 173 21 is_stmt 1 view .LVU139
 173:quantum/send_string.c ****                     keycode = *(++str);
 536               		.loc 1 173 24 is_stmt 0 view .LVU140
 537 00b0 C901      		movw r24,r18
 538 00b2 860F      		add r24,r22
 539 00b4 971F      		adc r25,r23
 540               	.LVL63:
 174:quantum/send_string.c ****                 }
 541               		.loc 1 174 21 is_stmt 1 view .LVU141
 174:quantum/send_string.c ****                 }
 542               		.loc 1 174 29 is_stmt 0 view .LVU142
 543 00b6 2981      		ldd r18,Y+1
 544               	.LVL64:
 174:quantum/send_string.c ****                 }
 545               		.loc 1 174 29 view .LVU143
 546 00b8 EA01      		movw r28,r20
 547 00ba 00C0      		rjmp .L27
 548               	.LVL65:
 549               	.L21:
 174:quantum/send_string.c ****                 }
 550               		.loc 1 174 29 view .LVU144
 551               	.LBE44:
 179:quantum/send_string.c ****         }
 552               		.loc 1 179 13 is_stmt 1 view .LVU145
 553 00bc 0E94 0000 		call send_char
 554               	.LVL66:
 179:quantum/send_string.c ****         }
 555               		.loc 1 179 13 is_stmt 0 view .LVU146
 556 00c0 00C0      		rjmp .L23
 557               	.LVL67:
 558               	.L19:
 559               	/* epilogue start */
 179:quantum/send_string.c ****         }
 560               		.loc 1 179 13 view .LVU147
 561               	.LBE45:
 188:quantum/send_string.c **** 
 562               		.loc 1 188 1 view .LVU148
 563 00c2 DF91      		pop r29
 564 00c4 CF91      		pop r28
 565               	.LVL68:
 188:quantum/send_string.c **** 
 566               		.loc 1 188 1 view .LVU149
 567 00c6 1F91      		pop r17
 568               	.LVL69:
 188:quantum/send_string.c **** 
 569               		.loc 1 188 1 view .LVU150
 570 00c8 0F91      		pop r16
 571 00ca FF90      		pop r15
 572 00cc EF90      		pop r14
 573 00ce 0895      		ret
 574               		.cfi_endproc
 575               	.LFE28:
 577               		.section	.text.send_string,"ax",@progbits
 578               	.global	send_string
 580               	send_string:
 581               	.LVL70:
 582               	.LFB26:
 145:quantum/send_string.c **** 
 583               		.loc 1 145 35 is_stmt 1 view -0
 584               		.cfi_startproc
 585               	/* prologue: function */
 586               	/* frame size = 0 */
 587               	/* stack size = 0 */
 588               	.L__stack_usage = 0
 145:quantum/send_string.c **** 
 589               		.loc 1 145 37 view .LVU152
 590 0000 60E0      		ldi r22,0
 591 0002 0C94 0000 		jmp send_string_with_delay
 592               	.LVL71:
 145:quantum/send_string.c **** 
 593               		.loc 1 145 37 is_stmt 0 view .LVU153
 594               		.cfi_endproc
 595               	.LFE26:
 597               		.section	.text.send_string_with_delay_P,"ax",@progbits
 598               	.global	send_string_with_delay_P
 600               	send_string_with_delay_P:
 601               	.LVL72:
 602               	.LFB29:
 190:quantum/send_string.c ****     while (1) {
 603               		.loc 1 190 66 is_stmt 1 view -0
 604               		.cfi_startproc
 190:quantum/send_string.c ****     while (1) {
 605               		.loc 1 190 66 is_stmt 0 view .LVU155
 606 0000 EF92      		push r14
 607               	.LCFI13:
 608               		.cfi_def_cfa_offset 3
 609               		.cfi_offset 14, -2
 610 0002 FF92      		push r15
 611               	.LCFI14:
 612               		.cfi_def_cfa_offset 4
 613               		.cfi_offset 15, -3
 614 0004 0F93      		push r16
 615               	.LCFI15:
 616               		.cfi_def_cfa_offset 5
 617               		.cfi_offset 16, -4
 618 0006 1F93      		push r17
 619               	.LCFI16:
 620               		.cfi_def_cfa_offset 6
 621               		.cfi_offset 17, -5
 622 0008 CF93      		push r28
 623               	.LCFI17:
 624               		.cfi_def_cfa_offset 7
 625               		.cfi_offset 28, -6
 626 000a DF93      		push r29
 627               	.LCFI18:
 628               		.cfi_def_cfa_offset 8
 629               		.cfi_offset 29, -7
 630               	/* prologue: function */
 631               	/* frame size = 0 */
 632               	/* stack size = 6 */
 633               	.L__stack_usage = 6
 634 000c 8C01      		movw r16,r24
 635 000e F62E      		mov r15,r22
 636               	.LBB46:
 637               	.LBB47:
 213:quantum/send_string.c ****                     ms += keycode - '0';
 638               		.loc 1 213 24 view .LVU156
 639 0010 8AE0      		ldi r24,lo8(10)
 640 0012 E82E      		mov r14,r24
 641               	.LVL73:
 642               	.L49:
 213:quantum/send_string.c ****                     ms += keycode - '0';
 643               		.loc 1 213 24 view .LVU157
 644               	.LBE47:
 645               	.LBE46:
 191:quantum/send_string.c ****         char ascii_code = pgm_read_byte(str);
 646               		.loc 1 191 5 is_stmt 1 view .LVU158
 647               	.LBB64:
 192:quantum/send_string.c ****         if (!ascii_code) break;
 648               		.loc 1 192 9 view .LVU159
 649               	.LBB52:
 192:quantum/send_string.c ****         if (!ascii_code) break;
 650               		.loc 1 192 27 view .LVU160
 192:quantum/send_string.c ****         if (!ascii_code) break;
 651               		.loc 1 192 27 view .LVU161
 192:quantum/send_string.c ****         if (!ascii_code) break;
 652               		.loc 1 192 27 view .LVU162
 653 0014 F801      		movw r30,r16
 654               	/* #APP */
 655               	 ;  192 "quantum/send_string.c" 1
 656 0016 8491      		lpm r24, Z
 657               		
 658               	 ;  0 "" 2
 659               	.LVL74:
 192:quantum/send_string.c ****         if (!ascii_code) break;
 660               		.loc 1 192 27 view .LVU163
 192:quantum/send_string.c ****         if (!ascii_code) break;
 661               		.loc 1 192 27 is_stmt 0 view .LVU164
 662               	/* #NOAPP */
 663               	.LBE52:
 193:quantum/send_string.c ****         if (ascii_code == SS_QMK_PREFIX) {
 664               		.loc 1 193 9 is_stmt 1 view .LVU165
 193:quantum/send_string.c ****         if (ascii_code == SS_QMK_PREFIX) {
 665               		.loc 1 193 12 is_stmt 0 view .LVU166
 666 0018 8823      		tst r24
 667 001a 01F4      		brne .+2
 668 001c 00C0      		rjmp .L36
 194:quantum/send_string.c ****             ascii_code = pgm_read_byte(++str);
 669               		.loc 1 194 9 is_stmt 1 view .LVU167
 194:quantum/send_string.c ****             ascii_code = pgm_read_byte(++str);
 670               		.loc 1 194 12 is_stmt 0 view .LVU168
 671 001e 8130      		cpi r24,lo8(1)
 672 0020 01F0      		breq .+2
 673 0022 00C0      		rjmp .L38
 674 0024 E801      		movw r28,r16
 675 0026 2196      		adiw r28,1
 195:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 676               		.loc 1 195 13 is_stmt 1 view .LVU169
 677               	.LBB53:
 195:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 678               		.loc 1 195 26 view .LVU170
 679               	.LVL75:
 195:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 680               		.loc 1 195 26 view .LVU171
 195:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 681               		.loc 1 195 26 view .LVU172
 682 0028 FE01      		movw r30,r28
 683               	/* #APP */
 684               	 ;  195 "quantum/send_string.c" 1
 685 002a 8491      		lpm r24, Z
 686               		
 687               	 ;  0 "" 2
 688               	.LVL76:
 195:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 689               		.loc 1 195 26 view .LVU173
 195:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 690               		.loc 1 195 26 is_stmt 0 view .LVU174
 691               	/* #NOAPP */
 692               	.LBE53:
 196:quantum/send_string.c ****                 // tap
 693               		.loc 1 196 13 is_stmt 1 view .LVU175
 196:quantum/send_string.c ****                 // tap
 694               		.loc 1 196 16 is_stmt 0 view .LVU176
 695 002c 8130      		cpi r24,lo8(1)
 696 002e 01F4      		brne .L39
 697               	.LBB54:
 198:quantum/send_string.c ****                 tap_code(keycode);
 698               		.loc 1 198 17 is_stmt 1 view .LVU177
 699               	.LBB55:
 198:quantum/send_string.c ****                 tap_code(keycode);
 700               		.loc 1 198 35 view .LVU178
 701 0030 2196      		adiw r28,1
 702               	.LVL77:
 198:quantum/send_string.c ****                 tap_code(keycode);
 703               		.loc 1 198 35 view .LVU179
 198:quantum/send_string.c ****                 tap_code(keycode);
 704               		.loc 1 198 35 view .LVU180
 705 0032 FE01      		movw r30,r28
 706               	.LVL78:
 198:quantum/send_string.c ****                 tap_code(keycode);
 707               		.loc 1 198 35 is_stmt 0 view .LVU181
 708               	/* #APP */
 709               	 ;  198 "quantum/send_string.c" 1
 710 0034 8491      		lpm r24, Z
 711               		
 712               	 ;  0 "" 2
 713               	.LVL79:
 198:quantum/send_string.c ****                 tap_code(keycode);
 714               		.loc 1 198 35 is_stmt 1 view .LVU182
 198:quantum/send_string.c ****                 tap_code(keycode);
 715               		.loc 1 198 35 is_stmt 0 view .LVU183
 716               	/* #NOAPP */
 717               	.LBE55:
 199:quantum/send_string.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 718               		.loc 1 199 17 is_stmt 1 view .LVU184
 719 0036 0E94 0000 		call tap_code
 720               	.LVL80:
 721               	.L40:
 199:quantum/send_string.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 722               		.loc 1 199 17 is_stmt 0 view .LVU185
 723               	.LBE54:
 222:quantum/send_string.c ****         // interval
 724               		.loc 1 222 9 is_stmt 1 view .LVU186
 725 003a 8E01      		movw r16,r28
 726               	.LVL81:
 222:quantum/send_string.c ****         // interval
 727               		.loc 1 222 9 is_stmt 0 view .LVU187
 728 003c 0F5F      		subi r16,-1
 729 003e 1F4F      		sbci r17,-1
 730               	.LVL82:
 731               	.LBB56:
 225:quantum/send_string.c ****             while (ms--) wait_ms(1);
 732               		.loc 1 225 13 is_stmt 1 view .LVU188
 226:quantum/send_string.c ****         }
 733               		.loc 1 226 13 view .LVU189
 225:quantum/send_string.c ****             while (ms--) wait_ms(1);
 734               		.loc 1 225 21 is_stmt 0 view .LVU190
 735 0040 8F2D      		mov r24,r15
 736               	.LVL83:
 737               	.L47:
 226:quantum/send_string.c ****         }
 738               		.loc 1 226 22 discriminator 7 view .LVU191
 739               	.LVL84:
 740 0042 8150      		subi r24,1
 741 0044 00F0      		brcs .L49
 226:quantum/send_string.c ****         }
 742               		.loc 1 226 26 is_stmt 1 view .LVU192
 226:quantum/send_string.c ****         }
 743               		.loc 1 226 26 view .LVU193
 226:quantum/send_string.c ****         }
 744               		.loc 1 226 26 view .LVU194
 745               	.LBB57:
 746               	.LBI57:
 166:/usr/avr/include/util/delay.h **** {
 747               		.loc 2 166 1 view .LVU195
 748               	.LBB58:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 749               		.loc 2 168 2 view .LVU196
 172:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 750               		.loc 2 172 2 view .LVU197
 173:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 751               		.loc 2 173 2 view .LVU198
 174:/usr/avr/include/util/delay.h **** 
 752               		.loc 2 174 2 view .LVU199
 184:/usr/avr/include/util/delay.h **** 	#endif
 753               		.loc 2 184 3 view .LVU200
 754               		.loc 2 187 2 view .LVU201
 755 0046 EFE9      		ldi r30,lo8(3999)
 756 0048 FFE0      		ldi r31,hi8(3999)
 757 004a 3197      	1:	sbiw r30,1
 758 004c 01F4      		brne 1b
 759 004e 00C0      		rjmp .
 760 0050 0000      		nop
 761 0052 00C0      		rjmp .L47
 762               	.LVL85:
 763               	.L39:
 764               		.loc 2 187 2 is_stmt 0 view .LVU202
 765               	.LBE58:
 766               	.LBE57:
 767               	.LBE56:
 200:quantum/send_string.c ****                 // down
 768               		.loc 1 200 20 is_stmt 1 view .LVU203
 200:quantum/send_string.c ****                 // down
 769               		.loc 1 200 23 is_stmt 0 view .LVU204
 770 0054 8230      		cpi r24,lo8(2)
 771 0056 01F4      		brne .L41
 772               	.LBB59:
 202:quantum/send_string.c ****                 register_code(keycode);
 773               		.loc 1 202 17 is_stmt 1 view .LVU205
 774               	.LBB60:
 202:quantum/send_string.c ****                 register_code(keycode);
 775               		.loc 1 202 35 view .LVU206
 776 0058 E801      		movw r28,r16
 777               	.LVL86:
 202:quantum/send_string.c ****                 register_code(keycode);
 778               		.loc 1 202 35 is_stmt 0 view .LVU207
 779 005a 2296      		adiw r28,2
 780               	.LVL87:
 202:quantum/send_string.c ****                 register_code(keycode);
 781               		.loc 1 202 35 is_stmt 1 view .LVU208
 202:quantum/send_string.c ****                 register_code(keycode);
 782               		.loc 1 202 35 view .LVU209
 783 005c FE01      		movw r30,r28
 784               	.LVL88:
 202:quantum/send_string.c ****                 register_code(keycode);
 785               		.loc 1 202 35 is_stmt 0 view .LVU210
 786               	/* #APP */
 787               	 ;  202 "quantum/send_string.c" 1
 788 005e 8491      		lpm r24, Z
 789               		
 790               	 ;  0 "" 2
 791               	.LVL89:
 202:quantum/send_string.c ****                 register_code(keycode);
 792               		.loc 1 202 35 is_stmt 1 view .LVU211
 202:quantum/send_string.c ****                 register_code(keycode);
 793               		.loc 1 202 35 is_stmt 0 view .LVU212
 794               	/* #NOAPP */
 795               	.LBE60:
 203:quantum/send_string.c ****             } else if (ascii_code == SS_UP_CODE) {
 796               		.loc 1 203 17 is_stmt 1 view .LVU213
 797 0060 0E94 0000 		call register_code
 798               	.LVL90:
 203:quantum/send_string.c ****             } else if (ascii_code == SS_UP_CODE) {
 799               		.loc 1 203 17 is_stmt 0 view .LVU214
 800               	.LBE59:
 801 0064 00C0      		rjmp .L40
 802               	.LVL91:
 803               	.L41:
 204:quantum/send_string.c ****                 // up
 804               		.loc 1 204 20 is_stmt 1 view .LVU215
 204:quantum/send_string.c ****                 // up
 805               		.loc 1 204 23 is_stmt 0 view .LVU216
 806 0066 8330      		cpi r24,lo8(3)
 807 0068 01F4      		brne .L42
 808               	.LBB61:
 206:quantum/send_string.c ****                 unregister_code(keycode);
 809               		.loc 1 206 17 is_stmt 1 view .LVU217
 810               	.LBB62:
 206:quantum/send_string.c ****                 unregister_code(keycode);
 811               		.loc 1 206 35 view .LVU218
 812 006a E801      		movw r28,r16
 813               	.LVL92:
 206:quantum/send_string.c ****                 unregister_code(keycode);
 814               		.loc 1 206 35 is_stmt 0 view .LVU219
 815 006c 2296      		adiw r28,2
 816               	.LVL93:
 206:quantum/send_string.c ****                 unregister_code(keycode);
 817               		.loc 1 206 35 is_stmt 1 view .LVU220
 206:quantum/send_string.c ****                 unregister_code(keycode);
 818               		.loc 1 206 35 view .LVU221
 819 006e FE01      		movw r30,r28
 820               	.LVL94:
 206:quantum/send_string.c ****                 unregister_code(keycode);
 821               		.loc 1 206 35 is_stmt 0 view .LVU222
 822               	/* #APP */
 823               	 ;  206 "quantum/send_string.c" 1
 824 0070 8491      		lpm r24, Z
 825               		
 826               	 ;  0 "" 2
 827               	.LVL95:
 206:quantum/send_string.c ****                 unregister_code(keycode);
 828               		.loc 1 206 35 is_stmt 1 view .LVU223
 206:quantum/send_string.c ****                 unregister_code(keycode);
 829               		.loc 1 206 35 is_stmt 0 view .LVU224
 830               	/* #NOAPP */
 831               	.LBE62:
 207:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 832               		.loc 1 207 17 is_stmt 1 view .LVU225
 833 0072 0E94 0000 		call unregister_code
 834               	.LVL96:
 207:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 835               		.loc 1 207 17 is_stmt 0 view .LVU226
 836               	.LBE61:
 837 0076 00C0      		rjmp .L40
 838               	.LVL97:
 839               	.L42:
 208:quantum/send_string.c ****                 // delay
 840               		.loc 1 208 20 is_stmt 1 view .LVU227
 208:quantum/send_string.c ****                 // delay
 841               		.loc 1 208 23 is_stmt 0 view .LVU228
 842 0078 8430      		cpi r24,lo8(4)
 843 007a 01F4      		brne .L40
 844               	.LBB63:
 210:quantum/send_string.c ****                 uint8_t keycode = pgm_read_byte(++str);
 845               		.loc 1 210 17 is_stmt 1 view .LVU229
 846               	.LVL98:
 211:quantum/send_string.c ****                 while (isdigit(keycode)) {
 847               		.loc 1 211 17 view .LVU230
 848               	.LBB48:
 211:quantum/send_string.c ****                 while (isdigit(keycode)) {
 849               		.loc 1 211 35 view .LVU231
 850 007c E801      		movw r28,r16
 851               	.LVL99:
 211:quantum/send_string.c ****                 while (isdigit(keycode)) {
 852               		.loc 1 211 35 is_stmt 0 view .LVU232
 853 007e 2296      		adiw r28,2
 854               	.LVL100:
 211:quantum/send_string.c ****                 while (isdigit(keycode)) {
 855               		.loc 1 211 35 is_stmt 1 view .LVU233
 211:quantum/send_string.c ****                 while (isdigit(keycode)) {
 856               		.loc 1 211 35 view .LVU234
 857 0080 FE01      		movw r30,r28
 858               	.LVL101:
 211:quantum/send_string.c ****                 while (isdigit(keycode)) {
 859               		.loc 1 211 35 is_stmt 0 view .LVU235
 860               	/* #APP */
 861               	 ;  211 "quantum/send_string.c" 1
 862 0082 2491      		lpm r18, Z
 863               		
 864               	 ;  0 "" 2
 865               	.LVL102:
 211:quantum/send_string.c ****                 while (isdigit(keycode)) {
 866               		.loc 1 211 35 is_stmt 1 view .LVU236
 211:quantum/send_string.c ****                 while (isdigit(keycode)) {
 867               		.loc 1 211 35 is_stmt 0 view .LVU237
 868               	/* #NOAPP */
 869               	.LBE48:
 212:quantum/send_string.c ****                     ms *= 10;
 870               		.loc 1 212 17 is_stmt 1 view .LVU238
 210:quantum/send_string.c ****                 uint8_t keycode = pgm_read_byte(++str);
 871               		.loc 1 210 25 is_stmt 0 view .LVU239
 872 0084 90E0      		ldi r25,0
 873 0086 80E0      		ldi r24,0
 874               	.LVL103:
 875               	.L43:
 210:quantum/send_string.c ****                 uint8_t keycode = pgm_read_byte(++str);
 876               		.loc 1 210 25 view .LVU240
 877 0088 FE01      		movw r30,r28
 878 008a 3196      		adiw r30,1
 212:quantum/send_string.c ****                     ms *= 10;
 879               		.loc 1 212 24 view .LVU241
 880 008c 2053      		subi r18,48
 881 008e 330B      		sbc r19,r19
 882               	.LVL104:
 212:quantum/send_string.c ****                     ms *= 10;
 883               		.loc 1 212 23 view .LVU242
 884 0090 2A30      		cpi r18,10
 885 0092 3105      		cpc r19,__zero_reg__
 886 0094 00F0      		brlo .L44
 887               	.L45:
 217:quantum/send_string.c ****             }
 888               		.loc 1 217 26 discriminator 7 view .LVU243
 889               	.LVL105:
 890 0096 0197      		sbiw r24,1
 891 0098 00F0      		brcs .L40
 217:quantum/send_string.c ****             }
 892               		.loc 1 217 30 is_stmt 1 view .LVU244
 217:quantum/send_string.c ****             }
 893               		.loc 1 217 30 view .LVU245
 217:quantum/send_string.c ****             }
 894               		.loc 1 217 30 view .LVU246
 895               	.LBB49:
 896               	.LBI49:
 166:/usr/avr/include/util/delay.h **** {
 897               		.loc 2 166 1 view .LVU247
 898               	.LBB50:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 899               		.loc 2 168 2 view .LVU248
 172:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 900               		.loc 2 172 2 view .LVU249
 173:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 901               		.loc 2 173 2 view .LVU250
 174:/usr/avr/include/util/delay.h **** 
 902               		.loc 2 174 2 view .LVU251
 184:/usr/avr/include/util/delay.h **** 	#endif
 903               		.loc 2 184 3 view .LVU252
 904               		.loc 2 187 2 view .LVU253
 905 009a EFE9      		ldi r30,lo8(3999)
 906 009c FFE0      		ldi r31,hi8(3999)
 907 009e 3197      	1:	sbiw r30,1
 908 00a0 01F4      		brne 1b
 909 00a2 00C0      		rjmp .
 910 00a4 0000      		nop
 911 00a6 00C0      		rjmp .L45
 912               	.LVL106:
 913               	.L44:
 914               		.loc 2 187 2 is_stmt 0 view .LVU254
 915               	.LBE50:
 916               	.LBE49:
 213:quantum/send_string.c ****                     ms += keycode - '0';
 917               		.loc 1 213 21 is_stmt 1 view .LVU255
 213:quantum/send_string.c ****                     ms += keycode - '0';
 918               		.loc 1 213 24 is_stmt 0 view .LVU256
 919 00a8 E89E      		mul r14,r24
 920 00aa A001      		movw r20,r0
 921 00ac E99E      		mul r14,r25
 922 00ae 500D      		add r21,r0
 923 00b0 1124      		clr __zero_reg__
 924               	.LVL107:
 214:quantum/send_string.c ****                     keycode = pgm_read_byte(++str);
 925               		.loc 1 214 21 is_stmt 1 view .LVU257
 214:quantum/send_string.c ****                     keycode = pgm_read_byte(++str);
 926               		.loc 1 214 24 is_stmt 0 view .LVU258
 927 00b2 C901      		movw r24,r18
 928 00b4 840F      		add r24,r20
 929 00b6 951F      		adc r25,r21
 930               	.LVL108:
 215:quantum/send_string.c ****                 }
 931               		.loc 1 215 21 is_stmt 1 view .LVU259
 932               	.LBB51:
 215:quantum/send_string.c ****                 }
 933               		.loc 1 215 31 view .LVU260
 215:quantum/send_string.c ****                 }
 934               		.loc 1 215 31 view .LVU261
 215:quantum/send_string.c ****                 }
 935               		.loc 1 215 31 view .LVU262
 936               	/* #APP */
 937               	 ;  215 "quantum/send_string.c" 1
 938 00b8 2491      		lpm r18, Z
 939               		
 940               	 ;  0 "" 2
 941               	.LVL109:
 215:quantum/send_string.c ****                 }
 942               		.loc 1 215 31 view .LVU263
 215:quantum/send_string.c ****                 }
 943               		.loc 1 215 31 is_stmt 0 view .LVU264
 944               	/* #NOAPP */
 945 00ba EF01      		movw r28,r30
 946 00bc 00C0      		rjmp .L43
 947               	.LVL110:
 948               	.L38:
 215:quantum/send_string.c ****                 }
 949               		.loc 1 215 31 view .LVU265
 950               	.LBE51:
 951               	.LBE63:
 220:quantum/send_string.c ****         }
 952               		.loc 1 220 13 is_stmt 1 view .LVU266
 953 00be 0E94 0000 		call send_char
 954               	.LVL111:
 220:quantum/send_string.c ****         }
 955               		.loc 1 220 13 is_stmt 0 view .LVU267
 956 00c2 E801      		movw r28,r16
 957 00c4 00C0      		rjmp .L40
 958               	.LVL112:
 959               	.L36:
 960               	/* epilogue start */
 220:quantum/send_string.c ****         }
 961               		.loc 1 220 13 view .LVU268
 962               	.LBE64:
 229:quantum/send_string.c **** 
 963               		.loc 1 229 1 view .LVU269
 964 00c6 DF91      		pop r29
 965 00c8 CF91      		pop r28
 966 00ca 1F91      		pop r17
 967 00cc 0F91      		pop r16
 968               	.LVL113:
 229:quantum/send_string.c **** 
 969               		.loc 1 229 1 view .LVU270
 970 00ce FF90      		pop r15
 971               	.LVL114:
 229:quantum/send_string.c **** 
 972               		.loc 1 229 1 view .LVU271
 973 00d0 EF90      		pop r14
 974 00d2 0895      		ret
 975               		.cfi_endproc
 976               	.LFE29:
 978               		.section	.text.send_string_P,"ax",@progbits
 979               	.global	send_string_P
 981               	send_string_P:
 982               	.LVL115:
 983               	.LFB27:
 147:quantum/send_string.c **** 
 984               		.loc 1 147 37 is_stmt 1 view -0
 985               		.cfi_startproc
 986               	/* prologue: function */
 987               	/* frame size = 0 */
 988               	/* stack size = 0 */
 989               	.L__stack_usage = 0
 147:quantum/send_string.c **** 
 990               		.loc 1 147 39 view .LVU273
 991 0000 60E0      		ldi r22,0
 992 0002 0C94 0000 		jmp send_string_with_delay_P
 993               	.LVL116:
 147:quantum/send_string.c **** 
 994               		.loc 1 147 39 is_stmt 0 view .LVU274
 995               		.cfi_endproc
 996               	.LFE27:
 998               		.section	.text.send_nibble,"ax",@progbits
 999               	.global	send_nibble
 1001               	send_nibble:
 1002               	.LVL117:
 1003               	.LFB34:
 261:quantum/send_string.c **** 
 262:quantum/send_string.c **** void send_dword(uint32_t number) {
 263:quantum/send_string.c ****     send_word(number >> 16);
 264:quantum/send_string.c ****     send_word(number & 0xFFFFUL);
 265:quantum/send_string.c **** }
 266:quantum/send_string.c **** 
 267:quantum/send_string.c **** void send_word(uint16_t number) {
 268:quantum/send_string.c ****     send_byte(number >> 8);
 269:quantum/send_string.c ****     send_byte(number & 0xFF);
 270:quantum/send_string.c **** }
 271:quantum/send_string.c **** 
 272:quantum/send_string.c **** void send_byte(uint8_t number) {
 273:quantum/send_string.c ****     send_nibble(number >> 4);
 274:quantum/send_string.c ****     send_nibble(number & 0xF);
 275:quantum/send_string.c **** }
 276:quantum/send_string.c **** 
 277:quantum/send_string.c **** void send_nibble(uint8_t number) {
 1004               		.loc 1 277 34 is_stmt 1 view -0
 1005               		.cfi_startproc
 1006               	/* prologue: function */
 1007               	/* frame size = 0 */
 1008               	/* stack size = 0 */
 1009               	.L__stack_usage = 0
 278:quantum/send_string.c ****     switch (number & 0xF) {
 1010               		.loc 1 278 5 view .LVU276
 1011 0000 982F      		mov r25,r24
 1012 0002 9F70      		andi r25,lo8(15)
 1013 0004 9A50      		subi r25,lo8(-(-10))
 1014 0006 9630      		cpi r25,lo8(6)
 1015 0008 00F0      		brlo .L52
 279:quantum/send_string.c ****         case 0 ... 9:
 280:quantum/send_string.c ****             send_char(number + '0');
 1016               		.loc 1 280 13 view .LVU277
 1017 000a 805D      		subi r24,lo8(-(48))
 1018               	.LVL118:
 1019               	.L53:
 281:quantum/send_string.c ****             break;
 282:quantum/send_string.c ****         case 10 ... 15:
 283:quantum/send_string.c ****             send_char(number - 10 + 'a');
 1020               		.loc 1 283 13 is_stmt 0 view .LVU278
 1021 000c 0C94 0000 		jmp send_char
 1022               	.LVL119:
 1023               	.L52:
 1024               		.loc 1 283 13 is_stmt 1 view .LVU279
 1025 0010 895A      		subi r24,lo8(-(87))
 1026               	.LVL120:
 1027               		.loc 1 283 13 is_stmt 0 view .LVU280
 1028 0012 00C0      		rjmp .L53
 1029               		.cfi_endproc
 1030               	.LFE34:
 1032               		.section	.text.send_byte,"ax",@progbits
 1033               	.global	send_byte
 1035               	send_byte:
 1036               	.LVL121:
 1037               	.LFB33:
 272:quantum/send_string.c ****     send_nibble(number >> 4);
 1038               		.loc 1 272 32 is_stmt 1 view -0
 1039               		.cfi_startproc
 272:quantum/send_string.c ****     send_nibble(number >> 4);
 1040               		.loc 1 272 32 is_stmt 0 view .LVU282
 1041 0000 CF93      		push r28
 1042               	.LCFI19:
 1043               		.cfi_def_cfa_offset 3
 1044               		.cfi_offset 28, -2
 1045               	/* prologue: function */
 1046               	/* frame size = 0 */
 1047               	/* stack size = 1 */
 1048               	.L__stack_usage = 1
 1049 0002 C82F      		mov r28,r24
 273:quantum/send_string.c ****     send_nibble(number & 0xF);
 1050               		.loc 1 273 5 is_stmt 1 view .LVU283
 1051 0004 8295      		swap r24
 1052               	.LVL122:
 273:quantum/send_string.c ****     send_nibble(number & 0xF);
 1053               		.loc 1 273 5 is_stmt 0 view .LVU284
 1054 0006 8F70      		andi r24,lo8(15)
 1055 0008 0E94 0000 		call send_nibble
 1056               	.LVL123:
 274:quantum/send_string.c **** }
 1057               		.loc 1 274 5 is_stmt 1 view .LVU285
 1058 000c 8C2F      		mov r24,r28
 1059 000e 8F70      		andi r24,lo8(15)
 1060               	/* epilogue start */
 275:quantum/send_string.c **** 
 1061               		.loc 1 275 1 is_stmt 0 view .LVU286
 1062 0010 CF91      		pop r28
 1063               	.LVL124:
 274:quantum/send_string.c **** }
 1064               		.loc 1 274 5 view .LVU287
 1065 0012 0C94 0000 		jmp send_nibble
 1066               	.LVL125:
 1067               		.cfi_endproc
 1068               	.LFE33:
 1070               		.section	.text.send_word,"ax",@progbits
 1071               	.global	send_word
 1073               	send_word:
 1074               	.LVL126:
 1075               	.LFB32:
 267:quantum/send_string.c ****     send_byte(number >> 8);
 1076               		.loc 1 267 33 is_stmt 1 view -0
 1077               		.cfi_startproc
 267:quantum/send_string.c ****     send_byte(number >> 8);
 1078               		.loc 1 267 33 is_stmt 0 view .LVU289
 1079 0000 CF93      		push r28
 1080               	.LCFI20:
 1081               		.cfi_def_cfa_offset 3
 1082               		.cfi_offset 28, -2
 1083               	/* prologue: function */
 1084               	/* frame size = 0 */
 1085               	/* stack size = 1 */
 1086               	.L__stack_usage = 1
 1087 0002 C82F      		mov r28,r24
 268:quantum/send_string.c ****     send_byte(number & 0xFF);
 1088               		.loc 1 268 5 is_stmt 1 view .LVU290
 1089 0004 892F      		mov r24,r25
 1090               	.LVL127:
 268:quantum/send_string.c ****     send_byte(number & 0xFF);
 1091               		.loc 1 268 5 is_stmt 0 view .LVU291
 1092 0006 0E94 0000 		call send_byte
 1093               	.LVL128:
 269:quantum/send_string.c **** }
 1094               		.loc 1 269 5 is_stmt 1 view .LVU292
 1095 000a 8C2F      		mov r24,r28
 1096               	/* epilogue start */
 270:quantum/send_string.c **** 
 1097               		.loc 1 270 1 is_stmt 0 view .LVU293
 1098 000c CF91      		pop r28
 269:quantum/send_string.c **** }
 1099               		.loc 1 269 5 view .LVU294
 1100 000e 0C94 0000 		jmp send_byte
 1101               	.LVL129:
 1102               		.cfi_endproc
 1103               	.LFE32:
 1105               		.section	.text.send_dword,"ax",@progbits
 1106               	.global	send_dword
 1108               	send_dword:
 1109               	.LVL130:
 1110               	.LFB31:
 262:quantum/send_string.c ****     send_word(number >> 16);
 1111               		.loc 1 262 34 is_stmt 1 view -0
 1112               		.cfi_startproc
 262:quantum/send_string.c ****     send_word(number >> 16);
 1113               		.loc 1 262 34 is_stmt 0 view .LVU296
 1114 0000 CF92      		push r12
 1115               	.LCFI21:
 1116               		.cfi_def_cfa_offset 3
 1117               		.cfi_offset 12, -2
 1118 0002 DF92      		push r13
 1119               	.LCFI22:
 1120               		.cfi_def_cfa_offset 4
 1121               		.cfi_offset 13, -3
 1122 0004 EF92      		push r14
 1123               	.LCFI23:
 1124               		.cfi_def_cfa_offset 5
 1125               		.cfi_offset 14, -4
 1126 0006 FF92      		push r15
 1127               	.LCFI24:
 1128               		.cfi_def_cfa_offset 6
 1129               		.cfi_offset 15, -5
 1130               	/* prologue: function */
 1131               	/* frame size = 0 */
 1132               	/* stack size = 4 */
 1133               	.L__stack_usage = 4
 1134 0008 6B01      		movw r12,r22
 263:quantum/send_string.c ****     send_word(number & 0xFFFFUL);
 1135               		.loc 1 263 5 is_stmt 1 view .LVU297
 1136 000a 0E94 0000 		call send_word
 1137               	.LVL131:
 264:quantum/send_string.c **** }
 1138               		.loc 1 264 5 view .LVU298
 1139 000e C601      		movw r24,r12
 1140               	/* epilogue start */
 265:quantum/send_string.c **** 
 1141               		.loc 1 265 1 is_stmt 0 view .LVU299
 1142 0010 FF90      		pop r15
 1143 0012 EF90      		pop r14
 1144 0014 DF90      		pop r13
 1145 0016 CF90      		pop r12
 264:quantum/send_string.c **** }
 1146               		.loc 1 264 5 view .LVU300
 1147 0018 0C94 0000 		jmp send_word
 1148               	.LVL132:
 1149               		.cfi_endproc
 1150               	.LFE31:
 1152               		.section	.text.tap_random_base64,"ax",@progbits
 1153               	.global	tap_random_base64
 1155               	tap_random_base64:
 1156               	.LFB35:
 284:quantum/send_string.c ****             break;
 285:quantum/send_string.c ****     }
 286:quantum/send_string.c **** }
 287:quantum/send_string.c **** 
 288:quantum/send_string.c **** void tap_random_base64(void) {
 1157               		.loc 1 288 30 is_stmt 1 view -0
 1158               		.cfi_startproc
 1159               	/* prologue: function */
 1160               	/* frame size = 0 */
 1161               	/* stack size = 0 */
 1162               	.L__stack_usage = 0
 289:quantum/send_string.c **** #if defined(__AVR_ATmega32U4__)
 290:quantum/send_string.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 1163               		.loc 1 290 5 view .LVU302
 1164               		.loc 1 290 20 is_stmt 0 view .LVU303
 1165 0000 96B5      		in r25,0x26
 1166               		.loc 1 290 28 view .LVU304
 1167 0002 2091 8400 		lds r18,132
 1168 0006 3091 8500 		lds r19,132+1
 1169               		.loc 1 290 36 view .LVU305
 1170 000a 6091 9400 		lds r22,148
 1171 000e 7091 9500 		lds r23,148+1
 1172               		.loc 1 290 44 view .LVU306
 1173 0012 4091 BE00 		lds r20,190
 1174 0016 5091 BF00 		lds r21,190+1
 1175               		.loc 1 290 34 view .LVU307
 1176 001a 822F      		mov r24,r18
 1177 001c 860F      		add r24,r22
 1178 001e 890F      		add r24,r25
 1179               		.loc 1 290 42 view .LVU308
 1180 0020 840F      		add r24,r20
 1181               		.loc 1 290 13 view .LVU309
 1182 0022 8F73      		andi r24,lo8(63)
 1183               	.LVL133:
 291:quantum/send_string.c **** #else
 292:quantum/send_string.c ****     uint8_t key = rand() % 64;
 293:quantum/send_string.c **** #endif
 294:quantum/send_string.c ****     switch (key) {
 1184               		.loc 1 294 5 is_stmt 1 view .LVU310
 1185 0024 8E33      		cpi r24,lo8(62)
 1186 0026 00F4      		brsh .L58
 1187 0028 8533      		cpi r24,lo8(53)
 1188 002a 00F4      		brsh .L59
 1189 002c 8A31      		cpi r24,lo8(26)
 1190 002e 00F0      		brlo .L60
 1191 0030 8433      		cpi r24,lo8(52)
 1192 0032 00F4      		brsh .L65
 295:quantum/send_string.c ****         case 0 ... 25:
 296:quantum/send_string.c ****             send_char(key + 'A');
 297:quantum/send_string.c ****             break;
 298:quantum/send_string.c ****         case 26 ... 51:
 299:quantum/send_string.c ****             send_char(key - 26 + 'a');
 1193               		.loc 1 299 13 view .LVU311
 1194 0034 895B      		subi r24,lo8(-(71))
 1195               	.LVL134:
 1196               		.loc 1 299 13 is_stmt 0 view .LVU312
 1197 0036 00C0      		rjmp .L66
 1198               	.LVL135:
 1199               	.L58:
 294:quantum/send_string.c ****         case 0 ... 25:
 1200               		.loc 1 294 5 view .LVU313
 1201 0038 8E33      		cpi r24,lo8(62)
 1202 003a 01F0      		breq .L63
 1203 003c 8F33      		cpi r24,lo8(63)
 1204 003e 01F0      		breq .L64
 1205               	.L60:
 296:quantum/send_string.c ****             break;
 1206               		.loc 1 296 13 is_stmt 1 view .LVU314
 1207 0040 8F5B      		subi r24,lo8(-(65))
 1208               	.LVL136:
 1209               	.L66:
 300:quantum/send_string.c ****             break;
 301:quantum/send_string.c ****         case 52:
 302:quantum/send_string.c ****             send_char('0');
 303:quantum/send_string.c ****             break;
 304:quantum/send_string.c ****         case 53 ... 61:
 305:quantum/send_string.c ****             send_char(key - 53 + '1');
 306:quantum/send_string.c ****             break;
 307:quantum/send_string.c ****         case 62:
 308:quantum/send_string.c ****             send_char('+');
 309:quantum/send_string.c ****             break;
 310:quantum/send_string.c ****         case 63:
 311:quantum/send_string.c ****             send_char('/');
 1210               		.loc 1 311 13 is_stmt 0 view .LVU315
 1211 0042 0C94 0000 		jmp send_char
 1212               	.LVL137:
 1213               	.L65:
 302:quantum/send_string.c ****             break;
 1214               		.loc 1 302 13 is_stmt 1 view .LVU316
 1215 0046 80E3      		ldi r24,lo8(48)
 1216               	.LVL138:
 302:quantum/send_string.c ****             break;
 1217               		.loc 1 302 13 is_stmt 0 view .LVU317
 1218 0048 00C0      		rjmp .L66
 1219               	.LVL139:
 1220               	.L59:
 305:quantum/send_string.c ****             break;
 1221               		.loc 1 305 13 is_stmt 1 view .LVU318
 1222 004a 8450      		subi r24,lo8(-(-4))
 1223               	.LVL140:
 305:quantum/send_string.c ****             break;
 1224               		.loc 1 305 13 is_stmt 0 view .LVU319
 1225 004c 00C0      		rjmp .L66
 1226               	.LVL141:
 1227               	.L63:
 308:quantum/send_string.c ****             break;
 1228               		.loc 1 308 13 is_stmt 1 view .LVU320
 1229 004e 8BE2      		ldi r24,lo8(43)
 1230               	.LVL142:
 308:quantum/send_string.c ****             break;
 1231               		.loc 1 308 13 is_stmt 0 view .LVU321
 1232 0050 00C0      		rjmp .L66
 1233               	.LVL143:
 1234               	.L64:
 1235               		.loc 1 311 13 is_stmt 1 view .LVU322
 1236 0052 8FE2      		ldi r24,lo8(47)
 1237               	.LVL144:
 1238               		.loc 1 311 13 is_stmt 0 view .LVU323
 1239 0054 00C0      		rjmp .L66
 1240               		.cfi_endproc
 1241               	.LFE35:
 1243               		.weak	ascii_to_keycode_lut
 1244               		.section	.progmem.data.ascii_to_keycode_lut,"a"
 1247               	ascii_to_keycode_lut:
 1248 0000 00        		.byte	0
 1249 0001 00        		.byte	0
 1250 0002 00        		.byte	0
 1251 0003 00        		.byte	0
 1252 0004 00        		.byte	0
 1253 0005 00        		.byte	0
 1254 0006 00        		.byte	0
 1255 0007 00        		.byte	0
 1256 0008 2A        		.byte	42
 1257 0009 2B        		.byte	43
 1258 000a 28        		.byte	40
 1259 000b 00        		.byte	0
 1260 000c 00        		.byte	0
 1261 000d 00        		.byte	0
 1262 000e 00        		.byte	0
 1263 000f 00        		.byte	0
 1264 0010 00        		.byte	0
 1265 0011 00        		.byte	0
 1266 0012 00        		.byte	0
 1267 0013 00        		.byte	0
 1268 0014 00        		.byte	0
 1269 0015 00        		.byte	0
 1270 0016 00        		.byte	0
 1271 0017 00        		.byte	0
 1272 0018 00        		.byte	0
 1273 0019 00        		.byte	0
 1274 001a 00        		.byte	0
 1275 001b 29        		.byte	41
 1276 001c 00        		.byte	0
 1277 001d 00        		.byte	0
 1278 001e 00        		.byte	0
 1279 001f 00        		.byte	0
 1280 0020 2C        		.byte	44
 1281 0021 1E        		.byte	30
 1282 0022 34        		.byte	52
 1283 0023 20        		.byte	32
 1284 0024 21        		.byte	33
 1285 0025 22        		.byte	34
 1286 0026 24        		.byte	36
 1287 0027 34        		.byte	52
 1288 0028 26        		.byte	38
 1289 0029 27        		.byte	39
 1290 002a 25        		.byte	37
 1291 002b 2E        		.byte	46
 1292 002c 36        		.byte	54
 1293 002d 2D        		.byte	45
 1294 002e 37        		.byte	55
 1295 002f 38        		.byte	56
 1296 0030 27        		.byte	39
 1297 0031 1E        		.byte	30
 1298 0032 1F        		.byte	31
 1299 0033 20        		.byte	32
 1300 0034 21        		.byte	33
 1301 0035 22        		.byte	34
 1302 0036 23        		.byte	35
 1303 0037 24        		.byte	36
 1304 0038 25        		.byte	37
 1305 0039 26        		.byte	38
 1306 003a 33        		.byte	51
 1307 003b 33        		.byte	51
 1308 003c 36        		.byte	54
 1309 003d 2E        		.byte	46
 1310 003e 37        		.byte	55
 1311 003f 38        		.byte	56
 1312 0040 1F        		.byte	31
 1313 0041 04        		.byte	4
 1314 0042 05        		.byte	5
 1315 0043 06        		.byte	6
 1316 0044 07        		.byte	7
 1317 0045 08        		.byte	8
 1318 0046 09        		.byte	9
 1319 0047 0A        		.byte	10
 1320 0048 0B        		.byte	11
 1321 0049 0C        		.byte	12
 1322 004a 0D        		.byte	13
 1323 004b 0E        		.byte	14
 1324 004c 0F        		.byte	15
 1325 004d 10        		.byte	16
 1326 004e 11        		.byte	17
 1327 004f 12        		.byte	18
 1328 0050 13        		.byte	19
 1329 0051 14        		.byte	20
 1330 0052 15        		.byte	21
 1331 0053 16        		.byte	22
 1332 0054 17        		.byte	23
 1333 0055 18        		.byte	24
 1334 0056 19        		.byte	25
 1335 0057 1A        		.byte	26
 1336 0058 1B        		.byte	27
 1337 0059 1C        		.byte	28
 1338 005a 1D        		.byte	29
 1339 005b 2F        		.byte	47
 1340 005c 31        		.byte	49
 1341 005d 30        		.byte	48
 1342 005e 23        		.byte	35
 1343 005f 2D        		.byte	45
 1344 0060 35        		.byte	53
 1345 0061 04        		.byte	4
 1346 0062 05        		.byte	5
 1347 0063 06        		.byte	6
 1348 0064 07        		.byte	7
 1349 0065 08        		.byte	8
 1350 0066 09        		.byte	9
 1351 0067 0A        		.byte	10
 1352 0068 0B        		.byte	11
 1353 0069 0C        		.byte	12
 1354 006a 0D        		.byte	13
 1355 006b 0E        		.byte	14
 1356 006c 0F        		.byte	15
 1357 006d 10        		.byte	16
 1358 006e 11        		.byte	17
 1359 006f 12        		.byte	18
 1360 0070 13        		.byte	19
 1361 0071 14        		.byte	20
 1362 0072 15        		.byte	21
 1363 0073 16        		.byte	22
 1364 0074 17        		.byte	23
 1365 0075 18        		.byte	24
 1366 0076 19        		.byte	25
 1367 0077 1A        		.byte	26
 1368 0078 1B        		.byte	27
 1369 0079 1C        		.byte	28
 1370 007a 1D        		.byte	29
 1371 007b 2F        		.byte	47
 1372 007c 31        		.byte	49
 1373 007d 30        		.byte	48
 1374 007e 35        		.byte	53
 1375 007f 4C        		.byte	76
 1376               		.weak	ascii_to_dead_lut
 1377               		.section	.progmem.data.ascii_to_dead_lut,"a"
 1380               	ascii_to_dead_lut:
 1381 0000 0000 0000 		.zero	16
 1381      0000 0000 
 1381      0000 0000 
 1381      0000 0000 
 1382               		.weak	ascii_to_altgr_lut
 1383               		.section	.progmem.data.ascii_to_altgr_lut,"a"
 1386               	ascii_to_altgr_lut:
 1387 0000 0000 0000 		.zero	16
 1387      0000 0000 
 1387      0000 0000 
 1387      0000 0000 
 1388               		.weak	ascii_to_shift_lut
 1389               		.section	.progmem.data.ascii_to_shift_lut,"a"
 1392               	ascii_to_shift_lut:
 1393 0000 00        		.byte	0
 1394 0001 00        		.byte	0
 1395 0002 00        		.byte	0
 1396 0003 00        		.byte	0
 1397 0004 7E        		.byte	126
 1398 0005 0F        		.byte	15
 1399 0006 00        		.byte	0
 1400 0007 D4        		.byte	-44
 1401 0008 FF        		.byte	-1
 1402 0009 FF        		.byte	-1
 1403 000a FF        		.byte	-1
 1404 000b C7        		.byte	-57
 1405 000c 00        		.byte	0
 1406 000d 00        		.byte	0
 1407 000e 00        		.byte	0
 1408 000f 78        		.byte	120
 1409               		.text
 1410               	.Letext0:
 1411               		.file 3 "/usr/avr/include/stdint.h"
 1412               		.file 4 "/usr/lib/gcc/avr/8.3.0/include/stddef.h"
 1413               		.file 5 "quantum/keyboard.h"
 1414               		.file 6 "quantum/action.h"
 1415               		.file 7 "tmk_core/common/report.h"
 1416               		.file 8 "tmk_core/common/host.h"
 1417               		.file 9 "quantum/logging/debug.h"
 1418               		.file 10 "quantum/keycode_config.h"
 1419               		.file 11 "tmk_core/common/timer.h"
 1420               		.file 12 "quantum/sequencer/sequencer.h"
 1421               		.file 13 "quantum/keycode.h"
 1422               		.file 14 "quantum/keymap.h"
 1423               		.file 15 "quantum/action_layer.h"
 1424               		.file 16 "quantum/action_util.h"
 1425               		.file 17 "quantum/send_string.h"
 1426               		.file 18 "/usr/avr/include/stdlib.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 send_string.c
     /tmp/ccsNOrjm.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccsNOrjm.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccsNOrjm.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccsNOrjm.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccsNOrjm.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccsNOrjm.s:13     .text.send_char:0000000000000000 send_char
     /tmp/ccsNOrjm.s:1247   .progmem.data.ascii_to_keycode_lut:0000000000000000 ascii_to_keycode_lut
     /tmp/ccsNOrjm.s:1392   .progmem.data.ascii_to_shift_lut:0000000000000000 ascii_to_shift_lut
     /tmp/ccsNOrjm.s:1386   .progmem.data.ascii_to_altgr_lut:0000000000000000 ascii_to_altgr_lut
     /tmp/ccsNOrjm.s:1380   .progmem.data.ascii_to_dead_lut:0000000000000000 ascii_to_dead_lut
     /tmp/ccsNOrjm.s:276    .text.send_string_with_delay:0000000000000000 send_string_with_delay
     /tmp/ccsNOrjm.s:580    .text.send_string:0000000000000000 send_string
     /tmp/ccsNOrjm.s:600    .text.send_string_with_delay_P:0000000000000000 send_string_with_delay_P
     /tmp/ccsNOrjm.s:981    .text.send_string_P:0000000000000000 send_string_P
     /tmp/ccsNOrjm.s:1001   .text.send_nibble:0000000000000000 send_nibble
     /tmp/ccsNOrjm.s:1035   .text.send_byte:0000000000000000 send_byte
     /tmp/ccsNOrjm.s:1073   .text.send_word:0000000000000000 send_word
     /tmp/ccsNOrjm.s:1108   .text.send_dword:0000000000000000 send_dword
     /tmp/ccsNOrjm.s:1155   .text.tap_random_base64:0000000000000000 tap_random_base64

UNDEFINED SYMBOLS
register_code
tap_code
unregister_code
