   1               		.file	"matrix_common.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.matrix_init_user,"ax",@progbits
  11               		.weak	matrix_init_user
  13               	matrix_init_user:
  14               	.LFB28:
  15               		.file 1 "quantum/matrix_common.c"
   1:quantum/matrix_common.c **** #include "quantum.h"
   2:quantum/matrix_common.c **** #include "matrix.h"
   3:quantum/matrix_common.c **** #include "debounce.h"
   4:quantum/matrix_common.c **** #include "wait.h"
   5:quantum/matrix_common.c **** #include "print.h"
   6:quantum/matrix_common.c **** #include "debug.h"
   7:quantum/matrix_common.c **** 
   8:quantum/matrix_common.c **** #ifndef MATRIX_IO_DELAY
   9:quantum/matrix_common.c **** #    define MATRIX_IO_DELAY 30
  10:quantum/matrix_common.c **** #endif
  11:quantum/matrix_common.c **** 
  12:quantum/matrix_common.c **** /* matrix state(1:on, 0:off) */
  13:quantum/matrix_common.c **** matrix_row_t raw_matrix[MATRIX_ROWS];
  14:quantum/matrix_common.c **** matrix_row_t matrix[MATRIX_ROWS];
  15:quantum/matrix_common.c **** 
  16:quantum/matrix_common.c **** #ifdef MATRIX_MASKED
  17:quantum/matrix_common.c **** extern const matrix_row_t matrix_mask[];
  18:quantum/matrix_common.c **** #endif
  19:quantum/matrix_common.c **** 
  20:quantum/matrix_common.c **** // user-defined overridable functions
  21:quantum/matrix_common.c **** 
  22:quantum/matrix_common.c **** __attribute__((weak)) void matrix_init_kb(void) { matrix_init_user(); }
  23:quantum/matrix_common.c **** 
  24:quantum/matrix_common.c **** __attribute__((weak)) void matrix_scan_kb(void) { matrix_scan_user(); }
  25:quantum/matrix_common.c **** 
  26:quantum/matrix_common.c **** __attribute__((weak)) void matrix_init_user(void) {}
  16               		.loc 1 26 51 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               		.loc 1 26 52 view .LVU1
  23               	/* epilogue start */
  24               		.loc 1 26 1 is_stmt 0 view .LVU2
  25 0000 0895      		ret
  26               		.cfi_endproc
  27               	.LFE28:
  29               		.set	matrix_init_user.localalias.0,matrix_init_user
  30               		.section	.text.matrix_init_kb,"ax",@progbits
  31               		.weak	matrix_init_kb
  33               	matrix_init_kb:
  34               	.LFB26:
  22:quantum/matrix_common.c **** 
  35               		.loc 1 22 49 is_stmt 1 view -0
  36               		.cfi_startproc
  37               	/* prologue: function */
  38               	/* frame size = 0 */
  39               	/* stack size = 0 */
  40               	.L__stack_usage = 0
  22:quantum/matrix_common.c **** 
  41               		.loc 1 22 51 view .LVU4
  42 0000 0C94 0000 		jmp matrix_init_user
  43               	.LVL0:
  44               		.cfi_endproc
  45               	.LFE26:
  47               		.section	.text.matrix_scan_user,"ax",@progbits
  48               		.weak	matrix_scan_user
  50               	matrix_scan_user:
  51               	.LFB46:
  52               		.cfi_startproc
  53               	/* prologue: function */
  54               	/* frame size = 0 */
  55               	/* stack size = 0 */
  56               	.L__stack_usage = 0
  57               	/* epilogue start */
  58 0000 0895      		ret
  59               		.cfi_endproc
  60               	.LFE46:
  62               		.section	.text.matrix_scan_kb,"ax",@progbits
  63               		.weak	matrix_scan_kb
  65               	matrix_scan_kb:
  66               	.LFB27:
  24:quantum/matrix_common.c **** 
  67               		.loc 1 24 49 view -0
  68               		.cfi_startproc
  69               	/* prologue: function */
  70               	/* frame size = 0 */
  71               	/* stack size = 0 */
  72               	.L__stack_usage = 0
  24:quantum/matrix_common.c **** 
  73               		.loc 1 24 51 view .LVU6
  74 0000 0C94 0000 		jmp matrix_scan_user
  75               	.LVL1:
  76               		.cfi_endproc
  77               	.LFE27:
  79               		.section	.text.matrix_rows,"ax",@progbits
  80               	.global	matrix_rows
  82               	matrix_rows:
  83               	.LFB30:
  27:quantum/matrix_common.c **** 
  28:quantum/matrix_common.c **** __attribute__((weak)) void matrix_scan_user(void) {}
  29:quantum/matrix_common.c **** 
  30:quantum/matrix_common.c **** // helper functions
  31:quantum/matrix_common.c **** 
  32:quantum/matrix_common.c **** inline uint8_t matrix_rows(void) { return MATRIX_ROWS; }
  84               		.loc 1 32 34 view -0
  85               		.cfi_startproc
  86               	/* prologue: function */
  87               	/* frame size = 0 */
  88               	/* stack size = 0 */
  89               	.L__stack_usage = 0
  90               		.loc 1 32 36 view .LVU8
  91               		.loc 1 32 1 is_stmt 0 view .LVU9
  92 0000 8AE0      		ldi r24,lo8(10)
  93               	/* epilogue start */
  94 0002 0895      		ret
  95               		.cfi_endproc
  96               	.LFE30:
  98               		.section	.text.matrix_cols,"ax",@progbits
  99               	.global	matrix_cols
 101               	matrix_cols:
 102               	.LFB31:
  33:quantum/matrix_common.c **** 
  34:quantum/matrix_common.c **** inline uint8_t matrix_cols(void) { return MATRIX_COLS; }
 103               		.loc 1 34 34 is_stmt 1 view -0
 104               		.cfi_startproc
 105               	/* prologue: function */
 106               	/* frame size = 0 */
 107               	/* stack size = 0 */
 108               	.L__stack_usage = 0
 109               		.loc 1 34 36 view .LVU11
 110               		.loc 1 34 1 is_stmt 0 view .LVU12
 111 0000 86E0      		ldi r24,lo8(6)
 112               	/* epilogue start */
 113 0002 0895      		ret
 114               		.cfi_endproc
 115               	.LFE31:
 117               		.section	.text.matrix_is_on,"ax",@progbits
 118               	.global	matrix_is_on
 120               	matrix_is_on:
 121               	.LVL2:
 122               	.LFB32:
  35:quantum/matrix_common.c **** 
  36:quantum/matrix_common.c **** inline bool matrix_is_on(uint8_t row, uint8_t col) { return (matrix[row] & ((matrix_row_t)1 << col)
 123               		.loc 1 36 52 is_stmt 1 view -0
 124               		.cfi_startproc
 125               	/* prologue: function */
 126               	/* frame size = 0 */
 127               	/* stack size = 0 */
 128               	.L__stack_usage = 0
 129               		.loc 1 36 54 view .LVU14
 130               		.loc 1 36 68 is_stmt 0 view .LVU15
 131 0000 E82F      		mov r30,r24
 132 0002 F0E0      		ldi r31,0
 133 0004 E050      		subi r30,lo8(-(matrix))
 134 0006 F040      		sbci r31,hi8(-(matrix))
 135 0008 2081      		ld r18,Z
 136 000a 30E0      		ldi r19,0
 137               		.loc 1 36 93 view .LVU16
 138 000c 81E0      		ldi r24,lo8(1)
 139 000e 90E0      		ldi r25,0
 140               	.LVL3:
 141               		.loc 1 36 93 view .LVU17
 142 0010 00C0      		rjmp 2f
 143               		1:
 144 0012 880F      		lsl r24
 145 0014 991F      		rol r25
 146               		2:
 147 0016 6A95      		dec r22
 148 0018 02F4      		brpl 1b
 149               		.loc 1 36 74 view .LVU18
 150 001a 2823      		and r18,r24
 151 001c 3923      		and r19,r25
 152 001e 81E0      		ldi r24,lo8(1)
 153 0020 232B      		or r18,r19
 154 0022 01F4      		brne .L8
 155 0024 80E0      		ldi r24,0
 156               	.L8:
 157               	/* epilogue start */
 158               		.loc 1 36 1 view .LVU19
 159 0026 0895      		ret
 160               		.cfi_endproc
 161               	.LFE32:
 163               		.section	.text.matrix_get_row,"ax",@progbits
 164               	.global	matrix_get_row
 166               	matrix_get_row:
 167               	.LVL4:
 168               	.LFB33:
  37:quantum/matrix_common.c **** 
  38:quantum/matrix_common.c **** inline matrix_row_t matrix_get_row(uint8_t row) {
 169               		.loc 1 38 49 is_stmt 1 view -0
 170               		.cfi_startproc
 171               	/* prologue: function */
 172               	/* frame size = 0 */
 173               	/* stack size = 0 */
 174               	.L__stack_usage = 0
  39:quantum/matrix_common.c ****     // Matrix mask lets you disable switches in the returned matrix data. For example, if you have 
  40:quantum/matrix_common.c ****     // switch blocker installed and the switch is always pressed.
  41:quantum/matrix_common.c **** #ifdef MATRIX_MASKED
  42:quantum/matrix_common.c ****     return matrix[row] & matrix_mask[row];
  43:quantum/matrix_common.c **** #else
  44:quantum/matrix_common.c ****     return matrix[row];
 175               		.loc 1 44 5 view .LVU21
 176               		.loc 1 44 18 is_stmt 0 view .LVU22
 177 0000 E82F      		mov r30,r24
 178 0002 F0E0      		ldi r31,0
 179 0004 E050      		subi r30,lo8(-(matrix))
 180 0006 F040      		sbci r31,hi8(-(matrix))
  45:quantum/matrix_common.c **** #endif
  46:quantum/matrix_common.c **** }
 181               		.loc 1 46 1 view .LVU23
 182 0008 8081      		ld r24,Z
 183               	.LVL5:
 184               	/* epilogue start */
 185               		.loc 1 46 1 view .LVU24
 186 000a 0895      		ret
 187               		.cfi_endproc
 188               	.LFE33:
 190               		.section	.text.matrix_is_modified,"ax",@progbits
 191               	.global	matrix_is_modified
 193               	matrix_is_modified:
 194               	.LFB34:
  47:quantum/matrix_common.c **** 
  48:quantum/matrix_common.c **** // Deprecated.
  49:quantum/matrix_common.c **** bool matrix_is_modified(void) {
 195               		.loc 1 49 31 is_stmt 1 view -0
 196               		.cfi_startproc
 197               	/* prologue: function */
 198               	/* frame size = 0 */
 199               	/* stack size = 0 */
 200               	.L__stack_usage = 0
  50:quantum/matrix_common.c ****     if (debounce_active()) return false;
 201               		.loc 1 50 5 view .LVU26
 202               		.loc 1 50 9 is_stmt 0 view .LVU27
 203 0000 0E94 0000 		call debounce_active
 204               	.LVL6:
  51:quantum/matrix_common.c ****     return true;
  52:quantum/matrix_common.c **** }
 205               		.loc 1 52 1 view .LVU28
 206 0004 91E0      		ldi r25,lo8(1)
 207 0006 8927      		eor r24,r25
 208               	/* epilogue start */
 209 0008 0895      		ret
 210               		.cfi_endproc
 211               	.LFE34:
 213               		.section	.text.matrix_print,"ax",@progbits
 214               	.global	matrix_print
 216               	matrix_print:
 217               	.LFB35:
  53:quantum/matrix_common.c **** 
  54:quantum/matrix_common.c **** #if (MATRIX_COLS <= 8)
  55:quantum/matrix_common.c **** #    define print_matrix_header() print("\nr/c 01234567\n")
  56:quantum/matrix_common.c **** #    define print_matrix_row(row) print_bin_reverse8(matrix_get_row(row))
  57:quantum/matrix_common.c **** #    define matrix_bitpop(row) bitpop(matrix_get_row(row))
  58:quantum/matrix_common.c **** #elif (MATRIX_COLS <= 16)
  59:quantum/matrix_common.c **** #    define print_matrix_header() print("\nr/c 0123456789ABCDEF\n")
  60:quantum/matrix_common.c **** #    define print_matrix_row(row) print_bin_reverse16(matrix_get_row(row))
  61:quantum/matrix_common.c **** #    define matrix_bitpop(row) bitpop16(matrix_get_row(row))
  62:quantum/matrix_common.c **** #elif (MATRIX_COLS <= 32)
  63:quantum/matrix_common.c **** #    define print_matrix_header() print("\nr/c 0123456789ABCDEF0123456789ABCDEF\n")
  64:quantum/matrix_common.c **** #    define print_matrix_row(row) print_bin_reverse32(matrix_get_row(row))
  65:quantum/matrix_common.c **** #    define matrix_bitpop(row) bitpop32(matrix_get_row(row))
  66:quantum/matrix_common.c **** #endif
  67:quantum/matrix_common.c **** 
  68:quantum/matrix_common.c **** void matrix_print(void) {
 218               		.loc 1 68 25 is_stmt 1 view -0
 219               		.cfi_startproc
 220               	/* prologue: function */
 221               	/* frame size = 0 */
 222               	/* stack size = 0 */
 223               	.L__stack_usage = 0
  69:quantum/matrix_common.c ****     print_matrix_header();
 224               		.loc 1 69 26 view .LVU30
  70:quantum/matrix_common.c **** 
  71:quantum/matrix_common.c ****     for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 225               		.loc 1 71 5 view .LVU31
 226               		.loc 1 71 10 view .LVU32
 227               	.LVL7:
 228               	/* epilogue start */
  72:quantum/matrix_common.c ****         print_hex8(row);
  73:quantum/matrix_common.c ****         print(": ");
  74:quantum/matrix_common.c ****         print_matrix_row(row);
  75:quantum/matrix_common.c ****         print("\n");
  76:quantum/matrix_common.c ****     }
  77:quantum/matrix_common.c **** }
 229               		.loc 1 77 1 is_stmt 0 view .LVU33
 230 0000 0895      		ret
 231               		.cfi_endproc
 232               	.LFE35:
 234               		.section	.text.matrix_key_count,"ax",@progbits
 235               	.global	matrix_key_count
 237               	matrix_key_count:
 238               	.LFB36:
  78:quantum/matrix_common.c **** 
  79:quantum/matrix_common.c **** uint8_t matrix_key_count(void) {
 239               		.loc 1 79 32 is_stmt 1 view -0
 240               		.cfi_startproc
 241 0000 0F93      		push r16
 242               	.LCFI0:
 243               		.cfi_def_cfa_offset 3
 244               		.cfi_offset 16, -2
 245 0002 1F93      		push r17
 246               	.LCFI1:
 247               		.cfi_def_cfa_offset 4
 248               		.cfi_offset 17, -3
 249 0004 CF93      		push r28
 250               	.LCFI2:
 251               		.cfi_def_cfa_offset 5
 252               		.cfi_offset 28, -4
 253               	/* prologue: function */
 254               	/* frame size = 0 */
 255               	/* stack size = 3 */
 256               	.L__stack_usage = 3
  80:quantum/matrix_common.c ****     uint8_t count = 0;
 257               		.loc 1 80 5 view .LVU35
 258               	.LVL8:
  81:quantum/matrix_common.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 259               		.loc 1 81 5 view .LVU36
 260               	.LBB7:
 261               		.loc 1 81 10 view .LVU37
 262               		.loc 1 81 10 is_stmt 0 view .LVU38
 263 0006 00E0      		ldi r16,lo8(matrix)
 264 0008 10E0      		ldi r17,hi8(matrix)
 265               	.LBE7:
  80:quantum/matrix_common.c ****     uint8_t count = 0;
 266               		.loc 1 80 13 view .LVU39
 267 000a C0E0      		ldi r28,0
 268               	.LVL9:
 269               	.L13:
 270               	.LBB10:
  82:quantum/matrix_common.c ****         count += matrix_bitpop(i);
 271               		.loc 1 82 9 is_stmt 1 view .LVU40
 272               	.LBB8:
 273               	.LBI8:
  38:quantum/matrix_common.c ****     // Matrix mask lets you disable switches in the returned matrix data. For example, if you have 
 274               		.loc 1 38 21 view .LVU41
 275               	.LBB9:
  44:quantum/matrix_common.c **** #endif
 276               		.loc 1 44 5 view .LVU42
  44:quantum/matrix_common.c **** #endif
 277               		.loc 1 44 5 is_stmt 0 view .LVU43
 278               	.LBE9:
 279               	.LBE8:
 280               		.loc 1 82 18 view .LVU44
 281 000c F801      		movw r30,r16
 282 000e 8191      		ld r24,Z+
 283 0010 8F01      		movw r16,r30
 284               	.LVL10:
 285               		.loc 1 82 18 view .LVU45
 286 0012 0E94 0000 		call bitpop
 287               	.LVL11:
 288               		.loc 1 82 15 view .LVU46
 289 0016 C80F      		add r28,r24
 290               	.LVL12:
  81:quantum/matrix_common.c ****         count += matrix_bitpop(i);
 291               		.loc 1 81 5 view .LVU47
 292 0018 F0E0      		ldi r31,hi8(matrix+10)
 293 001a 0030      		cpi r16,lo8(matrix+10)
 294 001c 1F07      		cpc r17,r31
 295 001e 01F4      		brne .L13
 296               	.LBE10:
  83:quantum/matrix_common.c ****     }
  84:quantum/matrix_common.c ****     return count;
 297               		.loc 1 84 5 is_stmt 1 view .LVU48
  85:quantum/matrix_common.c **** }
 298               		.loc 1 85 1 is_stmt 0 view .LVU49
 299 0020 8C2F      		mov r24,r28
 300               	/* epilogue start */
 301 0022 CF91      		pop r28
 302               	.LVL13:
 303               		.loc 1 85 1 view .LVU50
 304 0024 1F91      		pop r17
 305 0026 0F91      		pop r16
 306               	.LVL14:
 307               		.loc 1 85 1 view .LVU51
 308 0028 0895      		ret
 309               		.cfi_endproc
 310               	.LFE36:
 312               		.section	.text.matrix_io_delay,"ax",@progbits
 313               		.weak	matrix_io_delay
 315               	matrix_io_delay:
 316               	.LFB37:
  86:quantum/matrix_common.c **** 
  87:quantum/matrix_common.c **** /*　`matrix_io_delay ()` exists for backwards compatibility. From now on, use matrix_output_unsele
  88:quantum/matrix_common.c **** __attribute__((weak)) void matrix_io_delay(void) { wait_us(MATRIX_IO_DELAY); }
 317               		.loc 1 88 50 is_stmt 1 view -0
 318               		.cfi_startproc
 319               	/* prologue: function */
 320               	/* frame size = 0 */
 321               	/* stack size = 0 */
 322               	.L__stack_usage = 0
 323               		.loc 1 88 52 view .LVU53
 324               		.loc 1 88 52 view .LVU54
 325               		.loc 1 88 52 view .LVU55
 326               	.LVL15:
 327               	.LBB11:
 328               	.LBI11:
 329               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/avr/include/util/delay.h **** 
 189:/usr/avr/include/util/delay.h **** #else
 190:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/avr/include/util/delay.h **** 	{
 196:/usr/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/avr/include/util/delay.h **** 		{
 200:/usr/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/avr/include/util/delay.h **** 		}
 204:/usr/avr/include/util/delay.h **** 		return;
 205:/usr/avr/include/util/delay.h **** 	}
 206:/usr/avr/include/util/delay.h **** 	else
 207:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/avr/include/util/delay.h **** #endif
 210:/usr/avr/include/util/delay.h **** }
 211:/usr/avr/include/util/delay.h **** 
 212:/usr/avr/include/util/delay.h **** /**
 213:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/avr/include/util/delay.h **** 
 215:/usr/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/avr/include/util/delay.h **** 
 217:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/avr/include/util/delay.h **** 
 220:/usr/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/avr/include/util/delay.h **** 
 222:/usr/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/avr/include/util/delay.h **** 
 226:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/avr/include/util/delay.h **** 
 231:/usr/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/avr/include/util/delay.h **** 
 236:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/avr/include/util/delay.h ****    respectively.
 240:/usr/avr/include/util/delay.h **** 
 241:/usr/avr/include/util/delay.h ****    \note
 242:/usr/avr/include/util/delay.h **** 
 243:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/avr/include/util/delay.h **** 
 253:/usr/avr/include/util/delay.h ****  */
 254:/usr/avr/include/util/delay.h **** void
 255:/usr/avr/include/util/delay.h **** _delay_us(double __us)
 330               		.loc 2 255 1 view .LVU56
 331               	.LBB12:
 256:/usr/avr/include/util/delay.h **** {
 257:/usr/avr/include/util/delay.h **** 	double __tmp ;
 332               		.loc 2 257 2 view .LVU57
 258:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 333               		.loc 2 261 2 view .LVU58
 262:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 334               		.loc 2 262 2 view .LVU59
 263:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 335               		.loc 2 263 2 view .LVU60
 264:/usr/avr/include/util/delay.h **** 
 265:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/avr/include/util/delay.h **** 
 268:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/avr/include/util/delay.h **** 
 271:/usr/avr/include/util/delay.h **** 	#else
 272:/usr/avr/include/util/delay.h **** 		//round up by default
 273:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 336               		.loc 2 273 3 view .LVU61
 274:/usr/avr/include/util/delay.h **** 	#endif
 275:/usr/avr/include/util/delay.h **** 
 276:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 337               		.loc 2 276 2 view .LVU62
 338 0000 80EA      		ldi r24,lo8(-96)
 339 0002 8A95      	1:	dec r24
 340 0004 01F4      		brne 1b
 341               	.LVL16:
 342               	/* epilogue start */
 343               		.loc 2 276 2 is_stmt 0 view .LVU63
 344               	.LBE12:
 345               	.LBE11:
 346               		.loc 1 88 1 view .LVU64
 347 0006 0895      		ret
 348               		.cfi_endproc
 349               	.LFE37:
 351               		.section	.text.matrix_output_select_delay,"ax",@progbits
 352               		.weak	matrix_output_select_delay
 354               	matrix_output_select_delay:
 355               	.LFB38:
  89:quantum/matrix_common.c **** 
  90:quantum/matrix_common.c **** __attribute__((weak)) void matrix_output_select_delay(void) { waitInputPinDelay(); }
 356               		.loc 1 90 61 is_stmt 1 view -0
 357               		.cfi_startproc
 358               	/* prologue: function */
 359               	/* frame size = 0 */
 360               	/* stack size = 0 */
 361               	.L__stack_usage = 0
 362               		.loc 1 90 63 view .LVU66
 363 0000 00C0      		rjmp .
 364               	/* epilogue start */
 365               		.loc 1 90 1 is_stmt 0 view .LVU67
 366 0002 0895      		ret
 367               		.cfi_endproc
 368               	.LFE38:
 370               		.section	.text.matrix_output_unselect_delay,"ax",@progbits
 371               		.weak	matrix_output_unselect_delay
 373               	matrix_output_unselect_delay:
 374               	.LVL17:
 375               	.LFB39:
  91:quantum/matrix_common.c **** __attribute__((weak)) void matrix_output_unselect_delay(uint8_t line, bool key_pressed) { matrix_io
 376               		.loc 1 91 89 is_stmt 1 view -0
 377               		.cfi_startproc
 378               	/* prologue: function */
 379               	/* frame size = 0 */
 380               	/* stack size = 0 */
 381               	.L__stack_usage = 0
 382               		.loc 1 91 91 view .LVU69
 383 0000 0C94 0000 		jmp matrix_io_delay
 384               	.LVL18:
 385               		.loc 1 91 91 is_stmt 0 view .LVU70
 386               		.cfi_endproc
 387               	.LFE39:
 389               		.section	.text.matrix_init_custom,"ax",@progbits
 390               		.weak	matrix_init_custom
 392               	matrix_init_custom:
 393               	.LFB48:
 394               		.cfi_startproc
 395               	/* prologue: function */
 396               	/* frame size = 0 */
 397               	/* stack size = 0 */
 398               	.L__stack_usage = 0
 399               	/* epilogue start */
 400 0000 0895      		ret
 401               		.cfi_endproc
 402               	.LFE48:
 404               		.section	.text.matrix_scan_custom,"ax",@progbits
 405               		.weak	matrix_scan_custom
 407               	matrix_scan_custom:
 408               	.LVL19:
 409               	.LFB41:
  92:quantum/matrix_common.c **** 
  93:quantum/matrix_common.c **** // CUSTOM MATRIX 'LITE'
  94:quantum/matrix_common.c **** __attribute__((weak)) void matrix_init_custom(void) {}
  95:quantum/matrix_common.c **** 
  96:quantum/matrix_common.c **** __attribute__((weak)) bool matrix_scan_custom(matrix_row_t current_matrix[]) { return true; }
 410               		.loc 1 96 78 is_stmt 1 view -0
 411               		.cfi_startproc
 412               	/* prologue: function */
 413               	/* frame size = 0 */
 414               	/* stack size = 0 */
 415               	.L__stack_usage = 0
 416               		.loc 1 96 80 view .LVU72
 417               		.loc 1 96 1 is_stmt 0 view .LVU73
 418 0000 81E0      		ldi r24,lo8(1)
 419               	.LVL20:
 420               	/* epilogue start */
 421               		.loc 1 96 1 view .LVU74
 422 0002 0895      		ret
 423               		.cfi_endproc
 424               	.LFE41:
 426               		.section	.text.matrix_init,"ax",@progbits
 427               		.weak	matrix_init
 429               	matrix_init:
 430               	.LFB42:
  97:quantum/matrix_common.c **** 
  98:quantum/matrix_common.c **** __attribute__((weak)) void matrix_init(void) {
 431               		.loc 1 98 46 is_stmt 1 view -0
 432               		.cfi_startproc
 433               	/* prologue: function */
 434               	/* frame size = 0 */
 435               	/* stack size = 0 */
 436               	.L__stack_usage = 0
  99:quantum/matrix_common.c ****     matrix_init_custom();
 437               		.loc 1 99 5 view .LVU76
 438 0000 0E94 0000 		call matrix_init_custom
 439               	.LVL21:
 100:quantum/matrix_common.c **** 
 101:quantum/matrix_common.c ****     // initialize matrix state: all keys off
 102:quantum/matrix_common.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 440               		.loc 1 102 5 view .LVU77
 441               	.LBB13:
 442               		.loc 1 102 10 view .LVU78
 443               		.loc 1 102 10 is_stmt 0 view .LVU79
 444 0004 E0E0      		ldi r30,lo8(raw_matrix)
 445 0006 F0E0      		ldi r31,hi8(raw_matrix)
 446 0008 A0E0      		ldi r26,lo8(matrix)
 447 000a B0E0      		ldi r27,hi8(matrix)
 448               	.LVL22:
 449               	.L21:
 103:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 450               		.loc 1 103 9 is_stmt 1 discriminator 3 view .LVU80
 451               		.loc 1 103 23 is_stmt 0 discriminator 3 view .LVU81
 452 000c 1192      		st Z+,__zero_reg__
 453               	.LVL23:
 104:quantum/matrix_common.c ****         matrix[i]     = 0;
 454               		.loc 1 104 9 is_stmt 1 discriminator 3 view .LVU82
 455               		.loc 1 104 23 is_stmt 0 discriminator 3 view .LVU83
 456 000e 1D92      		st X+,__zero_reg__
 457               	.LVL24:
 102:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 458               		.loc 1 102 5 discriminator 3 view .LVU84
 459 0010 80E0      		ldi r24,hi8(raw_matrix+10)
 460 0012 E030      		cpi r30,lo8(raw_matrix+10)
 461 0014 F807      		cpc r31,r24
 462 0016 01F4      		brne .L21
 463               	.LBE13:
 105:quantum/matrix_common.c ****     }
 106:quantum/matrix_common.c **** 
 107:quantum/matrix_common.c ****     debounce_init(MATRIX_ROWS);
 464               		.loc 1 107 5 is_stmt 1 view .LVU85
 465 0018 8AE0      		ldi r24,lo8(10)
 466 001a 0E94 0000 		call debounce_init
 467               	.LVL25:
 108:quantum/matrix_common.c **** 
 109:quantum/matrix_common.c ****     matrix_init_quantum();
 468               		.loc 1 109 5 view .LVU86
 469 001e 0C94 0000 		jmp matrix_init_quantum
 470               	.LVL26:
 471               		.cfi_endproc
 472               	.LFE42:
 474               		.section	.text.matrix_scan,"ax",@progbits
 475               		.weak	matrix_scan
 477               	matrix_scan:
 478               	.LFB43:
 110:quantum/matrix_common.c **** }
 111:quantum/matrix_common.c **** 
 112:quantum/matrix_common.c **** __attribute__((weak)) uint8_t matrix_scan(void) {
 479               		.loc 1 112 49 view -0
 480               		.cfi_startproc
 481 0000 CF93      		push r28
 482               	.LCFI3:
 483               		.cfi_def_cfa_offset 3
 484               		.cfi_offset 28, -2
 485               	/* prologue: function */
 486               	/* frame size = 0 */
 487               	/* stack size = 1 */
 488               	.L__stack_usage = 1
 113:quantum/matrix_common.c ****     bool changed = matrix_scan_custom(raw_matrix);
 489               		.loc 1 113 5 view .LVU88
 490               		.loc 1 113 20 is_stmt 0 view .LVU89
 491 0002 80E0      		ldi r24,lo8(raw_matrix)
 492 0004 90E0      		ldi r25,hi8(raw_matrix)
 493 0006 0E94 0000 		call matrix_scan_custom
 494               	.LVL27:
 495 000a C82F      		mov r28,r24
 496               	.LVL28:
 114:quantum/matrix_common.c **** 
 115:quantum/matrix_common.c ****     debounce(raw_matrix, matrix, MATRIX_ROWS, changed);
 497               		.loc 1 115 5 is_stmt 1 view .LVU90
 498 000c 282F      		mov r18,r24
 499 000e 4AE0      		ldi r20,lo8(10)
 500 0010 60E0      		ldi r22,lo8(matrix)
 501 0012 70E0      		ldi r23,hi8(matrix)
 502 0014 80E0      		ldi r24,lo8(raw_matrix)
 503 0016 90E0      		ldi r25,hi8(raw_matrix)
 504               	.LVL29:
 505               		.loc 1 115 5 is_stmt 0 view .LVU91
 506 0018 0E94 0000 		call debounce
 507               	.LVL30:
 116:quantum/matrix_common.c **** 
 117:quantum/matrix_common.c ****     matrix_scan_quantum();
 508               		.loc 1 117 5 is_stmt 1 view .LVU92
 509 001c 0E94 0000 		call matrix_scan_quantum
 510               	.LVL31:
 118:quantum/matrix_common.c ****     return changed;
 511               		.loc 1 118 5 view .LVU93
 119:quantum/matrix_common.c **** }
 512               		.loc 1 119 1 is_stmt 0 view .LVU94
 513 0020 8C2F      		mov r24,r28
 514               	/* epilogue start */
 515 0022 CF91      		pop r28
 516               	.LVL32:
 517               		.loc 1 119 1 view .LVU95
 518 0024 0895      		ret
 519               		.cfi_endproc
 520               	.LFE43:
 522               		.section	.text.peek_matrix,"ax",@progbits
 523               		.weak	peek_matrix
 525               	peek_matrix:
 526               	.LVL33:
 527               	.LFB44:
 120:quantum/matrix_common.c **** 
 121:quantum/matrix_common.c **** __attribute__((weak)) bool peek_matrix(uint8_t row_index, uint8_t col_index, bool raw) { return 0 !
 528               		.loc 1 121 88 is_stmt 1 view -0
 529               		.cfi_startproc
 530               	/* prologue: function */
 531               	/* frame size = 0 */
 532               	/* stack size = 0 */
 533               	.L__stack_usage = 0
 534               		.loc 1 121 90 view .LVU97
 535 0000 90E0      		ldi r25,0
 536               		.loc 1 121 132 is_stmt 0 view .LVU98
 537 0002 4423      		tst r20
 538 0004 01F0      		breq .L25
 539               		.loc 1 121 120 discriminator 1 view .LVU99
 540 0006 8050      		subi r24,lo8(-(raw_matrix))
 541 0008 9040      		sbci r25,hi8(-(raw_matrix))
 542               	.LVL34:
 543               	.L27:
 544               		.loc 1 121 132 discriminator 2 view .LVU100
 545 000a FC01      		movw r30,r24
 546 000c 8081      		ld r24,Z
 547 000e 90E0      		ldi r25,0
 548               		.loc 1 121 99 discriminator 2 view .LVU101
 549 0010 00C0      		rjmp 2f
 550               		1:
 551 0012 9595      		asr r25
 552 0014 8795      		ror r24
 553               		2:
 554 0016 6A95      		dec r22
 555 0018 02F4      		brpl 1b
 556               		.loc 1 121 1 discriminator 2 view .LVU102
 557 001a 8170      		andi r24,lo8(1)
 558               	/* epilogue start */
 559 001c 0895      		ret
 560               	.LVL35:
 561               	.L25:
 562               		.loc 1 121 140 discriminator 2 view .LVU103
 563 001e 8050      		subi r24,lo8(-(matrix))
 564 0020 9040      		sbci r25,hi8(-(matrix))
 565               	.LVL36:
 566               		.loc 1 121 140 discriminator 2 view .LVU104
 567 0022 00C0      		rjmp .L27
 568               		.cfi_endproc
 569               	.LFE44:
 571               		.comm	matrix,10,1
 572               		.comm	raw_matrix,10,1
 573               		.text
 574               	.Letext0:
 575               		.file 3 "/usr/avr/include/stdint.h"
 576               		.file 4 "/usr/lib/gcc/avr/8.3.0/include/stddef.h"
 577               		.file 5 "quantum/matrix.h"
 578               		.file 6 "quantum/keyboard.h"
 579               		.file 7 "quantum/action.h"
 580               		.file 8 "tmk_core/common/report.h"
 581               		.file 9 "tmk_core/common/host.h"
 582               		.file 10 "quantum/logging/debug.h"
 583               		.file 11 "quantum/keycode_config.h"
 584               		.file 12 "tmk_core/common/timer.h"
 585               		.file 13 "quantum/sequencer/sequencer.h"
 586               		.file 14 "quantum/keymap.h"
 587               		.file 15 "quantum/action_layer.h"
 588               		.file 16 "quantum/action_util.h"
 589               		.file 17 "quantum/send_string.h"
 590               		.file 18 "/usr/avr/include/stdlib.h"
 591               		.file 19 "quantum/debounce.h"
 592               		.file 20 "quantum/bitwise.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 matrix_common.c
     /tmp/ccvXnTf4.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccvXnTf4.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccvXnTf4.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccvXnTf4.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccvXnTf4.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccvXnTf4.s:13     .text.matrix_init_user:0000000000000000 matrix_init_user
     /tmp/ccvXnTf4.s:13     .text.matrix_init_user:0000000000000000 matrix_init_user.localalias.0
     /tmp/ccvXnTf4.s:33     .text.matrix_init_kb:0000000000000000 matrix_init_kb
     /tmp/ccvXnTf4.s:50     .text.matrix_scan_user:0000000000000000 matrix_scan_user
     /tmp/ccvXnTf4.s:65     .text.matrix_scan_kb:0000000000000000 matrix_scan_kb
     /tmp/ccvXnTf4.s:82     .text.matrix_rows:0000000000000000 matrix_rows
     /tmp/ccvXnTf4.s:101    .text.matrix_cols:0000000000000000 matrix_cols
     /tmp/ccvXnTf4.s:120    .text.matrix_is_on:0000000000000000 matrix_is_on
                            *COM*:000000000000000a matrix
     /tmp/ccvXnTf4.s:166    .text.matrix_get_row:0000000000000000 matrix_get_row
     /tmp/ccvXnTf4.s:193    .text.matrix_is_modified:0000000000000000 matrix_is_modified
     /tmp/ccvXnTf4.s:216    .text.matrix_print:0000000000000000 matrix_print
     /tmp/ccvXnTf4.s:237    .text.matrix_key_count:0000000000000000 matrix_key_count
     /tmp/ccvXnTf4.s:315    .text.matrix_io_delay:0000000000000000 matrix_io_delay
     /tmp/ccvXnTf4.s:354    .text.matrix_output_select_delay:0000000000000000 matrix_output_select_delay
     /tmp/ccvXnTf4.s:373    .text.matrix_output_unselect_delay:0000000000000000 matrix_output_unselect_delay
     /tmp/ccvXnTf4.s:392    .text.matrix_init_custom:0000000000000000 matrix_init_custom
     /tmp/ccvXnTf4.s:407    .text.matrix_scan_custom:0000000000000000 matrix_scan_custom
     /tmp/ccvXnTf4.s:429    .text.matrix_init:0000000000000000 matrix_init
                            *COM*:000000000000000a raw_matrix
     /tmp/ccvXnTf4.s:477    .text.matrix_scan:0000000000000000 matrix_scan
     /tmp/ccvXnTf4.s:525    .text.peek_matrix:0000000000000000 peek_matrix

UNDEFINED SYMBOLS
debounce_active
bitpop
debounce_init
matrix_init_quantum
debounce
matrix_scan_quantum
__do_clear_bss
