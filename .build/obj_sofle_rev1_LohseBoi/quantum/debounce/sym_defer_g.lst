   1               		.file	"sym_defer_g.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.debounce_init,"ax",@progbits
  11               	.global	debounce_init
  13               	debounce_init:
  14               	.LVL0:
  15               	.LFB26:
  16               		.file 1 "quantum/debounce/sym_defer_g.c"
   1:quantum/debounce/sym_defer_g.c **** /*
   2:quantum/debounce/sym_defer_g.c **** Copyright 2017 Alex Ong<the.onga@gmail.com>
   3:quantum/debounce/sym_defer_g.c **** Copyright 2021 Simon Arlott
   4:quantum/debounce/sym_defer_g.c **** This program is free software: you can redistribute it and/or modify
   5:quantum/debounce/sym_defer_g.c **** it under the terms of the GNU General Public License as published by
   6:quantum/debounce/sym_defer_g.c **** the Free Software Foundation, either version 2 of the License, or
   7:quantum/debounce/sym_defer_g.c **** (at your option) any later version.
   8:quantum/debounce/sym_defer_g.c **** This program is distributed in the hope that it will be useful,
   9:quantum/debounce/sym_defer_g.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/debounce/sym_defer_g.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/debounce/sym_defer_g.c **** GNU General Public License for more details.
  12:quantum/debounce/sym_defer_g.c **** You should have received a copy of the GNU General Public License
  13:quantum/debounce/sym_defer_g.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  14:quantum/debounce/sym_defer_g.c **** */
  15:quantum/debounce/sym_defer_g.c **** 
  16:quantum/debounce/sym_defer_g.c **** /*
  17:quantum/debounce/sym_defer_g.c **** Basic global debounce algorithm. Used in 99% of keyboards at time of implementation
  18:quantum/debounce/sym_defer_g.c **** When no state changes have occured for DEBOUNCE milliseconds, we push the state.
  19:quantum/debounce/sym_defer_g.c **** */
  20:quantum/debounce/sym_defer_g.c **** #include "matrix.h"
  21:quantum/debounce/sym_defer_g.c **** #include "timer.h"
  22:quantum/debounce/sym_defer_g.c **** #include "quantum.h"
  23:quantum/debounce/sym_defer_g.c **** #ifndef DEBOUNCE
  24:quantum/debounce/sym_defer_g.c **** #    define DEBOUNCE 5
  25:quantum/debounce/sym_defer_g.c **** #endif
  26:quantum/debounce/sym_defer_g.c **** 
  27:quantum/debounce/sym_defer_g.c **** #if DEBOUNCE > 0
  28:quantum/debounce/sym_defer_g.c **** static bool debouncing = false;
  29:quantum/debounce/sym_defer_g.c **** static fast_timer_t debouncing_time;
  30:quantum/debounce/sym_defer_g.c **** 
  31:quantum/debounce/sym_defer_g.c **** void debounce_init(uint8_t num_rows) {}
  17               		.loc 1 31 38 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23               		.loc 1 31 39 view .LVU1
  24               	/* epilogue start */
  25               		.loc 1 31 1 is_stmt 0 view .LVU2
  26 0000 0895      		ret
  27               		.cfi_endproc
  28               	.LFE26:
  30               		.section	.text.debounce,"ax",@progbits
  31               	.global	debounce
  33               	debounce:
  34               	.LVL1:
  35               	.LFB27:
  32:quantum/debounce/sym_defer_g.c **** 
  33:quantum/debounce/sym_defer_g.c **** void debounce(matrix_row_t raw[], matrix_row_t cooked[], uint8_t num_rows, bool changed) {
  36               		.loc 1 33 90 is_stmt 1 view -0
  37               		.cfi_startproc
  38               		.loc 1 33 90 is_stmt 0 view .LVU4
  39 0000 FF92      		push r15
  40               	.LCFI0:
  41               		.cfi_def_cfa_offset 3
  42               		.cfi_offset 15, -2
  43 0002 0F93      		push r16
  44               	.LCFI1:
  45               		.cfi_def_cfa_offset 4
  46               		.cfi_offset 16, -3
  47 0004 1F93      		push r17
  48               	.LCFI2:
  49               		.cfi_def_cfa_offset 5
  50               		.cfi_offset 17, -4
  51 0006 CF93      		push r28
  52               	.LCFI3:
  53               		.cfi_def_cfa_offset 6
  54               		.cfi_offset 28, -5
  55 0008 DF93      		push r29
  56               	.LCFI4:
  57               		.cfi_def_cfa_offset 7
  58               		.cfi_offset 29, -6
  59               	/* prologue: function */
  60               	/* frame size = 0 */
  61               	/* stack size = 5 */
  62               	.L__stack_usage = 5
  63 000a F82E      		mov r15,r24
  64 000c 092F      		mov r16,r25
  65 000e 162F      		mov r17,r22
  66 0010 D72F      		mov r29,r23
  67 0012 C42F      		mov r28,r20
  34:quantum/debounce/sym_defer_g.c ****     if (changed) {
  68               		.loc 1 34 5 is_stmt 1 view .LVU5
  69               		.loc 1 34 8 is_stmt 0 view .LVU6
  70 0014 2223      		tst r18
  71 0016 01F0      		breq .L3
  35:quantum/debounce/sym_defer_g.c ****         debouncing      = true;
  72               		.loc 1 35 9 is_stmt 1 view .LVU7
  73               		.loc 1 35 25 is_stmt 0 view .LVU8
  74 0018 81E0      		ldi r24,lo8(1)
  75               	.LVL2:
  76               		.loc 1 35 25 view .LVU9
  77 001a 8093 0000 		sts debouncing,r24
  36:quantum/debounce/sym_defer_g.c ****         debouncing_time = timer_read_fast();
  78               		.loc 1 36 9 is_stmt 1 view .LVU10
  79               	.LBB7:
  80               	.LBI7:
  81               		.file 2 "tmk_core/common/timer.h"
   1:tmk_core/common/timer.h **** /*
   2:tmk_core/common/timer.h **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/timer.h **** Copyright 2021 Simon Arlott
   4:tmk_core/common/timer.h **** 
   5:tmk_core/common/timer.h **** This program is free software: you can redistribute it and/or modify
   6:tmk_core/common/timer.h **** it under the terms of the GNU General Public License as published by
   7:tmk_core/common/timer.h **** the Free Software Foundation, either version 2 of the License, or
   8:tmk_core/common/timer.h **** (at your option) any later version.
   9:tmk_core/common/timer.h **** 
  10:tmk_core/common/timer.h **** This program is distributed in the hope that it will be useful,
  11:tmk_core/common/timer.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:tmk_core/common/timer.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:tmk_core/common/timer.h **** GNU General Public License for more details.
  14:tmk_core/common/timer.h **** 
  15:tmk_core/common/timer.h **** You should have received a copy of the GNU General Public License
  16:tmk_core/common/timer.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:tmk_core/common/timer.h **** */
  18:tmk_core/common/timer.h **** 
  19:tmk_core/common/timer.h **** #pragma once
  20:tmk_core/common/timer.h **** 
  21:tmk_core/common/timer.h **** #if __has_include_next("_timer.h")
  22:tmk_core/common/timer.h **** #    include_next "_timer.h" /* Include the platform's _timer.h */
  23:tmk_core/common/timer.h **** #endif
  24:tmk_core/common/timer.h **** 
  25:tmk_core/common/timer.h **** #include <stdint.h>
  26:tmk_core/common/timer.h **** 
  27:tmk_core/common/timer.h **** #define TIMER_DIFF(a, b, max) ((max == UINT8_MAX) ? ((uint8_t)((a) - (b))) : ((max == UINT16_MAX) ?
  28:tmk_core/common/timer.h **** #define TIMER_DIFF_8(a, b) TIMER_DIFF(a, b, UINT8_MAX)
  29:tmk_core/common/timer.h **** #define TIMER_DIFF_16(a, b) TIMER_DIFF(a, b, UINT16_MAX)
  30:tmk_core/common/timer.h **** #define TIMER_DIFF_32(a, b) TIMER_DIFF(a, b, UINT32_MAX)
  31:tmk_core/common/timer.h **** #define TIMER_DIFF_RAW(a, b) TIMER_DIFF_8(a, b)
  32:tmk_core/common/timer.h **** 
  33:tmk_core/common/timer.h **** #ifdef __cplusplus
  34:tmk_core/common/timer.h **** extern "C" {
  35:tmk_core/common/timer.h **** #endif
  36:tmk_core/common/timer.h **** 
  37:tmk_core/common/timer.h **** extern volatile uint32_t timer_count;
  38:tmk_core/common/timer.h **** 
  39:tmk_core/common/timer.h **** void     timer_init(void);
  40:tmk_core/common/timer.h **** void     timer_clear(void);
  41:tmk_core/common/timer.h **** uint16_t timer_read(void);
  42:tmk_core/common/timer.h **** uint32_t timer_read32(void);
  43:tmk_core/common/timer.h **** uint16_t timer_elapsed(uint16_t last);
  44:tmk_core/common/timer.h **** uint32_t timer_elapsed32(uint32_t last);
  45:tmk_core/common/timer.h **** 
  46:tmk_core/common/timer.h **** // Utility functions to check if a future time has expired & autmatically handle time wrapping if c
  47:tmk_core/common/timer.h **** #define timer_expired(current, future) ((uint16_t)(current - future) < UINT16_MAX / 2)
  48:tmk_core/common/timer.h **** #define timer_expired32(current, future) ((uint32_t)(current - future) < UINT32_MAX / 2)
  49:tmk_core/common/timer.h **** 
  50:tmk_core/common/timer.h **** // Use an appropriate timer integer size based on architecture (16-bit will overflow sooner)
  51:tmk_core/common/timer.h **** #if FAST_TIMER_T_SIZE < 32
  52:tmk_core/common/timer.h **** #    define TIMER_DIFF_FAST(a, b) TIMER_DIFF_16(a, b)
  53:tmk_core/common/timer.h **** #    define timer_expired_fast(current, future) timer_expired(current, future)
  54:tmk_core/common/timer.h **** typedef uint16_t fast_timer_t;
  55:tmk_core/common/timer.h **** fast_timer_t inline timer_read_fast(void) { return timer_read(); }
  82               		.loc 2 55 21 view .LVU11
  83               	.LBB8:
  84               		.loc 2 55 45 view .LVU12
  85               		.loc 2 55 52 is_stmt 0 view .LVU13
  86 001e 0E94 0000 		call timer_read
  87               	.LVL3:
  88               		.loc 2 55 52 view .LVU14
  89               	.LBE8:
  90               	.LBE7:
  91               		.loc 1 36 25 view .LVU15
  92 0022 9093 0000 		sts debouncing_time+1,r25
  93 0026 8093 0000 		sts debouncing_time,r24
  94               	.L3:
  37:quantum/debounce/sym_defer_g.c ****     }
  38:quantum/debounce/sym_defer_g.c **** 
  39:quantum/debounce/sym_defer_g.c ****     if (debouncing && timer_elapsed_fast(debouncing_time) >= DEBOUNCE) {
  95               		.loc 1 39 5 is_stmt 1 view .LVU16
  96               		.loc 1 39 8 is_stmt 0 view .LVU17
  97 002a 8091 0000 		lds r24,debouncing
  98 002e 8823      		tst r24
  99 0030 01F0      		breq .L2
 100               	.LVL4:
 101               	.LBB9:
 102               	.LBI9:
  56:tmk_core/common/timer.h **** fast_timer_t inline timer_elapsed_fast(fast_timer_t last) { return timer_elapsed(last); }
 103               		.loc 2 56 21 is_stmt 1 discriminator 1 view .LVU18
 104               	.LBB10:
 105               		.loc 2 56 61 discriminator 1 view .LVU19
 106               		.loc 2 56 68 is_stmt 0 discriminator 1 view .LVU20
 107 0032 8091 0000 		lds r24,debouncing_time
 108 0036 9091 0000 		lds r25,debouncing_time+1
 109 003a 0E94 0000 		call timer_elapsed
 110               	.LVL5:
 111               		.loc 2 56 68 discriminator 1 view .LVU21
 112               	.LBE10:
 113               	.LBE9:
 114               		.loc 1 39 20 discriminator 1 view .LVU22
 115 003e 0597      		sbiw r24,5
 116 0040 00F0      		brlo .L2
 117 0042 EF2D      		mov r30,r15
 118 0044 F02F      		mov r31,r16
 119 0046 A12F      		mov r26,r17
 120 0048 BD2F      		mov r27,r29
 121 004a CE0F      		add r28,r30
 122 004c DF2F      		mov r29,r31
 123 004e D11D      		adc r29,__zero_reg__
 124               	.LVL6:
 125               	.L7:
 126               	.LBB11:
  40:quantum/debounce/sym_defer_g.c ****         for (int i = 0; i < num_rows; i++) {
 127               		.loc 1 40 9 discriminator 1 view .LVU23
 128 0050 EC17      		cp r30,r28
 129 0052 FD07      		cpc r31,r29
 130 0054 01F4      		brne .L8
 131               	.LBE11:
  41:quantum/debounce/sym_defer_g.c ****             cooked[i] = raw[i];
  42:quantum/debounce/sym_defer_g.c ****         }
  43:quantum/debounce/sym_defer_g.c ****         debouncing = false;
 132               		.loc 1 43 9 is_stmt 1 view .LVU24
 133               		.loc 1 43 20 is_stmt 0 view .LVU25
 134 0056 1092 0000 		sts debouncing,__zero_reg__
 135               	.LVL7:
 136               	.L2:
 137               	/* epilogue start */
  44:quantum/debounce/sym_defer_g.c ****     }
  45:quantum/debounce/sym_defer_g.c **** }
 138               		.loc 1 45 1 view .LVU26
 139 005a DF91      		pop r29
 140 005c CF91      		pop r28
 141 005e 1F91      		pop r17
 142 0060 0F91      		pop r16
 143 0062 FF90      		pop r15
 144 0064 0895      		ret
 145               	.LVL8:
 146               	.L8:
 147               	.LBB12:
  41:quantum/debounce/sym_defer_g.c ****             cooked[i] = raw[i];
 148               		.loc 1 41 13 is_stmt 1 discriminator 3 view .LVU27
  41:quantum/debounce/sym_defer_g.c ****             cooked[i] = raw[i];
 149               		.loc 1 41 28 is_stmt 0 discriminator 3 view .LVU28
 150 0066 8191      		ld r24,Z+
 151               	.LVL9:
  41:quantum/debounce/sym_defer_g.c ****             cooked[i] = raw[i];
 152               		.loc 1 41 23 discriminator 3 view .LVU29
 153 0068 8D93      		st X+,r24
 154               	.LVL10:
  41:quantum/debounce/sym_defer_g.c ****             cooked[i] = raw[i];
 155               		.loc 1 41 23 discriminator 3 view .LVU30
 156 006a 00C0      		rjmp .L7
 157               	.LBE12:
 158               		.cfi_endproc
 159               	.LFE27:
 161               		.section	.text.debounce_active,"ax",@progbits
 162               	.global	debounce_active
 164               	debounce_active:
 165               	.LFB28:
  46:quantum/debounce/sym_defer_g.c **** 
  47:quantum/debounce/sym_defer_g.c **** bool debounce_active(void) { return debouncing; }
 166               		.loc 1 47 28 is_stmt 1 view -0
 167               		.cfi_startproc
 168               	/* prologue: function */
 169               	/* frame size = 0 */
 170               	/* stack size = 0 */
 171               	.L__stack_usage = 0
 172               		.loc 1 47 30 view .LVU32
 173               		.loc 1 47 1 is_stmt 0 view .LVU33
 174 0000 8091 0000 		lds r24,debouncing
 175               	/* epilogue start */
 176 0004 0895      		ret
 177               		.cfi_endproc
 178               	.LFE28:
 180               		.section	.text.debounce_free,"ax",@progbits
 181               	.global	debounce_free
 183               	debounce_free:
 184               	.LFB29:
  48:quantum/debounce/sym_defer_g.c **** 
  49:quantum/debounce/sym_defer_g.c **** void debounce_free(void) {}
 185               		.loc 1 49 26 is_stmt 1 view -0
 186               		.cfi_startproc
 187               	/* prologue: function */
 188               	/* frame size = 0 */
 189               	/* stack size = 0 */
 190               	.L__stack_usage = 0
 191               		.loc 1 49 27 view .LVU35
 192               	/* epilogue start */
 193               		.loc 1 49 1 is_stmt 0 view .LVU36
 194 0000 0895      		ret
 195               		.cfi_endproc
 196               	.LFE29:
 198               		.section	.bss.debouncing_time,"aw",@nobits
 201               	debouncing_time:
 202 0000 0000      		.zero	2
 203               		.section	.bss.debouncing,"aw",@nobits
 206               	debouncing:
 207 0000 00        		.zero	1
 208               		.text
 209               	.Letext0:
 210               		.file 3 "/usr/avr/include/stdint.h"
 211               		.file 4 "quantum/matrix.h"
 212               		.file 5 "/usr/lib/gcc/avr/8.3.0/include/stddef.h"
 213               		.file 6 "quantum/keyboard.h"
 214               		.file 7 "quantum/action.h"
 215               		.file 8 "tmk_core/common/report.h"
 216               		.file 9 "tmk_core/common/host.h"
 217               		.file 10 "quantum/logging/debug.h"
 218               		.file 11 "quantum/keycode_config.h"
 219               		.file 12 "quantum/sequencer/sequencer.h"
 220               		.file 13 "quantum/keymap.h"
 221               		.file 14 "quantum/action_layer.h"
 222               		.file 15 "quantum/action_util.h"
 223               		.file 16 "quantum/send_string.h"
 224               		.file 17 "/usr/avr/include/stdlib.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 sym_defer_g.c
     /tmp/cciS2tAR.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cciS2tAR.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cciS2tAR.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cciS2tAR.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cciS2tAR.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cciS2tAR.s:13     .text.debounce_init:0000000000000000 debounce_init
     /tmp/cciS2tAR.s:33     .text.debounce:0000000000000000 debounce
     /tmp/cciS2tAR.s:206    .bss.debouncing:0000000000000000 debouncing
     /tmp/cciS2tAR.s:201    .bss.debouncing_time:0000000000000000 debouncing_time
     /tmp/cciS2tAR.s:164    .text.debounce_active:0000000000000000 debounce_active
     /tmp/cciS2tAR.s:183    .text.debounce_free:0000000000000000 debounce_free

UNDEFINED SYMBOLS
timer_read
timer_elapsed
__do_clear_bss
