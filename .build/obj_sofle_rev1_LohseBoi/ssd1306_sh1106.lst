   1               		.file	"ssd1306_sh1106.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.i2c_transmit_P.constprop.2,"ax",@progbits
  12               	i2c_transmit_P.constprop.2:
  13               	.LVL0:
  14               	.LFB46:
  15               		.file 1 "drivers/oled/ssd1306_sh1106.c"
   1:drivers/oled/ssd1306_sh1106.c **** /*
   2:drivers/oled/ssd1306_sh1106.c **** Copyright 2019 Ryan Caltabiano <https://github.com/XScorpion2>
   3:drivers/oled/ssd1306_sh1106.c **** 
   4:drivers/oled/ssd1306_sh1106.c **** This program is free software: you can redistribute it and/or modify
   5:drivers/oled/ssd1306_sh1106.c **** it under the terms of the GNU General Public License as published by
   6:drivers/oled/ssd1306_sh1106.c **** the Free Software Foundation, either version 2 of the License, or
   7:drivers/oled/ssd1306_sh1106.c **** (at your option) any later version.
   8:drivers/oled/ssd1306_sh1106.c **** 
   9:drivers/oled/ssd1306_sh1106.c **** This program is distributed in the hope that it will be useful,
  10:drivers/oled/ssd1306_sh1106.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:drivers/oled/ssd1306_sh1106.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:drivers/oled/ssd1306_sh1106.c **** GNU General Public License for more details.
  13:drivers/oled/ssd1306_sh1106.c **** 
  14:drivers/oled/ssd1306_sh1106.c **** You should have received a copy of the GNU General Public License
  15:drivers/oled/ssd1306_sh1106.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:drivers/oled/ssd1306_sh1106.c **** */
  17:drivers/oled/ssd1306_sh1106.c **** #include "i2c_master.h"
  18:drivers/oled/ssd1306_sh1106.c **** #include "oled_driver.h"
  19:drivers/oled/ssd1306_sh1106.c **** #include OLED_FONT_H
  20:drivers/oled/ssd1306_sh1106.c **** #include "timer.h"
  21:drivers/oled/ssd1306_sh1106.c **** #include "print.h"
  22:drivers/oled/ssd1306_sh1106.c **** 
  23:drivers/oled/ssd1306_sh1106.c **** #include <string.h>
  24:drivers/oled/ssd1306_sh1106.c **** 
  25:drivers/oled/ssd1306_sh1106.c **** #include "progmem.h"
  26:drivers/oled/ssd1306_sh1106.c **** 
  27:drivers/oled/ssd1306_sh1106.c **** #include "keyboard.h"
  28:drivers/oled/ssd1306_sh1106.c **** 
  29:drivers/oled/ssd1306_sh1106.c **** // Used commands from spec sheet: https://cdn-shop.adafruit.com/datasheets/SSD1306.pdf
  30:drivers/oled/ssd1306_sh1106.c **** // for SH1106: https://www.velleman.eu/downloads/29/infosheets/sh1106_datasheet.pdf
  31:drivers/oled/ssd1306_sh1106.c **** 
  32:drivers/oled/ssd1306_sh1106.c **** // Fundamental Commands
  33:drivers/oled/ssd1306_sh1106.c **** #define CONTRAST 0x81
  34:drivers/oled/ssd1306_sh1106.c **** #define DISPLAY_ALL_ON 0xA5
  35:drivers/oled/ssd1306_sh1106.c **** #define DISPLAY_ALL_ON_RESUME 0xA4
  36:drivers/oled/ssd1306_sh1106.c **** #define NORMAL_DISPLAY 0xA6
  37:drivers/oled/ssd1306_sh1106.c **** #define INVERT_DISPLAY 0xA7
  38:drivers/oled/ssd1306_sh1106.c **** #define DISPLAY_ON 0xAF
  39:drivers/oled/ssd1306_sh1106.c **** #define DISPLAY_OFF 0xAE
  40:drivers/oled/ssd1306_sh1106.c **** #define NOP 0xE3
  41:drivers/oled/ssd1306_sh1106.c **** 
  42:drivers/oled/ssd1306_sh1106.c **** // Scrolling Commands
  43:drivers/oled/ssd1306_sh1106.c **** #define ACTIVATE_SCROLL 0x2F
  44:drivers/oled/ssd1306_sh1106.c **** #define DEACTIVATE_SCROLL 0x2E
  45:drivers/oled/ssd1306_sh1106.c **** #define SCROLL_RIGHT 0x26
  46:drivers/oled/ssd1306_sh1106.c **** #define SCROLL_LEFT 0x27
  47:drivers/oled/ssd1306_sh1106.c **** #define SCROLL_RIGHT_UP 0x29
  48:drivers/oled/ssd1306_sh1106.c **** #define SCROLL_LEFT_UP 0x2A
  49:drivers/oled/ssd1306_sh1106.c **** 
  50:drivers/oled/ssd1306_sh1106.c **** // Addressing Setting Commands
  51:drivers/oled/ssd1306_sh1106.c **** #define MEMORY_MODE 0x20
  52:drivers/oled/ssd1306_sh1106.c **** #define COLUMN_ADDR 0x21
  53:drivers/oled/ssd1306_sh1106.c **** #define PAGE_ADDR 0x22
  54:drivers/oled/ssd1306_sh1106.c **** #define PAM_SETCOLUMN_LSB 0x00
  55:drivers/oled/ssd1306_sh1106.c **** #define PAM_SETCOLUMN_MSB 0x10
  56:drivers/oled/ssd1306_sh1106.c **** #define PAM_PAGE_ADDR 0xB0  // 0xb0 -- 0xb7
  57:drivers/oled/ssd1306_sh1106.c **** 
  58:drivers/oled/ssd1306_sh1106.c **** // Hardware Configuration Commands
  59:drivers/oled/ssd1306_sh1106.c **** #define DISPLAY_START_LINE 0x40
  60:drivers/oled/ssd1306_sh1106.c **** #define SEGMENT_REMAP 0xA0
  61:drivers/oled/ssd1306_sh1106.c **** #define SEGMENT_REMAP_INV 0xA1
  62:drivers/oled/ssd1306_sh1106.c **** #define MULTIPLEX_RATIO 0xA8
  63:drivers/oled/ssd1306_sh1106.c **** #define COM_SCAN_INC 0xC0
  64:drivers/oled/ssd1306_sh1106.c **** #define COM_SCAN_DEC 0xC8
  65:drivers/oled/ssd1306_sh1106.c **** #define DISPLAY_OFFSET 0xD3
  66:drivers/oled/ssd1306_sh1106.c **** #define COM_PINS 0xDA
  67:drivers/oled/ssd1306_sh1106.c **** #define COM_PINS_SEQ 0x02
  68:drivers/oled/ssd1306_sh1106.c **** #define COM_PINS_ALT 0x12
  69:drivers/oled/ssd1306_sh1106.c **** #define COM_PINS_SEQ_LR 0x22
  70:drivers/oled/ssd1306_sh1106.c **** #define COM_PINS_ALT_LR 0x32
  71:drivers/oled/ssd1306_sh1106.c **** 
  72:drivers/oled/ssd1306_sh1106.c **** // Timing & Driving Commands
  73:drivers/oled/ssd1306_sh1106.c **** #define DISPLAY_CLOCK 0xD5
  74:drivers/oled/ssd1306_sh1106.c **** #define PRE_CHARGE_PERIOD 0xD9
  75:drivers/oled/ssd1306_sh1106.c **** #define VCOM_DETECT 0xDB
  76:drivers/oled/ssd1306_sh1106.c **** 
  77:drivers/oled/ssd1306_sh1106.c **** // Advance Graphic Commands
  78:drivers/oled/ssd1306_sh1106.c **** #define FADE_BLINK 0x23
  79:drivers/oled/ssd1306_sh1106.c **** #define ENABLE_FADE 0x20
  80:drivers/oled/ssd1306_sh1106.c **** #define ENABLE_BLINK 0x30
  81:drivers/oled/ssd1306_sh1106.c **** 
  82:drivers/oled/ssd1306_sh1106.c **** // Charge Pump Commands
  83:drivers/oled/ssd1306_sh1106.c **** #define CHARGE_PUMP 0x8D
  84:drivers/oled/ssd1306_sh1106.c **** 
  85:drivers/oled/ssd1306_sh1106.c **** // Misc defines
  86:drivers/oled/ssd1306_sh1106.c **** #ifndef OLED_BLOCK_COUNT
  87:drivers/oled/ssd1306_sh1106.c **** #    define OLED_BLOCK_COUNT (sizeof(OLED_BLOCK_TYPE) * 8)
  88:drivers/oled/ssd1306_sh1106.c **** #endif
  89:drivers/oled/ssd1306_sh1106.c **** #ifndef OLED_BLOCK_SIZE
  90:drivers/oled/ssd1306_sh1106.c **** #    define OLED_BLOCK_SIZE (OLED_MATRIX_SIZE / OLED_BLOCK_COUNT)
  91:drivers/oled/ssd1306_sh1106.c **** #endif
  92:drivers/oled/ssd1306_sh1106.c **** 
  93:drivers/oled/ssd1306_sh1106.c **** #define OLED_ALL_BLOCKS_MASK (((((OLED_BLOCK_TYPE)1 << (OLED_BLOCK_COUNT - 1)) - 1) << 1) | 1)
  94:drivers/oled/ssd1306_sh1106.c **** 
  95:drivers/oled/ssd1306_sh1106.c **** // i2c defines
  96:drivers/oled/ssd1306_sh1106.c **** #define I2C_CMD 0x00
  97:drivers/oled/ssd1306_sh1106.c **** #define I2C_DATA 0x40
  98:drivers/oled/ssd1306_sh1106.c **** #if defined(__AVR__)
  99:drivers/oled/ssd1306_sh1106.c **** #    define I2C_TRANSMIT_P(data) i2c_transmit_P((OLED_DISPLAY_ADDRESS << 1), &data[0], sizeof(data)
 100:drivers/oled/ssd1306_sh1106.c **** #else  // defined(__AVR__)
 101:drivers/oled/ssd1306_sh1106.c **** #    define I2C_TRANSMIT_P(data) i2c_transmit((OLED_DISPLAY_ADDRESS << 1), &data[0], sizeof(data), 
 102:drivers/oled/ssd1306_sh1106.c **** #endif  // defined(__AVR__)
 103:drivers/oled/ssd1306_sh1106.c **** #define I2C_TRANSMIT(data) i2c_transmit((OLED_DISPLAY_ADDRESS << 1), &data[0], sizeof(data), OLED_I
 104:drivers/oled/ssd1306_sh1106.c **** #define I2C_WRITE_REG(mode, data, size) i2c_writeReg((OLED_DISPLAY_ADDRESS << 1), mode, data, size,
 105:drivers/oled/ssd1306_sh1106.c **** 
 106:drivers/oled/ssd1306_sh1106.c **** #define HAS_FLAGS(bits, flags) ((bits & flags) == flags)
 107:drivers/oled/ssd1306_sh1106.c **** 
 108:drivers/oled/ssd1306_sh1106.c **** // Display buffer's is the same as the OLED memory layout
 109:drivers/oled/ssd1306_sh1106.c **** // this is so we don't end up with rounding errors with
 110:drivers/oled/ssd1306_sh1106.c **** // parts of the display unusable or don't get cleared correctly
 111:drivers/oled/ssd1306_sh1106.c **** // and also allows for drawing & inverting
 112:drivers/oled/ssd1306_sh1106.c **** uint8_t         oled_buffer[OLED_MATRIX_SIZE];
 113:drivers/oled/ssd1306_sh1106.c **** uint8_t *       oled_cursor;
 114:drivers/oled/ssd1306_sh1106.c **** OLED_BLOCK_TYPE oled_dirty          = 0;
 115:drivers/oled/ssd1306_sh1106.c **** bool            oled_initialized    = false;
 116:drivers/oled/ssd1306_sh1106.c **** bool            oled_active         = false;
 117:drivers/oled/ssd1306_sh1106.c **** bool            oled_scrolling      = false;
 118:drivers/oled/ssd1306_sh1106.c **** bool            oled_inverted       = false;
 119:drivers/oled/ssd1306_sh1106.c **** uint8_t         oled_brightness     = OLED_BRIGHTNESS;
 120:drivers/oled/ssd1306_sh1106.c **** oled_rotation_t oled_rotation       = 0;
 121:drivers/oled/ssd1306_sh1106.c **** uint8_t         oled_rotation_width = 0;
 122:drivers/oled/ssd1306_sh1106.c **** uint8_t         oled_scroll_speed   = 0;  // this holds the speed after being remapped to ssd1306 i
 123:drivers/oled/ssd1306_sh1106.c **** uint8_t         oled_scroll_start   = 0;
 124:drivers/oled/ssd1306_sh1106.c **** uint8_t         oled_scroll_end     = 7;
 125:drivers/oled/ssd1306_sh1106.c **** #if OLED_TIMEOUT > 0
 126:drivers/oled/ssd1306_sh1106.c **** uint32_t oled_timeout;
 127:drivers/oled/ssd1306_sh1106.c **** #endif
 128:drivers/oled/ssd1306_sh1106.c **** #if OLED_SCROLL_TIMEOUT > 0
 129:drivers/oled/ssd1306_sh1106.c **** uint32_t oled_scroll_timeout;
 130:drivers/oled/ssd1306_sh1106.c **** #endif
 131:drivers/oled/ssd1306_sh1106.c **** #if OLED_UPDATE_INTERVAL > 0
 132:drivers/oled/ssd1306_sh1106.c **** uint16_t oled_update_timeout;
 133:drivers/oled/ssd1306_sh1106.c **** #endif
 134:drivers/oled/ssd1306_sh1106.c **** 
 135:drivers/oled/ssd1306_sh1106.c **** // Internal variables to reduce math instructions
 136:drivers/oled/ssd1306_sh1106.c **** 
 137:drivers/oled/ssd1306_sh1106.c **** #if defined(__AVR__)
 138:drivers/oled/ssd1306_sh1106.c **** // identical to i2c_transmit, but for PROGMEM since all initialization is in PROGMEM arrays current
 139:drivers/oled/ssd1306_sh1106.c **** // probably should move this into i2c_master...
 140:drivers/oled/ssd1306_sh1106.c **** static i2c_status_t i2c_transmit_P(uint8_t address, const uint8_t *data, uint16_t length, uint16_t 
  16               		.loc 1 140 21 view -0
  17               		.cfi_startproc
  18               		.loc 1 140 21 is_stmt 0 view .LVU1
  19 0000 CF92      		push r12
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 12, -2
  23 0002 DF92      		push r13
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 13, -3
  27 0004 EF92      		push r14
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 14, -4
  31 0006 FF92      		push r15
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 15, -5
  35 0008 0F93      		push r16
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 16, -6
  39 000a 1F93      		push r17
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 17, -7
  43 000c CF93      		push r28
  44               	.LCFI6:
  45               		.cfi_def_cfa_offset 9
  46               		.cfi_offset 28, -8
  47 000e DF93      		push r29
  48               	.LCFI7:
  49               		.cfi_def_cfa_offset 10
  50               		.cfi_offset 29, -9
  51               	/* prologue: function */
  52               	/* frame size = 0 */
  53               	/* stack size = 8 */
  54               	.L__stack_usage = 8
  55 0010 6C01      		movw r12,r24
  56 0012 7B01      		movw r14,r22
  57               	.LVL1:
 141:drivers/oled/ssd1306_sh1106.c ****     i2c_status_t status = i2c_start(address | I2C_WRITE, timeout);
  58               		.loc 1 141 5 is_stmt 1 view .LVU2
  59               		.loc 1 141 27 is_stmt 0 view .LVU3
  60 0014 64E6      		ldi r22,lo8(100)
  61 0016 70E0      		ldi r23,0
  62               	.LVL2:
  63               		.loc 1 141 27 view .LVU4
  64 0018 88E7      		ldi r24,lo8(120)
  65               	.LVL3:
  66               		.loc 1 141 27 view .LVU5
  67 001a 0E94 0000 		call i2c_start
  68               	.LVL4:
  69 001e EC01      		movw r28,r24
  70               	.LVL5:
 142:drivers/oled/ssd1306_sh1106.c **** 
 143:drivers/oled/ssd1306_sh1106.c ****     for (uint16_t i = 0; i < length && status >= 0; i++) {
  71               		.loc 1 143 5 is_stmt 1 view .LVU6
  72               	.LBB4:
  73               		.loc 1 143 10 view .LVU7
  74               		.loc 1 143 37 is_stmt 0 view .LVU8
  75 0020 97FD      		sbrc r25,7
  76 0022 00C0      		rjmp .L2
  77               		.loc 1 143 19 view .LVU9
  78 0024 10E0      		ldi r17,0
  79 0026 00E0      		ldi r16,0
  80               	.LVL6:
  81               	.L3:
 144:drivers/oled/ssd1306_sh1106.c ****         status = i2c_write(pgm_read_byte((const char *)data++), timeout);
  82               		.loc 1 144 9 is_stmt 1 view .LVU10
  83               	.LBB5:
  84               		.loc 1 144 28 view .LVU11
  85               		.loc 1 144 28 view .LVU12
  86               		.loc 1 144 28 view .LVU13
  87 0028 F601      		movw r30,r12
  88 002a E00F      		add r30,r16
  89 002c F11F      		adc r31,r17
  90               	.LVL7:
  91               		.loc 1 144 28 is_stmt 0 view .LVU14
  92               	/* #APP */
  93               	 ;  144 "drivers/oled/ssd1306_sh1106.c" 1
  94 002e 8491      		lpm r24, Z
  95               		
  96               	 ;  0 "" 2
  97               	.LVL8:
  98               		.loc 1 144 28 is_stmt 1 view .LVU15
  99               	/* #NOAPP */
 100               	.LBE5:
 101               		.loc 1 144 18 is_stmt 0 view .LVU16
 102 0030 64E6      		ldi r22,lo8(100)
 103 0032 70E0      		ldi r23,0
 104 0034 0E94 0000 		call i2c_write
 105               	.LVL9:
 106               		.loc 1 144 18 view .LVU17
 107 0038 EC01      		movw r28,r24
 108               	.LVL10:
 145:drivers/oled/ssd1306_sh1106.c ****         if (status) break;
 109               		.loc 1 145 9 is_stmt 1 view .LVU18
 110               		.loc 1 145 12 is_stmt 0 view .LVU19
 111 003a 892B      		or r24,r25
 112 003c 01F4      		brne .L2
 143:drivers/oled/ssd1306_sh1106.c ****         status = i2c_write(pgm_read_byte((const char *)data++), timeout);
 113               		.loc 1 143 54 view .LVU20
 114 003e 0F5F      		subi r16,-1
 115 0040 1F4F      		sbci r17,-1
 116               	.LVL11:
 143:drivers/oled/ssd1306_sh1106.c ****         status = i2c_write(pgm_read_byte((const char *)data++), timeout);
 117               		.loc 1 143 5 view .LVU21
 118 0042 0E15      		cp r16,r14
 119 0044 1F05      		cpc r17,r15
 120 0046 01F4      		brne .L3
 121               	.LVL12:
 122               	.L2:
 143:drivers/oled/ssd1306_sh1106.c ****         status = i2c_write(pgm_read_byte((const char *)data++), timeout);
 123               		.loc 1 143 5 view .LVU22
 124               	.LBE4:
 146:drivers/oled/ssd1306_sh1106.c ****     }
 147:drivers/oled/ssd1306_sh1106.c **** 
 148:drivers/oled/ssd1306_sh1106.c ****     i2c_stop();
 125               		.loc 1 148 5 is_stmt 1 view .LVU23
 126 0048 0E94 0000 		call i2c_stop
 127               	.LVL13:
 149:drivers/oled/ssd1306_sh1106.c **** 
 150:drivers/oled/ssd1306_sh1106.c ****     return status;
 128               		.loc 1 150 5 view .LVU24
 151:drivers/oled/ssd1306_sh1106.c **** }
 129               		.loc 1 151 1 is_stmt 0 view .LVU25
 130 004c CE01      		movw r24,r28
 131               	/* epilogue start */
 132 004e DF91      		pop r29
 133 0050 CF91      		pop r28
 134               	.LVL14:
 135               		.loc 1 151 1 view .LVU26
 136 0052 1F91      		pop r17
 137 0054 0F91      		pop r16
 138 0056 FF90      		pop r15
 139 0058 EF90      		pop r14
 140               	.LVL15:
 141               		.loc 1 151 1 view .LVU27
 142 005a DF90      		pop r13
 143 005c CF90      		pop r12
 144 005e 0895      		ret
 145               		.cfi_endproc
 146               	.LFE46:
 148               		.section	.text.oled_init_user,"ax",@progbits
 149               		.weak	oled_init_user
 151               	oled_init_user:
 152               	.LVL16:
 153               	.LFB9:
 152:drivers/oled/ssd1306_sh1106.c **** #endif
 153:drivers/oled/ssd1306_sh1106.c **** 
 154:drivers/oled/ssd1306_sh1106.c **** // Flips the rendering bits for a character at the current cursor position
 155:drivers/oled/ssd1306_sh1106.c **** static void InvertCharacter(uint8_t *cursor) {
 156:drivers/oled/ssd1306_sh1106.c ****     const uint8_t *end = cursor + OLED_FONT_WIDTH;
 157:drivers/oled/ssd1306_sh1106.c ****     while (cursor < end) {
 158:drivers/oled/ssd1306_sh1106.c ****         *cursor = ~(*cursor);
 159:drivers/oled/ssd1306_sh1106.c ****         cursor++;
 160:drivers/oled/ssd1306_sh1106.c ****     }
 161:drivers/oled/ssd1306_sh1106.c **** }
 162:drivers/oled/ssd1306_sh1106.c **** 
 163:drivers/oled/ssd1306_sh1106.c **** bool oled_init(oled_rotation_t rotation) {
 164:drivers/oled/ssd1306_sh1106.c **** #if defined(USE_I2C) && defined(SPLIT_KEYBOARD)
 165:drivers/oled/ssd1306_sh1106.c ****     if (!is_keyboard_master()) {
 166:drivers/oled/ssd1306_sh1106.c ****         return true;
 167:drivers/oled/ssd1306_sh1106.c ****     }
 168:drivers/oled/ssd1306_sh1106.c **** #endif
 169:drivers/oled/ssd1306_sh1106.c **** 
 170:drivers/oled/ssd1306_sh1106.c ****     oled_rotation = oled_init_user(rotation);
 171:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 172:drivers/oled/ssd1306_sh1106.c ****         oled_rotation_width = OLED_DISPLAY_WIDTH;
 173:drivers/oled/ssd1306_sh1106.c ****     } else {
 174:drivers/oled/ssd1306_sh1106.c ****         oled_rotation_width = OLED_DISPLAY_HEIGHT;
 175:drivers/oled/ssd1306_sh1106.c ****     }
 176:drivers/oled/ssd1306_sh1106.c ****     i2c_init();
 177:drivers/oled/ssd1306_sh1106.c **** 
 178:drivers/oled/ssd1306_sh1106.c ****     static const uint8_t PROGMEM display_setup1[] = {
 179:drivers/oled/ssd1306_sh1106.c ****         I2C_CMD,
 180:drivers/oled/ssd1306_sh1106.c ****         DISPLAY_OFF,
 181:drivers/oled/ssd1306_sh1106.c ****         DISPLAY_CLOCK,
 182:drivers/oled/ssd1306_sh1106.c ****         0x80,
 183:drivers/oled/ssd1306_sh1106.c ****         MULTIPLEX_RATIO,
 184:drivers/oled/ssd1306_sh1106.c ****         OLED_DISPLAY_HEIGHT - 1,
 185:drivers/oled/ssd1306_sh1106.c ****         DISPLAY_OFFSET,
 186:drivers/oled/ssd1306_sh1106.c ****         0x00,
 187:drivers/oled/ssd1306_sh1106.c ****         DISPLAY_START_LINE | 0x00,
 188:drivers/oled/ssd1306_sh1106.c ****         CHARGE_PUMP,
 189:drivers/oled/ssd1306_sh1106.c ****         0x14,
 190:drivers/oled/ssd1306_sh1106.c **** #if (OLED_IC != OLED_IC_SH1106)
 191:drivers/oled/ssd1306_sh1106.c ****         // MEMORY_MODE is unsupported on SH1106 (Page Addressing only)
 192:drivers/oled/ssd1306_sh1106.c ****         MEMORY_MODE,
 193:drivers/oled/ssd1306_sh1106.c ****         0x00,  // Horizontal addressing mode
 194:drivers/oled/ssd1306_sh1106.c **** #endif
 195:drivers/oled/ssd1306_sh1106.c ****     };
 196:drivers/oled/ssd1306_sh1106.c ****     if (I2C_TRANSMIT_P(display_setup1) != I2C_STATUS_SUCCESS) {
 197:drivers/oled/ssd1306_sh1106.c ****         print("oled_init cmd set 1 failed\n");
 198:drivers/oled/ssd1306_sh1106.c ****         return false;
 199:drivers/oled/ssd1306_sh1106.c ****     }
 200:drivers/oled/ssd1306_sh1106.c **** 
 201:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_180)) {
 202:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, SEGMENT_REMAP_INV, COM_SCAN_DEC};
 203:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_normal) != I2C_STATUS_SUCCESS) {
 204:drivers/oled/ssd1306_sh1106.c ****             print("oled_init cmd normal rotation failed\n");
 205:drivers/oled/ssd1306_sh1106.c ****             return false;
 206:drivers/oled/ssd1306_sh1106.c ****         }
 207:drivers/oled/ssd1306_sh1106.c ****     } else {
 208:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_flipped[] = {I2C_CMD, SEGMENT_REMAP, COM_SCAN_INC};
 209:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_flipped) != I2C_STATUS_SUCCESS) {
 210:drivers/oled/ssd1306_sh1106.c ****             print("display_flipped failed\n");
 211:drivers/oled/ssd1306_sh1106.c ****             return false;
 212:drivers/oled/ssd1306_sh1106.c ****         }
 213:drivers/oled/ssd1306_sh1106.c ****     }
 214:drivers/oled/ssd1306_sh1106.c **** 
 215:drivers/oled/ssd1306_sh1106.c ****     static const uint8_t PROGMEM display_setup2[] = {I2C_CMD, COM_PINS, OLED_COM_PINS, CONTRAST, OL
 216:drivers/oled/ssd1306_sh1106.c ****     if (I2C_TRANSMIT_P(display_setup2) != I2C_STATUS_SUCCESS) {
 217:drivers/oled/ssd1306_sh1106.c ****         print("display_setup2 failed\n");
 218:drivers/oled/ssd1306_sh1106.c ****         return false;
 219:drivers/oled/ssd1306_sh1106.c ****     }
 220:drivers/oled/ssd1306_sh1106.c **** 
 221:drivers/oled/ssd1306_sh1106.c **** #if OLED_TIMEOUT > 0
 222:drivers/oled/ssd1306_sh1106.c ****     oled_timeout = timer_read32() + OLED_TIMEOUT;
 223:drivers/oled/ssd1306_sh1106.c **** #endif
 224:drivers/oled/ssd1306_sh1106.c **** #if OLED_SCROLL_TIMEOUT > 0
 225:drivers/oled/ssd1306_sh1106.c ****     oled_scroll_timeout = timer_read32() + OLED_SCROLL_TIMEOUT;
 226:drivers/oled/ssd1306_sh1106.c **** #endif
 227:drivers/oled/ssd1306_sh1106.c **** 
 228:drivers/oled/ssd1306_sh1106.c ****     oled_clear();
 229:drivers/oled/ssd1306_sh1106.c ****     oled_initialized = true;
 230:drivers/oled/ssd1306_sh1106.c ****     oled_active      = true;
 231:drivers/oled/ssd1306_sh1106.c ****     oled_scrolling   = false;
 232:drivers/oled/ssd1306_sh1106.c ****     return true;
 233:drivers/oled/ssd1306_sh1106.c **** }
 234:drivers/oled/ssd1306_sh1106.c **** 
 235:drivers/oled/ssd1306_sh1106.c **** __attribute__((weak)) oled_rotation_t oled_init_user(oled_rotation_t rotation) { return rotation; }
 154               		.loc 1 235 80 is_stmt 1 view -0
 155               		.cfi_startproc
 156               	/* prologue: function */
 157               	/* frame size = 0 */
 158               	/* stack size = 0 */
 159               	.L__stack_usage = 0
 160               		.loc 1 235 82 view .LVU29
 161               	/* epilogue start */
 162               		.loc 1 235 1 is_stmt 0 view .LVU30
 163 0000 0895      		ret
 164               		.cfi_endproc
 165               	.LFE9:
 167               		.section	.text.oled_clear,"ax",@progbits
 168               	.global	oled_clear
 170               	oled_clear:
 171               	.LFB10:
 236:drivers/oled/ssd1306_sh1106.c **** 
 237:drivers/oled/ssd1306_sh1106.c **** void oled_clear(void) {
 172               		.loc 1 237 23 is_stmt 1 view -0
 173               		.cfi_startproc
 174               	/* prologue: function */
 175               	/* frame size = 0 */
 176               	/* stack size = 0 */
 177               	.L__stack_usage = 0
 238:drivers/oled/ssd1306_sh1106.c ****     memset(oled_buffer, 0, sizeof(oled_buffer));
 178               		.loc 1 238 5 view .LVU32
 179 0000 E0E0      		ldi r30,lo8(oled_buffer)
 180 0002 F0E0      		ldi r31,hi8(oled_buffer)
 181 0004 80E0      		ldi r24,0
 182 0006 92E0      		ldi r25,lo8(2)
 183 0008 DF01      		movw r26,r30
 184 000a 9C01      		movw r18,r24
 185               		0:
 186 000c 1D92      		st X+,__zero_reg__
 187 000e 2150      		subi r18,1
 188 0010 3040      		sbci r19,0
 189 0012 01F4      		brne 0b
 239:drivers/oled/ssd1306_sh1106.c ****     oled_cursor = &oled_buffer[0];
 190               		.loc 1 239 5 view .LVU33
 191               		.loc 1 239 17 is_stmt 0 view .LVU34
 192 0014 F093 0000 		sts oled_cursor+1,r31
 193 0018 E093 0000 		sts oled_cursor,r30
 240:drivers/oled/ssd1306_sh1106.c ****     oled_dirty  = OLED_ALL_BLOCKS_MASK;
 194               		.loc 1 240 5 is_stmt 1 view .LVU35
 195               		.loc 1 240 17 is_stmt 0 view .LVU36
 196 001c 8FEF      		ldi r24,lo8(-1)
 197 001e 9FEF      		ldi r25,lo8(-1)
 198 0020 9093 0000 		sts oled_dirty+1,r25
 199 0024 8093 0000 		sts oled_dirty,r24
 200               	/* epilogue start */
 241:drivers/oled/ssd1306_sh1106.c **** }
 201               		.loc 1 241 1 view .LVU37
 202 0028 0895      		ret
 203               		.cfi_endproc
 204               	.LFE10:
 206               		.section	.text.oled_init,"ax",@progbits
 207               	.global	oled_init
 209               	oled_init:
 210               	.LVL17:
 211               	.LFB8:
 163:drivers/oled/ssd1306_sh1106.c **** #if defined(USE_I2C) && defined(SPLIT_KEYBOARD)
 212               		.loc 1 163 42 is_stmt 1 view -0
 213               		.cfi_startproc
 214               	/* prologue: function */
 215               	/* frame size = 0 */
 216               	/* stack size = 0 */
 217               	.L__stack_usage = 0
 170:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 218               		.loc 1 170 5 view .LVU39
 170:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 219               		.loc 1 170 21 is_stmt 0 view .LVU40
 220 0000 0E94 0000 		call oled_init_user
 221               	.LVL18:
 170:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 222               		.loc 1 170 19 view .LVU41
 223 0004 8093 0000 		sts oled_rotation,r24
 171:drivers/oled/ssd1306_sh1106.c ****         oled_rotation_width = OLED_DISPLAY_WIDTH;
 224               		.loc 1 171 5 is_stmt 1 view .LVU42
 171:drivers/oled/ssd1306_sh1106.c ****         oled_rotation_width = OLED_DISPLAY_WIDTH;
 225               		.loc 1 171 8 is_stmt 0 view .LVU43
 226 0008 80FD      		sbrc r24,0
 227 000a 00C0      		rjmp .L8
 172:drivers/oled/ssd1306_sh1106.c ****     } else {
 228               		.loc 1 172 9 is_stmt 1 view .LVU44
 172:drivers/oled/ssd1306_sh1106.c ****     } else {
 229               		.loc 1 172 29 is_stmt 0 view .LVU45
 230 000c 80E8      		ldi r24,lo8(-128)
 231               	.L17:
 174:drivers/oled/ssd1306_sh1106.c ****     }
 232               		.loc 1 174 29 view .LVU46
 233 000e 8093 0000 		sts oled_rotation_width,r24
 176:drivers/oled/ssd1306_sh1106.c **** 
 234               		.loc 1 176 5 is_stmt 1 view .LVU47
 235 0012 0E94 0000 		call i2c_init
 236               	.LVL19:
 178:drivers/oled/ssd1306_sh1106.c ****         I2C_CMD,
 237               		.loc 1 178 5 view .LVU48
 196:drivers/oled/ssd1306_sh1106.c ****         print("oled_init cmd set 1 failed\n");
 238               		.loc 1 196 5 view .LVU49
 196:drivers/oled/ssd1306_sh1106.c ****         print("oled_init cmd set 1 failed\n");
 239               		.loc 1 196 9 is_stmt 0 view .LVU50
 240 0016 6DE0      		ldi r22,lo8(13)
 241 0018 70E0      		ldi r23,0
 242 001a 80E0      		ldi r24,lo8(display_setup1.2103)
 243 001c 90E0      		ldi r25,hi8(display_setup1.2103)
 244 001e 0E94 0000 		call i2c_transmit_P.constprop.2
 245               	.LVL20:
 196:drivers/oled/ssd1306_sh1106.c ****         print("oled_init cmd set 1 failed\n");
 246               		.loc 1 196 8 view .LVU51
 247 0022 892B      		or r24,r25
 248 0024 01F0      		breq .L10
 249               	.L13:
 198:drivers/oled/ssd1306_sh1106.c ****     }
 250               		.loc 1 198 16 view .LVU52
 251 0026 80E0      		ldi r24,0
 252 0028 0895      		ret
 253               	.L8:
 174:drivers/oled/ssd1306_sh1106.c ****     }
 254               		.loc 1 174 9 is_stmt 1 view .LVU53
 174:drivers/oled/ssd1306_sh1106.c ****     }
 255               		.loc 1 174 29 is_stmt 0 view .LVU54
 256 002a 80E2      		ldi r24,lo8(32)
 257 002c 00C0      		rjmp .L17
 258               	.L10:
 201:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, SEGMENT_REMAP_INV, COM_SCAN_DEC};
 259               		.loc 1 201 5 is_stmt 1 view .LVU55
 201:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, SEGMENT_REMAP_INV, COM_SCAN_DEC};
 260               		.loc 1 201 8 is_stmt 0 view .LVU56
 261 002e 8091 0000 		lds r24,oled_rotation
 262               	.LBB6:
 203:drivers/oled/ssd1306_sh1106.c ****             print("oled_init cmd normal rotation failed\n");
 263               		.loc 1 203 13 view .LVU57
 264 0032 63E0      		ldi r22,lo8(3)
 265 0034 70E0      		ldi r23,0
 266               	.LBE6:
 201:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, SEGMENT_REMAP_INV, COM_SCAN_DEC};
 267               		.loc 1 201 8 view .LVU58
 268 0036 81FD      		sbrc r24,1
 269 0038 00C0      		rjmp .L12
 270               	.LBB7:
 202:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_normal) != I2C_STATUS_SUCCESS) {
 271               		.loc 1 202 9 is_stmt 1 view .LVU59
 203:drivers/oled/ssd1306_sh1106.c ****             print("oled_init cmd normal rotation failed\n");
 272               		.loc 1 203 9 view .LVU60
 203:drivers/oled/ssd1306_sh1106.c ****             print("oled_init cmd normal rotation failed\n");
 273               		.loc 1 203 13 is_stmt 0 view .LVU61
 274 003a 80E0      		ldi r24,lo8(display_normal.2104)
 275 003c 90E0      		ldi r25,hi8(display_normal.2104)
 276               	.L18:
 277               	.LBE7:
 278               	.LBB8:
 209:drivers/oled/ssd1306_sh1106.c ****             print("display_flipped failed\n");
 279               		.loc 1 209 13 view .LVU62
 280 003e 0E94 0000 		call i2c_transmit_P.constprop.2
 281               	.LVL21:
 209:drivers/oled/ssd1306_sh1106.c ****             print("display_flipped failed\n");
 282               		.loc 1 209 12 view .LVU63
 283 0042 892B      		or r24,r25
 284 0044 01F4      		brne .L13
 285               	.LBE8:
 215:drivers/oled/ssd1306_sh1106.c ****     if (I2C_TRANSMIT_P(display_setup2) != I2C_STATUS_SUCCESS) {
 286               		.loc 1 215 5 is_stmt 1 view .LVU64
 216:drivers/oled/ssd1306_sh1106.c ****         print("display_setup2 failed\n");
 287               		.loc 1 216 5 view .LVU65
 216:drivers/oled/ssd1306_sh1106.c ****         print("display_setup2 failed\n");
 288               		.loc 1 216 9 is_stmt 0 view .LVU66
 289 0046 6DE0      		ldi r22,lo8(13)
 290 0048 70E0      		ldi r23,0
 291 004a 80E0      		ldi r24,lo8(display_setup2.2106)
 292 004c 90E0      		ldi r25,hi8(display_setup2.2106)
 293 004e 0E94 0000 		call i2c_transmit_P.constprop.2
 294               	.LVL22:
 216:drivers/oled/ssd1306_sh1106.c ****         print("display_setup2 failed\n");
 295               		.loc 1 216 8 view .LVU67
 296 0052 892B      		or r24,r25
 297 0054 01F4      		brne .L13
 222:drivers/oled/ssd1306_sh1106.c **** #endif
 298               		.loc 1 222 5 is_stmt 1 view .LVU68
 222:drivers/oled/ssd1306_sh1106.c **** #endif
 299               		.loc 1 222 20 is_stmt 0 view .LVU69
 300 0056 0E94 0000 		call timer_read32
 301               	.LVL23:
 222:drivers/oled/ssd1306_sh1106.c **** #endif
 302               		.loc 1 222 35 view .LVU70
 303 005a 605A      		subi r22,-96
 304 005c 7541      		sbci r23,21
 305 005e 8F4F      		sbci r24,-1
 306 0060 9F4F      		sbci r25,-1
 222:drivers/oled/ssd1306_sh1106.c **** #endif
 307               		.loc 1 222 18 view .LVU71
 308 0062 6093 0000 		sts oled_timeout,r22
 309 0066 7093 0000 		sts oled_timeout+1,r23
 310 006a 8093 0000 		sts oled_timeout+2,r24
 311 006e 9093 0000 		sts oled_timeout+3,r25
 228:drivers/oled/ssd1306_sh1106.c ****     oled_initialized = true;
 312               		.loc 1 228 5 is_stmt 1 view .LVU72
 313 0072 0E94 0000 		call oled_clear
 314               	.LVL24:
 229:drivers/oled/ssd1306_sh1106.c ****     oled_active      = true;
 315               		.loc 1 229 5 view .LVU73
 229:drivers/oled/ssd1306_sh1106.c ****     oled_active      = true;
 316               		.loc 1 229 22 is_stmt 0 view .LVU74
 317 0076 81E0      		ldi r24,lo8(1)
 318 0078 8093 0000 		sts oled_initialized,r24
 230:drivers/oled/ssd1306_sh1106.c ****     oled_scrolling   = false;
 319               		.loc 1 230 5 is_stmt 1 view .LVU75
 230:drivers/oled/ssd1306_sh1106.c ****     oled_scrolling   = false;
 320               		.loc 1 230 22 is_stmt 0 view .LVU76
 321 007c 8093 0000 		sts oled_active,r24
 231:drivers/oled/ssd1306_sh1106.c ****     return true;
 322               		.loc 1 231 5 is_stmt 1 view .LVU77
 231:drivers/oled/ssd1306_sh1106.c ****     return true;
 323               		.loc 1 231 22 is_stmt 0 view .LVU78
 324 0080 1092 0000 		sts oled_scrolling,__zero_reg__
 232:drivers/oled/ssd1306_sh1106.c **** }
 325               		.loc 1 232 5 is_stmt 1 view .LVU79
 326               	/* epilogue start */
 233:drivers/oled/ssd1306_sh1106.c **** 
 327               		.loc 1 233 1 is_stmt 0 view .LVU80
 328 0084 0895      		ret
 329               	.L12:
 330               	.LBB9:
 208:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_flipped) != I2C_STATUS_SUCCESS) {
 331               		.loc 1 208 9 is_stmt 1 view .LVU81
 209:drivers/oled/ssd1306_sh1106.c ****             print("display_flipped failed\n");
 332               		.loc 1 209 9 view .LVU82
 209:drivers/oled/ssd1306_sh1106.c ****             print("display_flipped failed\n");
 333               		.loc 1 209 13 is_stmt 0 view .LVU83
 334 0086 80E0      		ldi r24,lo8(display_flipped.2105)
 335 0088 90E0      		ldi r25,hi8(display_flipped.2105)
 336 008a 00C0      		rjmp .L18
 337               	.LBE9:
 338               		.cfi_endproc
 339               	.LFE8:
 341               		.section	.text.crot,"ax",@progbits
 342               	.global	crot
 344               	crot:
 345               	.LVL25:
 346               	.LFB13:
 242:drivers/oled/ssd1306_sh1106.c **** 
 243:drivers/oled/ssd1306_sh1106.c **** static void calc_bounds(uint8_t update_start, uint8_t *cmd_array) {
 244:drivers/oled/ssd1306_sh1106.c ****     // Calculate commands to set memory addressing bounds.
 245:drivers/oled/ssd1306_sh1106.c ****     uint8_t start_page   = OLED_BLOCK_SIZE * update_start / OLED_DISPLAY_WIDTH;
 246:drivers/oled/ssd1306_sh1106.c ****     uint8_t start_column = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_WIDTH;
 247:drivers/oled/ssd1306_sh1106.c **** #if (OLED_IC == OLED_IC_SH1106)
 248:drivers/oled/ssd1306_sh1106.c ****     // Commands for Page Addressing Mode. Sets starting page and column; has no end bound.
 249:drivers/oled/ssd1306_sh1106.c ****     // Column value must be split into high and low nybble and sent as two commands.
 250:drivers/oled/ssd1306_sh1106.c ****     cmd_array[0] = PAM_PAGE_ADDR | start_page;
 251:drivers/oled/ssd1306_sh1106.c ****     cmd_array[1] = PAM_SETCOLUMN_LSB | ((OLED_COLUMN_OFFSET + start_column) & 0x0f);
 252:drivers/oled/ssd1306_sh1106.c ****     cmd_array[2] = PAM_SETCOLUMN_MSB | ((OLED_COLUMN_OFFSET + start_column) >> 4 & 0x0f);
 253:drivers/oled/ssd1306_sh1106.c ****     cmd_array[3] = NOP;
 254:drivers/oled/ssd1306_sh1106.c ****     cmd_array[4] = NOP;
 255:drivers/oled/ssd1306_sh1106.c ****     cmd_array[5] = NOP;
 256:drivers/oled/ssd1306_sh1106.c **** #else
 257:drivers/oled/ssd1306_sh1106.c ****     // Commands for use in Horizontal Addressing mode.
 258:drivers/oled/ssd1306_sh1106.c ****     cmd_array[1] = start_column;
 259:drivers/oled/ssd1306_sh1106.c ****     cmd_array[4] = start_page;
 260:drivers/oled/ssd1306_sh1106.c ****     cmd_array[2] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) % OLED_DISPLAY_WIDTH + cmd_array[1];
 261:drivers/oled/ssd1306_sh1106.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) / OLED_DISPLAY_WIDTH - 1;
 262:drivers/oled/ssd1306_sh1106.c **** #endif
 263:drivers/oled/ssd1306_sh1106.c **** }
 264:drivers/oled/ssd1306_sh1106.c **** 
 265:drivers/oled/ssd1306_sh1106.c **** static void calc_bounds_90(uint8_t update_start, uint8_t *cmd_array) {
 266:drivers/oled/ssd1306_sh1106.c ****     cmd_array[1] = OLED_BLOCK_SIZE * update_start / OLED_DISPLAY_HEIGHT * 8;
 267:drivers/oled/ssd1306_sh1106.c ****     cmd_array[4] = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_HEIGHT;
 268:drivers/oled/ssd1306_sh1106.c ****     cmd_array[2] = (OLED_BLOCK_SIZE + OLED_DISPLAY_HEIGHT - 1) / OLED_DISPLAY_HEIGHT * 8 - 1 + cmd_
 269:drivers/oled/ssd1306_sh1106.c ****     ;
 270:drivers/oled/ssd1306_sh1106.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_HEIGHT - 1) % OLED_DISPLAY_HEIGHT / 8;
 271:drivers/oled/ssd1306_sh1106.c **** }
 272:drivers/oled/ssd1306_sh1106.c **** 
 273:drivers/oled/ssd1306_sh1106.c **** uint8_t crot(uint8_t a, int8_t n) {
 347               		.loc 1 273 35 is_stmt 1 view -0
 348               		.cfi_startproc
 349               	/* prologue: function */
 350               	/* frame size = 0 */
 351               	/* stack size = 0 */
 352               	.L__stack_usage = 0
 274:drivers/oled/ssd1306_sh1106.c ****     const uint8_t mask = 0x7;
 353               		.loc 1 274 5 view .LVU85
 275:drivers/oled/ssd1306_sh1106.c ****     n &= mask;
 354               		.loc 1 275 5 view .LVU86
 276:drivers/oled/ssd1306_sh1106.c ****     return a << n | a >> (-n & mask);
 355               		.loc 1 276 5 view .LVU87
 275:drivers/oled/ssd1306_sh1106.c ****     n &= mask;
 356               		.loc 1 275 7 is_stmt 0 view .LVU88
 357 0000 6770      		andi r22,lo8(7)
 358               	.LVL26:
 359               		.loc 1 276 14 view .LVU89
 360 0002 262F      		mov r18,r22
 361 0004 062E      		mov __tmp_reg__,r22
 362 0006 000C      		lsl r0
 363 0008 330B      		sbc r19,r19
 364               		.loc 1 276 19 view .LVU90
 365 000a 982F      		mov r25,r24
 366 000c 00C0      		rjmp 2f
 367               		1:
 368 000e 990F      		lsl r25
 369               		2:
 370 0010 6A95      		dec r22
 371 0012 02F4      		brpl 1b
 372 0014 3195      		neg r19
 373 0016 2195      		neg r18
 374 0018 3109      		sbc r19,__zero_reg__
 375 001a 2770      		andi r18,7
 376 001c 3327      		clr r19
 377 001e 00C0      		rjmp 2f
 378               		1:
 379 0020 8695      		lsr r24
 380               		2:
 381 0022 2A95      		dec r18
 382 0024 02F4      		brpl 1b
 383               	.LVL27:
 277:drivers/oled/ssd1306_sh1106.c **** }
 384               		.loc 1 277 1 view .LVU91
 385 0026 892B      		or r24,r25
 386               	/* epilogue start */
 387 0028 0895      		ret
 388               		.cfi_endproc
 389               	.LFE13:
 391               		.section	.text.oled_set_cursor,"ax",@progbits
 392               	.global	oled_set_cursor
 394               	oled_set_cursor:
 395               	.LVL28:
 396               	.LFB16:
 278:drivers/oled/ssd1306_sh1106.c **** 
 279:drivers/oled/ssd1306_sh1106.c **** static void rotate_90(const uint8_t *src, uint8_t *dest) {
 280:drivers/oled/ssd1306_sh1106.c ****     for (uint8_t i = 0, shift = 7; i < 8; ++i, --shift) {
 281:drivers/oled/ssd1306_sh1106.c ****         uint8_t selector = (1 << i);
 282:drivers/oled/ssd1306_sh1106.c ****         for (uint8_t j = 0; j < 8; ++j) {
 283:drivers/oled/ssd1306_sh1106.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 284:drivers/oled/ssd1306_sh1106.c ****         }
 285:drivers/oled/ssd1306_sh1106.c ****     }
 286:drivers/oled/ssd1306_sh1106.c **** }
 287:drivers/oled/ssd1306_sh1106.c **** 
 288:drivers/oled/ssd1306_sh1106.c **** void oled_render(void) {
 289:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 290:drivers/oled/ssd1306_sh1106.c ****         return;
 291:drivers/oled/ssd1306_sh1106.c ****     }
 292:drivers/oled/ssd1306_sh1106.c **** 
 293:drivers/oled/ssd1306_sh1106.c ****     // Do we have work to do?
 294:drivers/oled/ssd1306_sh1106.c ****     oled_dirty &= OLED_ALL_BLOCKS_MASK;
 295:drivers/oled/ssd1306_sh1106.c ****     if (!oled_dirty || oled_scrolling) {
 296:drivers/oled/ssd1306_sh1106.c ****         return;
 297:drivers/oled/ssd1306_sh1106.c ****     }
 298:drivers/oled/ssd1306_sh1106.c **** 
 299:drivers/oled/ssd1306_sh1106.c ****     // Find first dirty block
 300:drivers/oled/ssd1306_sh1106.c ****     uint8_t update_start = 0;
 301:drivers/oled/ssd1306_sh1106.c ****     while (!(oled_dirty & ((OLED_BLOCK_TYPE)1 << update_start))) {
 302:drivers/oled/ssd1306_sh1106.c ****         ++update_start;
 303:drivers/oled/ssd1306_sh1106.c ****     }
 304:drivers/oled/ssd1306_sh1106.c **** 
 305:drivers/oled/ssd1306_sh1106.c ****     // Set column & page position
 306:drivers/oled/ssd1306_sh1106.c ****     static uint8_t display_start[] = {I2C_CMD, COLUMN_ADDR, 0, OLED_DISPLAY_WIDTH - 1, PAGE_ADDR, 0
 307:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 308:drivers/oled/ssd1306_sh1106.c ****         calc_bounds(update_start, &display_start[1]);  // Offset from I2C_CMD byte at the start
 309:drivers/oled/ssd1306_sh1106.c ****     } else {
 310:drivers/oled/ssd1306_sh1106.c ****         calc_bounds_90(update_start, &display_start[1]);  // Offset from I2C_CMD byte at the start
 311:drivers/oled/ssd1306_sh1106.c ****     }
 312:drivers/oled/ssd1306_sh1106.c **** 
 313:drivers/oled/ssd1306_sh1106.c ****     // Send column & page position
 314:drivers/oled/ssd1306_sh1106.c ****     if (I2C_TRANSMIT(display_start) != I2C_STATUS_SUCCESS) {
 315:drivers/oled/ssd1306_sh1106.c ****         print("oled_render offset command failed\n");
 316:drivers/oled/ssd1306_sh1106.c ****         return;
 317:drivers/oled/ssd1306_sh1106.c ****     }
 318:drivers/oled/ssd1306_sh1106.c **** 
 319:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 320:drivers/oled/ssd1306_sh1106.c ****         // Send render data chunk as is
 321:drivers/oled/ssd1306_sh1106.c ****         if (I2C_WRITE_REG(I2C_DATA, &oled_buffer[OLED_BLOCK_SIZE * update_start], OLED_BLOCK_SIZE) 
 322:drivers/oled/ssd1306_sh1106.c ****             print("oled_render data failed\n");
 323:drivers/oled/ssd1306_sh1106.c ****             return;
 324:drivers/oled/ssd1306_sh1106.c ****         }
 325:drivers/oled/ssd1306_sh1106.c ****     } else {
 326:drivers/oled/ssd1306_sh1106.c ****         // Rotate the render chunks
 327:drivers/oled/ssd1306_sh1106.c ****         const static uint8_t source_map[] = OLED_SOURCE_MAP;
 328:drivers/oled/ssd1306_sh1106.c ****         const static uint8_t target_map[] = OLED_TARGET_MAP;
 329:drivers/oled/ssd1306_sh1106.c **** 
 330:drivers/oled/ssd1306_sh1106.c ****         static uint8_t temp_buffer[OLED_BLOCK_SIZE];
 331:drivers/oled/ssd1306_sh1106.c ****         memset(temp_buffer, 0, sizeof(temp_buffer));
 332:drivers/oled/ssd1306_sh1106.c ****         for (uint8_t i = 0; i < sizeof(source_map); ++i) {
 333:drivers/oled/ssd1306_sh1106.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 334:drivers/oled/ssd1306_sh1106.c ****         }
 335:drivers/oled/ssd1306_sh1106.c **** 
 336:drivers/oled/ssd1306_sh1106.c ****         // Send render data chunk after rotating
 337:drivers/oled/ssd1306_sh1106.c ****         if (I2C_WRITE_REG(I2C_DATA, &temp_buffer[0], OLED_BLOCK_SIZE) != I2C_STATUS_SUCCESS) {
 338:drivers/oled/ssd1306_sh1106.c ****             print("oled_render90 data failed\n");
 339:drivers/oled/ssd1306_sh1106.c ****             return;
 340:drivers/oled/ssd1306_sh1106.c ****         }
 341:drivers/oled/ssd1306_sh1106.c ****     }
 342:drivers/oled/ssd1306_sh1106.c **** 
 343:drivers/oled/ssd1306_sh1106.c ****     // Turn on display if it is off
 344:drivers/oled/ssd1306_sh1106.c ****     oled_on();
 345:drivers/oled/ssd1306_sh1106.c **** 
 346:drivers/oled/ssd1306_sh1106.c ****     // Clear dirty flag
 347:drivers/oled/ssd1306_sh1106.c ****     oled_dirty &= ~((OLED_BLOCK_TYPE)1 << update_start);
 348:drivers/oled/ssd1306_sh1106.c **** }
 349:drivers/oled/ssd1306_sh1106.c **** 
 350:drivers/oled/ssd1306_sh1106.c **** void oled_set_cursor(uint8_t col, uint8_t line) {
 397               		.loc 1 350 49 is_stmt 1 view -0
 398               		.cfi_startproc
 399               	/* prologue: function */
 400               	/* frame size = 0 */
 401               	/* stack size = 0 */
 402               	.L__stack_usage = 0
 351:drivers/oled/ssd1306_sh1106.c ****     uint16_t index = line * oled_rotation_width + col * OLED_FONT_WIDTH;
 403               		.loc 1 351 5 view .LVU93
 404               		.loc 1 351 27 is_stmt 0 view .LVU94
 405 0000 2091 0000 		lds r18,oled_rotation_width
 406               		.loc 1 351 55 view .LVU95
 407 0004 36E0      		ldi r19,lo8(6)
 408 0006 839F      		mul r24,r19
 409 0008 C001      		movw r24,r0
 410 000a 1124      		clr __zero_reg__
 411               	.LVL29:
 412               		.loc 1 351 49 view .LVU96
 413 000c 629F      		mul r22,r18
 414 000e 800D      		add r24,r0
 415 0010 911D      		adc r25,r1
 416 0012 1124      		clr __zero_reg__
 417               	.LVL30:
 352:drivers/oled/ssd1306_sh1106.c **** 
 353:drivers/oled/ssd1306_sh1106.c ****     // Out of bounds?
 354:drivers/oled/ssd1306_sh1106.c ****     if (index >= OLED_MATRIX_SIZE) {
 418               		.loc 1 354 5 is_stmt 1 view .LVU97
 419               		.loc 1 354 8 is_stmt 0 view .LVU98
 420 0014 8115      		cp r24,__zero_reg__
 421 0016 22E0      		ldi r18,2
 422 0018 9207      		cpc r25,r18
 423 001a 04F0      		brlt .L21
 424 001c 90E0      		ldi r25,0
 425 001e 80E0      		ldi r24,0
 426               	.LVL31:
 427               	.L21:
 355:drivers/oled/ssd1306_sh1106.c ****         index = 0;
 356:drivers/oled/ssd1306_sh1106.c ****     }
 357:drivers/oled/ssd1306_sh1106.c **** 
 358:drivers/oled/ssd1306_sh1106.c ****     oled_cursor = &oled_buffer[index];
 428               		.loc 1 358 5 is_stmt 1 view .LVU99
 429               		.loc 1 358 19 is_stmt 0 view .LVU100
 430 0020 8050      		subi r24,lo8(-(oled_buffer))
 431 0022 9040      		sbci r25,hi8(-(oled_buffer))
 432               	.LVL32:
 433               		.loc 1 358 17 view .LVU101
 434 0024 9093 0000 		sts oled_cursor+1,r25
 435 0028 8093 0000 		sts oled_cursor,r24
 436               	/* epilogue start */
 359:drivers/oled/ssd1306_sh1106.c **** }
 437               		.loc 1 359 1 view .LVU102
 438 002c 0895      		ret
 439               		.cfi_endproc
 440               	.LFE16:
 442               		.section	.text.oled_advance_char,"ax",@progbits
 443               	.global	oled_advance_char
 445               	oled_advance_char:
 446               	.LFB18:
 360:drivers/oled/ssd1306_sh1106.c **** 
 361:drivers/oled/ssd1306_sh1106.c **** void oled_advance_page(bool clearPageRemainder) {
 362:drivers/oled/ssd1306_sh1106.c ****     uint16_t index     = oled_cursor - &oled_buffer[0];
 363:drivers/oled/ssd1306_sh1106.c ****     uint8_t  remaining = oled_rotation_width - (index % oled_rotation_width);
 364:drivers/oled/ssd1306_sh1106.c **** 
 365:drivers/oled/ssd1306_sh1106.c ****     if (clearPageRemainder) {
 366:drivers/oled/ssd1306_sh1106.c ****         // Remaining Char count
 367:drivers/oled/ssd1306_sh1106.c ****         remaining = remaining / OLED_FONT_WIDTH;
 368:drivers/oled/ssd1306_sh1106.c **** 
 369:drivers/oled/ssd1306_sh1106.c ****         // Write empty character until next line
 370:drivers/oled/ssd1306_sh1106.c ****         while (remaining--) oled_write_char(' ', false);
 371:drivers/oled/ssd1306_sh1106.c ****     } else {
 372:drivers/oled/ssd1306_sh1106.c ****         // Next page index out of bounds?
 373:drivers/oled/ssd1306_sh1106.c ****         if (index + remaining >= OLED_MATRIX_SIZE) {
 374:drivers/oled/ssd1306_sh1106.c ****             index     = 0;
 375:drivers/oled/ssd1306_sh1106.c ****             remaining = 0;
 376:drivers/oled/ssd1306_sh1106.c ****         }
 377:drivers/oled/ssd1306_sh1106.c **** 
 378:drivers/oled/ssd1306_sh1106.c ****         oled_cursor = &oled_buffer[index + remaining];
 379:drivers/oled/ssd1306_sh1106.c ****     }
 380:drivers/oled/ssd1306_sh1106.c **** }
 381:drivers/oled/ssd1306_sh1106.c **** 
 382:drivers/oled/ssd1306_sh1106.c **** void oled_advance_char(void) {
 447               		.loc 1 382 30 is_stmt 1 view -0
 448               		.cfi_startproc
 449               	/* prologue: function */
 450               	/* frame size = 0 */
 451               	/* stack size = 0 */
 452               	.L__stack_usage = 0
 383:drivers/oled/ssd1306_sh1106.c ****     uint16_t nextIndex      = oled_cursor - &oled_buffer[0] + OLED_FONT_WIDTH;
 453               		.loc 1 383 5 view .LVU104
 454               		.loc 1 383 43 is_stmt 0 view .LVU105
 455 0000 2091 0000 		lds r18,oled_cursor
 456 0004 3091 0000 		lds r19,oled_cursor+1
 457               		.loc 1 383 61 view .LVU106
 458 0008 2050      		subi r18,lo8(oled_buffer-6)
 459 000a 3040      		sbci r19,hi8(oled_buffer-6)
 460               	.LVL33:
 384:drivers/oled/ssd1306_sh1106.c ****     uint8_t  remainingSpace = oled_rotation_width - (nextIndex % oled_rotation_width);
 461               		.loc 1 384 5 is_stmt 1 view .LVU107
 462               		.loc 1 384 51 is_stmt 0 view .LVU108
 463 000c 4091 0000 		lds r20,oled_rotation_width
 464               		.loc 1 384 64 view .LVU109
 465 0010 642F      		mov r22,r20
 466 0012 70E0      		ldi r23,0
 467 0014 C901      		movw r24,r18
 468 0016 0E94 0000 		call __udivmodhi4
 469               		.loc 1 384 14 view .LVU110
 470 001a 481B      		sub r20,r24
 471               	.LVL34:
 385:drivers/oled/ssd1306_sh1106.c **** 
 386:drivers/oled/ssd1306_sh1106.c ****     // Do we have enough space on the current line for the next character
 387:drivers/oled/ssd1306_sh1106.c ****     if (remainingSpace < OLED_FONT_WIDTH) {
 472               		.loc 1 387 5 is_stmt 1 view .LVU111
 473               		.loc 1 387 8 is_stmt 0 view .LVU112
 474 001c 4630      		cpi r20,lo8(6)
 475 001e 00F4      		brsh .L23
 388:drivers/oled/ssd1306_sh1106.c ****         nextIndex += remainingSpace;
 476               		.loc 1 388 9 is_stmt 1 view .LVU113
 477               		.loc 1 388 19 is_stmt 0 view .LVU114
 478 0020 240F      		add r18,r20
 479 0022 311D      		adc r19,__zero_reg__
 480               	.LVL35:
 481               	.L23:
 389:drivers/oled/ssd1306_sh1106.c ****     }
 390:drivers/oled/ssd1306_sh1106.c **** 
 391:drivers/oled/ssd1306_sh1106.c ****     // Did we go out of bounds
 392:drivers/oled/ssd1306_sh1106.c ****     if (nextIndex >= OLED_MATRIX_SIZE) {
 482               		.loc 1 392 5 is_stmt 1 view .LVU115
 483               		.loc 1 392 8 is_stmt 0 view .LVU116
 484 0024 2115      		cp r18,__zero_reg__
 485 0026 82E0      		ldi r24,2
 486 0028 3807      		cpc r19,r24
 487 002a 00F0      		brlo .L24
 393:drivers/oled/ssd1306_sh1106.c ****         nextIndex = 0;
 488               		.loc 1 393 19 view .LVU117
 489 002c 30E0      		ldi r19,0
 490 002e 20E0      		ldi r18,0
 491               	.LVL36:
 492               	.L24:
 394:drivers/oled/ssd1306_sh1106.c ****     }
 395:drivers/oled/ssd1306_sh1106.c **** 
 396:drivers/oled/ssd1306_sh1106.c ****     // Update cursor position
 397:drivers/oled/ssd1306_sh1106.c ****     oled_cursor = &oled_buffer[nextIndex];
 493               		.loc 1 397 5 is_stmt 1 view .LVU118
 494               		.loc 1 397 19 is_stmt 0 view .LVU119
 495 0030 2050      		subi r18,lo8(-(oled_buffer))
 496 0032 3040      		sbci r19,hi8(-(oled_buffer))
 497               	.LVL37:
 498               		.loc 1 397 17 view .LVU120
 499 0034 3093 0000 		sts oled_cursor+1,r19
 500 0038 2093 0000 		sts oled_cursor,r18
 501               	/* epilogue start */
 398:drivers/oled/ssd1306_sh1106.c **** }
 502               		.loc 1 398 1 view .LVU121
 503 003c 0895      		ret
 504               		.cfi_endproc
 505               	.LFE18:
 507               		.section	.text.oled_write_char,"ax",@progbits
 508               	.global	oled_write_char
 510               	oled_write_char:
 511               	.LVL38:
 512               	.LFB19:
 399:drivers/oled/ssd1306_sh1106.c **** 
 400:drivers/oled/ssd1306_sh1106.c **** // Main handler that writes character data to the display buffer
 401:drivers/oled/ssd1306_sh1106.c **** void oled_write_char(const char data, bool invert) {
 513               		.loc 1 401 52 is_stmt 1 view -0
 514               		.cfi_startproc
 515               		.loc 1 401 52 is_stmt 0 view .LVU123
 516 0000 1F93      		push r17
 517               	.LCFI8:
 518               		.cfi_def_cfa_offset 3
 519               		.cfi_offset 17, -2
 520 0002 CF93      		push r28
 521               	.LCFI9:
 522               		.cfi_def_cfa_offset 4
 523               		.cfi_offset 28, -3
 524 0004 DF93      		push r29
 525               	.LCFI10:
 526               		.cfi_def_cfa_offset 5
 527               		.cfi_offset 29, -4
 528               	/* prologue: function */
 529               	/* frame size = 0 */
 530               	/* stack size = 3 */
 531               	.L__stack_usage = 3
 532 0006 162F      		mov r17,r22
 402:drivers/oled/ssd1306_sh1106.c ****     // Advance to the next line if newline
 403:drivers/oled/ssd1306_sh1106.c ****     if (data == '\n') {
 533               		.loc 1 403 5 is_stmt 1 view .LVU124
 534               		.loc 1 403 8 is_stmt 0 view .LVU125
 535 0008 8A30      		cpi r24,lo8(10)
 536 000a 01F4      		brne .L26
 404:drivers/oled/ssd1306_sh1106.c ****         // Old source wrote ' ' until end of line...
 405:drivers/oled/ssd1306_sh1106.c ****         oled_advance_page(true);
 537               		.loc 1 405 9 is_stmt 1 view .LVU126
 538 000c 81E0      		ldi r24,lo8(1)
 539               	.LVL39:
 540               	.L36:
 541               	/* epilogue start */
 406:drivers/oled/ssd1306_sh1106.c ****         return;
 407:drivers/oled/ssd1306_sh1106.c ****     }
 408:drivers/oled/ssd1306_sh1106.c **** 
 409:drivers/oled/ssd1306_sh1106.c ****     if (data == '\r') {
 410:drivers/oled/ssd1306_sh1106.c ****         oled_advance_page(false);
 411:drivers/oled/ssd1306_sh1106.c ****         return;
 412:drivers/oled/ssd1306_sh1106.c ****     }
 413:drivers/oled/ssd1306_sh1106.c **** 
 414:drivers/oled/ssd1306_sh1106.c ****     // copy the current render buffer to check for dirty after
 415:drivers/oled/ssd1306_sh1106.c ****     static uint8_t oled_temp_buffer[OLED_FONT_WIDTH];
 416:drivers/oled/ssd1306_sh1106.c ****     memcpy(&oled_temp_buffer, oled_cursor, OLED_FONT_WIDTH);
 417:drivers/oled/ssd1306_sh1106.c **** 
 418:drivers/oled/ssd1306_sh1106.c ****     _Static_assert(sizeof(font) >= ((OLED_FONT_END + 1 - OLED_FONT_START) * OLED_FONT_WIDTH), "OLED
 419:drivers/oled/ssd1306_sh1106.c **** 
 420:drivers/oled/ssd1306_sh1106.c ****     // set the reder buffer data
 421:drivers/oled/ssd1306_sh1106.c ****     uint8_t cast_data = (uint8_t)data;  // font based on unsigned type for index
 422:drivers/oled/ssd1306_sh1106.c ****     if (cast_data < OLED_FONT_START || cast_data > OLED_FONT_END) {
 423:drivers/oled/ssd1306_sh1106.c ****         memset(oled_cursor, 0x00, OLED_FONT_WIDTH);
 424:drivers/oled/ssd1306_sh1106.c ****     } else {
 425:drivers/oled/ssd1306_sh1106.c ****         const uint8_t *glyph = &font[(cast_data - OLED_FONT_START) * OLED_FONT_WIDTH];
 426:drivers/oled/ssd1306_sh1106.c ****         memcpy_P(oled_cursor, glyph, OLED_FONT_WIDTH);
 427:drivers/oled/ssd1306_sh1106.c ****     }
 428:drivers/oled/ssd1306_sh1106.c **** 
 429:drivers/oled/ssd1306_sh1106.c ****     // Invert if needed
 430:drivers/oled/ssd1306_sh1106.c ****     if (invert) {
 431:drivers/oled/ssd1306_sh1106.c ****         InvertCharacter(oled_cursor);
 432:drivers/oled/ssd1306_sh1106.c ****     }
 433:drivers/oled/ssd1306_sh1106.c **** 
 434:drivers/oled/ssd1306_sh1106.c ****     // Dirty check
 435:drivers/oled/ssd1306_sh1106.c ****     if (memcmp(&oled_temp_buffer, oled_cursor, OLED_FONT_WIDTH)) {
 436:drivers/oled/ssd1306_sh1106.c ****         uint16_t index = oled_cursor - &oled_buffer[0];
 437:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (index / OLED_BLOCK_SIZE));
 438:drivers/oled/ssd1306_sh1106.c ****         // Edgecase check if the written data spans the 2 chunks
 439:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << ((index + OLED_FONT_WIDTH - 1) / OLED_BLOCK_SIZE));
 440:drivers/oled/ssd1306_sh1106.c ****     }
 441:drivers/oled/ssd1306_sh1106.c **** 
 442:drivers/oled/ssd1306_sh1106.c ****     // Finally move to the next char
 443:drivers/oled/ssd1306_sh1106.c ****     oled_advance_char();
 444:drivers/oled/ssd1306_sh1106.c **** }
 542               		.loc 1 444 1 is_stmt 0 view .LVU127
 543 000e DF91      		pop r29
 544 0010 CF91      		pop r28
 545 0012 1F91      		pop r17
 410:drivers/oled/ssd1306_sh1106.c ****         return;
 546               		.loc 1 410 9 view .LVU128
 547 0014 0C94 0000 		jmp oled_advance_page
 548               	.LVL40:
 549               	.L26:
 409:drivers/oled/ssd1306_sh1106.c ****         oled_advance_page(false);
 550               		.loc 1 409 5 is_stmt 1 view .LVU129
 409:drivers/oled/ssd1306_sh1106.c ****         oled_advance_page(false);
 551               		.loc 1 409 8 is_stmt 0 view .LVU130
 552 0018 8D30      		cpi r24,lo8(13)
 553 001a 01F4      		brne .L27
 410:drivers/oled/ssd1306_sh1106.c ****         return;
 554               		.loc 1 410 9 is_stmt 1 view .LVU131
 555 001c 80E0      		ldi r24,0
 556               	.LVL41:
 410:drivers/oled/ssd1306_sh1106.c ****         return;
 557               		.loc 1 410 9 is_stmt 0 view .LVU132
 558 001e 00C0      		rjmp .L36
 559               	.LVL42:
 560               	.L27:
 415:drivers/oled/ssd1306_sh1106.c ****     memcpy(&oled_temp_buffer, oled_cursor, OLED_FONT_WIDTH);
 561               		.loc 1 415 5 is_stmt 1 view .LVU133
 416:drivers/oled/ssd1306_sh1106.c **** 
 562               		.loc 1 416 5 view .LVU134
 563 0020 C091 0000 		lds r28,oled_cursor
 564 0024 D091 0000 		lds r29,oled_cursor+1
 565 0028 96E0      		ldi r25,lo8(6)
 566 002a FE01      		movw r30,r28
 567 002c A0E0      		ldi r26,lo8(oled_temp_buffer.2179)
 568 002e B0E0      		ldi r27,hi8(oled_temp_buffer.2179)
 569               		0:
 570 0030 0190      		ld r0,Z+
 571 0032 0D92      		st X+,r0
 572 0034 9A95      		dec r25
 573 0036 01F4      		brne 0b
 418:drivers/oled/ssd1306_sh1106.c **** 
 574               		.loc 1 418 5 view .LVU135
 421:drivers/oled/ssd1306_sh1106.c ****     if (cast_data < OLED_FONT_START || cast_data > OLED_FONT_END) {
 575               		.loc 1 421 5 view .LVU136
 576               	.LVL43:
 422:drivers/oled/ssd1306_sh1106.c ****         memset(oled_cursor, 0x00, OLED_FONT_WIDTH);
 577               		.loc 1 422 5 view .LVU137
 422:drivers/oled/ssd1306_sh1106.c ****         memset(oled_cursor, 0x00, OLED_FONT_WIDTH);
 578               		.loc 1 422 8 is_stmt 0 view .LVU138
 579 0038 803E      		cpi r24,lo8(-32)
 580 003a 00F0      		brlo .L28
 423:drivers/oled/ssd1306_sh1106.c ****     } else {
 581               		.loc 1 423 9 is_stmt 1 view .LVU139
 582 003c 86E0      		ldi r24,lo8(6)
 583               	.LVL44:
 423:drivers/oled/ssd1306_sh1106.c ****     } else {
 584               		.loc 1 423 9 is_stmt 0 view .LVU140
 585 003e FE01      		movw r30,r28
 586               		0:
 587 0040 1192      		st Z+,__zero_reg__
 588 0042 8A95      		dec r24
 589 0044 01F4      		brne 0b
 590               	.L29:
 430:drivers/oled/ssd1306_sh1106.c ****         InvertCharacter(oled_cursor);
 591               		.loc 1 430 5 is_stmt 1 view .LVU141
 430:drivers/oled/ssd1306_sh1106.c ****         InvertCharacter(oled_cursor);
 592               		.loc 1 430 8 is_stmt 0 view .LVU142
 593 0046 1111      		cpse r17,__zero_reg__
 594 0048 00C0      		rjmp .L30
 595               	.L35:
 435:drivers/oled/ssd1306_sh1106.c ****         uint16_t index = oled_cursor - &oled_buffer[0];
 596               		.loc 1 435 5 is_stmt 1 view .LVU143
 435:drivers/oled/ssd1306_sh1106.c ****         uint16_t index = oled_cursor - &oled_buffer[0];
 597               		.loc 1 435 9 is_stmt 0 view .LVU144
 598 004a C091 0000 		lds r28,oled_cursor
 599 004e D091 0000 		lds r29,oled_cursor+1
 600 0052 46E0      		ldi r20,lo8(6)
 601 0054 50E0      		ldi r21,0
 602 0056 BE01      		movw r22,r28
 603 0058 80E0      		ldi r24,lo8(oled_temp_buffer.2179)
 604 005a 90E0      		ldi r25,hi8(oled_temp_buffer.2179)
 605 005c 0E94 0000 		call memcmp
 606               	.LVL45:
 435:drivers/oled/ssd1306_sh1106.c ****         uint16_t index = oled_cursor - &oled_buffer[0];
 607               		.loc 1 435 8 view .LVU145
 608 0060 892B      		or r24,r25
 609 0062 01F4      		brne .L31
 610               	.L32:
 443:drivers/oled/ssd1306_sh1106.c **** }
 611               		.loc 1 443 5 is_stmt 1 view .LVU146
 612               	/* epilogue start */
 613               		.loc 1 444 1 is_stmt 0 view .LVU147
 614 0064 DF91      		pop r29
 615 0066 CF91      		pop r28
 616 0068 1F91      		pop r17
 617               	.LVL46:
 443:drivers/oled/ssd1306_sh1106.c **** }
 618               		.loc 1 443 5 view .LVU148
 619 006a 0C94 0000 		jmp oled_advance_char
 620               	.LVL47:
 621               	.L28:
 622               	.LBB14:
 425:drivers/oled/ssd1306_sh1106.c ****         memcpy_P(oled_cursor, glyph, OLED_FONT_WIDTH);
 623               		.loc 1 425 9 is_stmt 1 view .LVU149
 426:drivers/oled/ssd1306_sh1106.c ****     }
 624               		.loc 1 426 9 view .LVU150
 425:drivers/oled/ssd1306_sh1106.c ****         memcpy_P(oled_cursor, glyph, OLED_FONT_WIDTH);
 625               		.loc 1 425 68 is_stmt 0 view .LVU151
 626 006e F6E0      		ldi r31,lo8(6)
 627 0070 8F9F      		mul r24,r31
 628 0072 B001      		movw r22,r0
 629 0074 1124      		clr __zero_reg__
 425:drivers/oled/ssd1306_sh1106.c ****         memcpy_P(oled_cursor, glyph, OLED_FONT_WIDTH);
 630               		.loc 1 425 24 view .LVU152
 631 0076 6050      		subi r22,lo8(-(font))
 632 0078 7040      		sbci r23,hi8(-(font))
 426:drivers/oled/ssd1306_sh1106.c ****     }
 633               		.loc 1 426 9 view .LVU153
 634 007a 46E0      		ldi r20,lo8(6)
 635 007c 50E0      		ldi r21,0
 636 007e CE01      		movw r24,r28
 637               	.LVL48:
 426:drivers/oled/ssd1306_sh1106.c ****     }
 638               		.loc 1 426 9 view .LVU154
 639 0080 0E94 0000 		call memcpy_P
 640               	.LVL49:
 641 0084 00C0      		rjmp .L29
 642               	.LVL50:
 643               	.L30:
 426:drivers/oled/ssd1306_sh1106.c ****     }
 644               		.loc 1 426 9 view .LVU155
 645 0086 E091 0000 		lds r30,oled_cursor
 646 008a F091 0000 		lds r31,oled_cursor+1
 647               	.LBE14:
 431:drivers/oled/ssd1306_sh1106.c ****     }
 648               		.loc 1 431 9 is_stmt 1 view .LVU156
 649               	.LVL51:
 650               	.LBB15:
 651               	.LBI15:
 155:drivers/oled/ssd1306_sh1106.c ****     const uint8_t *end = cursor + OLED_FONT_WIDTH;
 652               		.loc 1 155 13 view .LVU157
 653               	.LBB16:
 156:drivers/oled/ssd1306_sh1106.c ****     while (cursor < end) {
 654               		.loc 1 156 5 view .LVU158
 156:drivers/oled/ssd1306_sh1106.c ****     while (cursor < end) {
 655               		.loc 1 156 20 is_stmt 0 view .LVU159
 656 008e 9F01      		movw r18,r30
 657 0090 2A5F      		subi r18,-6
 658 0092 3F4F      		sbci r19,-1
 659               	.LVL52:
 157:drivers/oled/ssd1306_sh1106.c ****         *cursor = ~(*cursor);
 660               		.loc 1 157 5 is_stmt 1 view .LVU160
 661               	.L33:
 157:drivers/oled/ssd1306_sh1106.c ****         *cursor = ~(*cursor);
 662               		.loc 1 157 11 is_stmt 0 view .LVU161
 663 0094 2E17      		cp r18,r30
 664 0096 3F07      		cpc r19,r31
 665 0098 01F0      		breq .L35
 158:drivers/oled/ssd1306_sh1106.c ****         cursor++;
 666               		.loc 1 158 9 is_stmt 1 view .LVU162
 158:drivers/oled/ssd1306_sh1106.c ****         cursor++;
 667               		.loc 1 158 17 is_stmt 0 view .LVU163
 668 009a 8081      		ld r24,Z
 669 009c 8095      		com r24
 670 009e 8193      		st Z+,r24
 671               	.LVL53:
 159:drivers/oled/ssd1306_sh1106.c ****     }
 672               		.loc 1 159 9 is_stmt 1 view .LVU164
 159:drivers/oled/ssd1306_sh1106.c ****     }
 673               		.loc 1 159 9 is_stmt 0 view .LVU165
 674 00a0 00C0      		rjmp .L33
 675               	.LVL54:
 676               	.L31:
 159:drivers/oled/ssd1306_sh1106.c ****     }
 677               		.loc 1 159 9 view .LVU166
 678               	.LBE16:
 679               	.LBE15:
 680               	.LBB17:
 436:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (index / OLED_BLOCK_SIZE));
 681               		.loc 1 436 9 is_stmt 1 view .LVU167
 436:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (index / OLED_BLOCK_SIZE));
 682               		.loc 1 436 38 is_stmt 0 view .LVU168
 683 00a2 C050      		subi r28,lo8(oled_buffer)
 684 00a4 D040      		sbci r29,hi8(oled_buffer)
 685               	.LVL55:
 437:drivers/oled/ssd1306_sh1106.c ****         // Edgecase check if the written data spans the 2 chunks
 686               		.loc 1 437 9 is_stmt 1 view .LVU169
 439:drivers/oled/ssd1306_sh1106.c ****     }
 687               		.loc 1 439 9 view .LVU170
 437:drivers/oled/ssd1306_sh1106.c ****         // Edgecase check if the written data spans the 2 chunks
 688               		.loc 1 437 53 is_stmt 0 view .LVU171
 689 00a6 CE01      		movw r24,r28
 690 00a8 25E0      		ldi r18,5
 691               		1:
 692 00aa 9695      		lsr r25
 693 00ac 8795      		ror r24
 694 00ae 2A95      		dec r18
 695 00b0 01F4      		brne 1b
 437:drivers/oled/ssd1306_sh1106.c ****         // Edgecase check if the written data spans the 2 chunks
 696               		.loc 1 437 43 view .LVU172
 697 00b2 21E0      		ldi r18,lo8(1)
 698 00b4 30E0      		ldi r19,0
 699 00b6 A901      		movw r20,r18
 700 00b8 00C0      		rjmp 2f
 701               		1:
 702 00ba 440F      		lsl r20
 703 00bc 551F      		rol r21
 704               		2:
 705 00be 8A95      		dec r24
 706 00c0 02F4      		brpl 1b
 707 00c2 CA01      		movw r24,r20
 437:drivers/oled/ssd1306_sh1106.c ****         // Edgecase check if the written data spans the 2 chunks
 708               		.loc 1 437 20 view .LVU173
 709 00c4 4091 0000 		lds r20,oled_dirty
 710 00c8 5091 0000 		lds r21,oled_dirty+1
 711 00cc 842B      		or r24,r20
 712 00ce 952B      		or r25,r21
 439:drivers/oled/ssd1306_sh1106.c ****     }
 713               		.loc 1 439 72 view .LVU174
 714 00d0 2596      		adiw r28,5
 715               	.LVL56:
 439:drivers/oled/ssd1306_sh1106.c ****     }
 716               		.loc 1 439 77 view .LVU175
 717 00d2 45E0      		ldi r20,5
 718               		1:
 719 00d4 D695      		lsr r29
 720 00d6 C795      		ror r28
 721 00d8 4A95      		dec r20
 722 00da 01F4      		brne 1b
 723               	.LVL57:
 439:drivers/oled/ssd1306_sh1106.c ****     }
 724               		.loc 1 439 43 view .LVU176
 725 00dc 00C0      		rjmp 2f
 726               		1:
 727 00de 220F      		lsl r18
 728 00e0 331F      		rol r19
 729               		2:
 730 00e2 CA95      		dec r28
 731 00e4 02F4      		brpl 1b
 439:drivers/oled/ssd1306_sh1106.c ****     }
 732               		.loc 1 439 20 view .LVU177
 733 00e6 822B      		or r24,r18
 734 00e8 932B      		or r25,r19
 735 00ea 9093 0000 		sts oled_dirty+1,r25
 736 00ee 8093 0000 		sts oled_dirty,r24
 737 00f2 00C0      		rjmp .L32
 738               	.LBE17:
 739               		.cfi_endproc
 740               	.LFE19:
 742               		.section	.text.oled_advance_page,"ax",@progbits
 743               	.global	oled_advance_page
 745               	oled_advance_page:
 746               	.LVL58:
 747               	.LFB17:
 361:drivers/oled/ssd1306_sh1106.c ****     uint16_t index     = oled_cursor - &oled_buffer[0];
 748               		.loc 1 361 49 is_stmt 1 view -0
 749               		.cfi_startproc
 361:drivers/oled/ssd1306_sh1106.c ****     uint16_t index     = oled_cursor - &oled_buffer[0];
 750               		.loc 1 361 49 is_stmt 0 view .LVU179
 751 0000 CF93      		push r28
 752               	.LCFI11:
 753               		.cfi_def_cfa_offset 3
 754               		.cfi_offset 28, -2
 755               	/* prologue: function */
 756               	/* frame size = 0 */
 757               	/* stack size = 1 */
 758               	.L__stack_usage = 1
 759 0002 382F      		mov r19,r24
 362:drivers/oled/ssd1306_sh1106.c ****     uint8_t  remaining = oled_rotation_width - (index % oled_rotation_width);
 760               		.loc 1 362 5 is_stmt 1 view .LVU180
 362:drivers/oled/ssd1306_sh1106.c ****     uint8_t  remaining = oled_rotation_width - (index % oled_rotation_width);
 761               		.loc 1 362 38 is_stmt 0 view .LVU181
 762 0004 E091 0000 		lds r30,oled_cursor
 763 0008 F091 0000 		lds r31,oled_cursor+1
 764 000c E050      		subi r30,lo8(oled_buffer)
 765 000e F040      		sbci r31,hi8(oled_buffer)
 766               	.LVL59:
 363:drivers/oled/ssd1306_sh1106.c **** 
 767               		.loc 1 363 5 is_stmt 1 view .LVU182
 363:drivers/oled/ssd1306_sh1106.c **** 
 768               		.loc 1 363 46 is_stmt 0 view .LVU183
 769 0010 2091 0000 		lds r18,oled_rotation_width
 363:drivers/oled/ssd1306_sh1106.c **** 
 770               		.loc 1 363 55 view .LVU184
 771 0014 622F      		mov r22,r18
 772 0016 70E0      		ldi r23,0
 773 0018 CF01      		movw r24,r30
 774               	.LVL60:
 363:drivers/oled/ssd1306_sh1106.c **** 
 775               		.loc 1 363 55 view .LVU185
 776 001a 0E94 0000 		call __udivmodhi4
 363:drivers/oled/ssd1306_sh1106.c **** 
 777               		.loc 1 363 14 view .LVU186
 778 001e 281B      		sub r18,r24
 779 0020 822F      		mov r24,r18
 780               	.LVL61:
 365:drivers/oled/ssd1306_sh1106.c ****         // Remaining Char count
 781               		.loc 1 365 5 is_stmt 1 view .LVU187
 365:drivers/oled/ssd1306_sh1106.c ****         // Remaining Char count
 782               		.loc 1 365 8 is_stmt 0 view .LVU188
 783 0022 3323      		tst r19
 784 0024 01F0      		breq .L38
 367:drivers/oled/ssd1306_sh1106.c **** 
 785               		.loc 1 367 9 is_stmt 1 view .LVU189
 367:drivers/oled/ssd1306_sh1106.c **** 
 786               		.loc 1 367 19 is_stmt 0 view .LVU190
 787 0026 66E0      		ldi r22,lo8(6)
 788 0028 0E94 0000 		call __udivmodqi4
 789 002c C82F      		mov r28,r24
 790               	.LVL62:
 370:drivers/oled/ssd1306_sh1106.c ****     } else {
 791               		.loc 1 370 9 is_stmt 1 view .LVU191
 792               	.L39:
 370:drivers/oled/ssd1306_sh1106.c ****     } else {
 793               		.loc 1 370 25 is_stmt 0 discriminator 1 view .LVU192
 794               	.LVL63:
 795 002e C150      		subi r28,1
 796 0030 00F4      		brcc .L40
 797               	.L37:
 798               	/* epilogue start */
 380:drivers/oled/ssd1306_sh1106.c **** 
 799               		.loc 1 380 1 view .LVU193
 800 0032 CF91      		pop r28
 801 0034 0895      		ret
 802               	.LVL64:
 803               	.L40:
 370:drivers/oled/ssd1306_sh1106.c ****     } else {
 804               		.loc 1 370 29 is_stmt 1 discriminator 2 view .LVU194
 805 0036 60E0      		ldi r22,0
 806 0038 80E2      		ldi r24,lo8(32)
 807 003a 0E94 0000 		call oled_write_char
 808               	.LVL65:
 809 003e 00C0      		rjmp .L39
 810               	.LVL66:
 811               	.L38:
 373:drivers/oled/ssd1306_sh1106.c ****             index     = 0;
 812               		.loc 1 373 9 view .LVU195
 373:drivers/oled/ssd1306_sh1106.c ****             index     = 0;
 813               		.loc 1 373 19 is_stmt 0 view .LVU196
 814 0040 9F01      		movw r18,r30
 815               	.LVL67:
 373:drivers/oled/ssd1306_sh1106.c ****             index     = 0;
 816               		.loc 1 373 19 view .LVU197
 817 0042 280F      		add r18,r24
 818 0044 311D      		adc r19,__zero_reg__
 373:drivers/oled/ssd1306_sh1106.c ****             index     = 0;
 819               		.loc 1 373 12 view .LVU198
 820 0046 2115      		cp r18,__zero_reg__
 821 0048 3240      		sbci r19,2
 822 004a 00F0      		brlo .L42
 375:drivers/oled/ssd1306_sh1106.c ****         }
 823               		.loc 1 375 23 view .LVU199
 824 004c 80E0      		ldi r24,0
 825               	.LVL68:
 374:drivers/oled/ssd1306_sh1106.c ****             remaining = 0;
 826               		.loc 1 374 23 view .LVU200
 827 004e F0E0      		ldi r31,0
 828 0050 E0E0      		ldi r30,0
 829               	.LVL69:
 830               	.L42:
 378:drivers/oled/ssd1306_sh1106.c ****     }
 831               		.loc 1 378 9 is_stmt 1 view .LVU201
 378:drivers/oled/ssd1306_sh1106.c ****     }
 832               		.loc 1 378 42 is_stmt 0 view .LVU202
 833 0052 8E0F      		add r24,r30
 834 0054 9F2F      		mov r25,r31
 835 0056 911D      		adc r25,__zero_reg__
 836               	.LVL70:
 378:drivers/oled/ssd1306_sh1106.c ****     }
 837               		.loc 1 378 23 view .LVU203
 838 0058 8050      		subi r24,lo8(-(oled_buffer))
 839 005a 9040      		sbci r25,hi8(-(oled_buffer))
 378:drivers/oled/ssd1306_sh1106.c ****     }
 840               		.loc 1 378 21 view .LVU204
 841 005c 9093 0000 		sts oled_cursor+1,r25
 842 0060 8093 0000 		sts oled_cursor,r24
 380:drivers/oled/ssd1306_sh1106.c **** 
 843               		.loc 1 380 1 view .LVU205
 844 0064 00C0      		rjmp .L37
 845               		.cfi_endproc
 846               	.LFE17:
 848               		.section	.text.oled_write,"ax",@progbits
 849               	.global	oled_write
 851               	oled_write:
 852               	.LVL71:
 853               	.LFB20:
 445:drivers/oled/ssd1306_sh1106.c **** 
 446:drivers/oled/ssd1306_sh1106.c **** void oled_write(const char *data, bool invert) {
 854               		.loc 1 446 48 is_stmt 1 view -0
 855               		.cfi_startproc
 856               		.loc 1 446 48 is_stmt 0 view .LVU207
 857 0000 FF92      		push r15
 858               	.LCFI12:
 859               		.cfi_def_cfa_offset 3
 860               		.cfi_offset 15, -2
 861 0002 0F93      		push r16
 862               	.LCFI13:
 863               		.cfi_def_cfa_offset 4
 864               		.cfi_offset 16, -3
 865 0004 1F93      		push r17
 866               	.LCFI14:
 867               		.cfi_def_cfa_offset 5
 868               		.cfi_offset 17, -4
 869 0006 CF93      		push r28
 870               	.LCFI15:
 871               		.cfi_def_cfa_offset 6
 872               		.cfi_offset 28, -5
 873 0008 DF93      		push r29
 874               	.LCFI16:
 875               		.cfi_def_cfa_offset 7
 876               		.cfi_offset 29, -6
 877               	/* prologue: function */
 878               	/* frame size = 0 */
 879               	/* stack size = 5 */
 880               	.L__stack_usage = 5
 881 000a EC01      		movw r28,r24
 882 000c F62E      		mov r15,r22
 447:drivers/oled/ssd1306_sh1106.c ****     const char *end = data + strlen(data);
 883               		.loc 1 447 5 is_stmt 1 view .LVU208
 884               		.loc 1 447 30 is_stmt 0 view .LVU209
 885 000e FC01      		movw r30,r24
 886               		0:
 887 0010 0190      		ld __tmp_reg__,Z+
 888 0012 0020      		tst __tmp_reg__
 889 0014 01F4      		brne 0b
 890               		.loc 1 447 17 view .LVU210
 891 0016 8F01      		movw r16,r30
 892 0018 0150      		subi r16,1
 893 001a 1109      		sbc r17,__zero_reg__
 894               	.LVL72:
 448:drivers/oled/ssd1306_sh1106.c ****     while (data < end) {
 895               		.loc 1 448 5 is_stmt 1 view .LVU211
 896               	.L44:
 897               		.loc 1 448 11 is_stmt 0 view .LVU212
 898 001c C017      		cp r28,r16
 899 001e D107      		cpc r29,r17
 900 0020 00F0      		brlo .L45
 901               	/* epilogue start */
 449:drivers/oled/ssd1306_sh1106.c ****         oled_write_char(*data, invert);
 450:drivers/oled/ssd1306_sh1106.c ****         data++;
 451:drivers/oled/ssd1306_sh1106.c ****     }
 452:drivers/oled/ssd1306_sh1106.c **** }
 902               		.loc 1 452 1 view .LVU213
 903 0022 DF91      		pop r29
 904 0024 CF91      		pop r28
 905               	.LVL73:
 906               		.loc 1 452 1 view .LVU214
 907 0026 1F91      		pop r17
 908 0028 0F91      		pop r16
 909               	.LVL74:
 910               		.loc 1 452 1 view .LVU215
 911 002a FF90      		pop r15
 912               	.LVL75:
 913               		.loc 1 452 1 view .LVU216
 914 002c 0895      		ret
 915               	.LVL76:
 916               	.L45:
 449:drivers/oled/ssd1306_sh1106.c ****         oled_write_char(*data, invert);
 917               		.loc 1 449 9 is_stmt 1 view .LVU217
 918 002e 6F2D      		mov r22,r15
 919 0030 8991      		ld r24,Y+
 920               	.LVL77:
 449:drivers/oled/ssd1306_sh1106.c ****         oled_write_char(*data, invert);
 921               		.loc 1 449 9 is_stmt 0 view .LVU218
 922 0032 0E94 0000 		call oled_write_char
 923               	.LVL78:
 450:drivers/oled/ssd1306_sh1106.c ****     }
 924               		.loc 1 450 9 is_stmt 1 view .LVU219
 450:drivers/oled/ssd1306_sh1106.c ****     }
 925               		.loc 1 450 9 is_stmt 0 view .LVU220
 926 0036 00C0      		rjmp .L44
 927               		.cfi_endproc
 928               	.LFE20:
 930               		.section	.text.oled_write_ln,"ax",@progbits
 931               	.global	oled_write_ln
 933               	oled_write_ln:
 934               	.LVL79:
 935               	.LFB21:
 453:drivers/oled/ssd1306_sh1106.c **** 
 454:drivers/oled/ssd1306_sh1106.c **** void oled_write_ln(const char *data, bool invert) {
 936               		.loc 1 454 51 is_stmt 1 view -0
 937               		.cfi_startproc
 938               	/* prologue: function */
 939               	/* frame size = 0 */
 940               	/* stack size = 0 */
 941               	.L__stack_usage = 0
 455:drivers/oled/ssd1306_sh1106.c ****     oled_write(data, invert);
 942               		.loc 1 455 5 view .LVU222
 943 0000 0E94 0000 		call oled_write
 944               	.LVL80:
 456:drivers/oled/ssd1306_sh1106.c ****     oled_advance_page(true);
 945               		.loc 1 456 5 view .LVU223
 946 0004 81E0      		ldi r24,lo8(1)
 947 0006 0C94 0000 		jmp oled_advance_page
 948               	.LVL81:
 949               		.cfi_endproc
 950               	.LFE21:
 952               		.section	.text.oled_pan,"ax",@progbits
 953               	.global	oled_pan
 955               	oled_pan:
 956               	.LVL82:
 957               	.LFB22:
 457:drivers/oled/ssd1306_sh1106.c **** }
 458:drivers/oled/ssd1306_sh1106.c **** 
 459:drivers/oled/ssd1306_sh1106.c **** void oled_pan(bool left) {
 958               		.loc 1 459 26 view -0
 959               		.cfi_startproc
 960               	/* prologue: function */
 961               	/* frame size = 0 */
 962               	/* stack size = 0 */
 963               	.L__stack_usage = 0
 460:drivers/oled/ssd1306_sh1106.c ****     uint16_t i = 0;
 964               		.loc 1 460 5 view .LVU225
 461:drivers/oled/ssd1306_sh1106.c ****     for (uint16_t y = 0; y < OLED_DISPLAY_HEIGHT / 8; y++) {
 965               		.loc 1 461 5 view .LVU226
 966               	.LBB18:
 967               		.loc 1 461 10 view .LVU227
 968               		.loc 1 461 10 is_stmt 0 view .LVU228
 969 0000 20E0      		ldi r18,lo8(oled_buffer)
 970 0002 30E0      		ldi r19,hi8(oled_buffer)
 971               	.LVL83:
 972               	.L50:
 462:drivers/oled/ssd1306_sh1106.c ****         if (left) {
 973               		.loc 1 462 9 is_stmt 1 view .LVU229
 974 0004 F901      		movw r30,r18
 975               		.loc 1 462 12 is_stmt 0 view .LVU230
 976 0006 8823      		tst r24
 977 0008 01F0      		breq .L48
 978 000a 4FE7      		ldi r20,lo8(127)
 979 000c 50E0      		ldi r21,0
 980               	.L49:
 981               	.LVL84:
 982               	.LBB19:
 463:drivers/oled/ssd1306_sh1106.c ****             for (uint16_t x = 0; x < OLED_DISPLAY_WIDTH - 1; x++) {
 464:drivers/oled/ssd1306_sh1106.c ****                 i              = y * OLED_DISPLAY_WIDTH + x;
 983               		.loc 1 464 17 is_stmt 1 discriminator 3 view .LVU231
 465:drivers/oled/ssd1306_sh1106.c ****                 oled_buffer[i] = oled_buffer[i + 1];
 984               		.loc 1 465 17 discriminator 3 view .LVU232
 985               		.loc 1 465 32 is_stmt 0 discriminator 3 view .LVU233
 986 000e 9181      		ldd r25,Z+1
 987 0010 9193      		st Z+,r25
 988               	.LVL85:
 989               		.loc 1 465 32 discriminator 3 view .LVU234
 990 0012 4150      		subi r20,1
 991 0014 5109      		sbc r21,__zero_reg__
 463:drivers/oled/ssd1306_sh1106.c ****             for (uint16_t x = 0; x < OLED_DISPLAY_WIDTH - 1; x++) {
 992               		.loc 1 463 13 discriminator 3 view .LVU235
 993 0016 01F4      		brne .L49
 994               	.LVL86:
 995               	.L53:
 463:drivers/oled/ssd1306_sh1106.c ****             for (uint16_t x = 0; x < OLED_DISPLAY_WIDTH - 1; x++) {
 996               		.loc 1 463 13 discriminator 3 view .LVU236
 997 0018 2058      		subi r18,-128
 998 001a 3F4F      		sbci r19,-1
 999               	.LBE19:
 461:drivers/oled/ssd1306_sh1106.c ****         if (left) {
 1000               		.loc 1 461 5 view .LVU237
 1001 001c 90E0      		ldi r25,hi8(oled_buffer+512)
 1002 001e 2030      		cpi r18,lo8(oled_buffer+512)
 1003 0020 3907      		cpc r19,r25
 1004 0022 01F4      		brne .L50
 1005               	.LBE18:
 466:drivers/oled/ssd1306_sh1106.c ****             }
 467:drivers/oled/ssd1306_sh1106.c ****         } else {
 468:drivers/oled/ssd1306_sh1106.c ****             for (uint16_t x = OLED_DISPLAY_WIDTH - 1; x > 0; x--) {
 469:drivers/oled/ssd1306_sh1106.c ****                 i              = y * OLED_DISPLAY_WIDTH + x;
 470:drivers/oled/ssd1306_sh1106.c ****                 oled_buffer[i] = oled_buffer[i - 1];
 471:drivers/oled/ssd1306_sh1106.c ****             }
 472:drivers/oled/ssd1306_sh1106.c ****         }
 473:drivers/oled/ssd1306_sh1106.c ****     }
 474:drivers/oled/ssd1306_sh1106.c ****     oled_dirty = OLED_ALL_BLOCKS_MASK;
 1006               		.loc 1 474 5 is_stmt 1 view .LVU238
 1007               		.loc 1 474 16 is_stmt 0 view .LVU239
 1008 0024 8FEF      		ldi r24,lo8(-1)
 1009 0026 9FEF      		ldi r25,lo8(-1)
 1010               	.LVL87:
 1011               		.loc 1 474 16 view .LVU240
 1012 0028 9093 0000 		sts oled_dirty+1,r25
 1013 002c 8093 0000 		sts oled_dirty,r24
 1014               	/* epilogue start */
 475:drivers/oled/ssd1306_sh1106.c **** }
 1015               		.loc 1 475 1 view .LVU241
 1016 0030 0895      		ret
 1017               	.LVL88:
 1018               	.L48:
 1019               		.loc 1 475 1 view .LVU242
 1020 0032 E158      		subi r30,-127
 1021 0034 FF4F      		sbci r31,-1
 1022               	.L52:
 1023               	.LVL89:
 1024               	.LBB21:
 1025               	.LBB20:
 469:drivers/oled/ssd1306_sh1106.c ****                 oled_buffer[i] = oled_buffer[i - 1];
 1026               		.loc 1 469 17 is_stmt 1 discriminator 3 view .LVU243
 470:drivers/oled/ssd1306_sh1106.c ****             }
 1027               		.loc 1 470 17 discriminator 3 view .LVU244
 470:drivers/oled/ssd1306_sh1106.c ****             }
 1028               		.loc 1 470 45 is_stmt 0 discriminator 3 view .LVU245
 1029 0036 DF01      		movw r26,r30
 1030 0038 9E91      		ld r25,-X
 470:drivers/oled/ssd1306_sh1106.c ****             }
 1031               		.loc 1 470 32 discriminator 3 view .LVU246
 1032 003a 9083      		st Z,r25
 1033               	.LVL90:
 470:drivers/oled/ssd1306_sh1106.c ****             }
 1034               		.loc 1 470 32 discriminator 3 view .LVU247
 1035 003c FD01      		movw r30,r26
 1036               	.LVL91:
 468:drivers/oled/ssd1306_sh1106.c ****                 i              = y * OLED_DISPLAY_WIDTH + x;
 1037               		.loc 1 468 13 discriminator 3 view .LVU248
 1038 003e A217      		cp r26,r18
 1039 0040 B307      		cpc r27,r19
 1040 0042 01F4      		brne .L52
 1041 0044 00C0      		rjmp .L53
 1042               	.LBE20:
 1043               	.LBE21:
 1044               		.cfi_endproc
 1045               	.LFE22:
 1047               		.section	.text.oled_read_raw,"ax",@progbits
 1048               	.global	oled_read_raw
 1050               	oled_read_raw:
 1051               	.LVL92:
 1052               	.LFB23:
 476:drivers/oled/ssd1306_sh1106.c **** 
 477:drivers/oled/ssd1306_sh1106.c **** oled_buffer_reader_t oled_read_raw(uint16_t start_index) {
 1053               		.loc 1 477 58 is_stmt 1 view -0
 1054               		.cfi_startproc
 1055               	/* prologue: function */
 1056               	/* frame size = 0 */
 1057               	/* stack size = 0 */
 1058               	.L__stack_usage = 0
 1059               		.loc 1 477 58 is_stmt 0 view .LVU250
 1060 0000 AC01      		movw r20,r24
 478:drivers/oled/ssd1306_sh1106.c ****     if (start_index > OLED_MATRIX_SIZE) start_index = OLED_MATRIX_SIZE;
 1061               		.loc 1 478 5 is_stmt 1 view .LVU251
 1062 0002 4130      		cpi r20,1
 1063 0004 82E0      		ldi r24,2
 1064 0006 5807      		cpc r21,r24
 1065               	.LVL93:
 1066               		.loc 1 478 5 is_stmt 0 view .LVU252
 1067 0008 00F0      		brlo .L59
 1068 000a 40E0      		ldi r20,0
 1069 000c 52E0      		ldi r21,lo8(2)
 1070               	.LVL94:
 1071               	.L59:
 479:drivers/oled/ssd1306_sh1106.c ****     oled_buffer_reader_t ret_reader;
 1072               		.loc 1 479 5 is_stmt 1 view .LVU253
 480:drivers/oled/ssd1306_sh1106.c ****     ret_reader.current_element         = &oled_buffer[start_index];
 1073               		.loc 1 480 5 view .LVU254
 481:drivers/oled/ssd1306_sh1106.c ****     ret_reader.remaining_element_count = OLED_MATRIX_SIZE - start_index;
 1074               		.loc 1 481 5 view .LVU255
 482:drivers/oled/ssd1306_sh1106.c ****     return ret_reader;
 1075               		.loc 1 482 5 view .LVU256
 1076               		.loc 1 482 12 is_stmt 0 view .LVU257
 1077 000e BA01      		movw r22,r20
 1078 0010 6050      		subi r22,lo8(-(oled_buffer))
 1079 0012 7040      		sbci r23,hi8(-(oled_buffer))
 1080               	.LVL95:
 1081               		.loc 1 482 12 view .LVU258
 1082 0014 20E0      		ldi r18,0
 1083 0016 32E0      		ldi r19,lo8(2)
 1084 0018 C901      		movw r24,r18
 1085 001a 841B      		sub r24,r20
 1086 001c 950B      		sbc r25,r21
 1087               	.LVL96:
 1088               	/* epilogue start */
 483:drivers/oled/ssd1306_sh1106.c **** }
 1089               		.loc 1 483 1 view .LVU259
 1090 001e 0895      		ret
 1091               		.cfi_endproc
 1092               	.LFE23:
 1094               		.section	.text.oled_write_raw_byte,"ax",@progbits
 1095               	.global	oled_write_raw_byte
 1097               	oled_write_raw_byte:
 1098               	.LVL97:
 1099               	.LFB24:
 484:drivers/oled/ssd1306_sh1106.c **** 
 485:drivers/oled/ssd1306_sh1106.c **** void oled_write_raw_byte(const char data, uint16_t index) {
 1100               		.loc 1 485 59 is_stmt 1 view -0
 1101               		.cfi_startproc
 1102               	/* prologue: function */
 1103               	/* frame size = 0 */
 1104               	/* stack size = 0 */
 1105               	.L__stack_usage = 0
 486:drivers/oled/ssd1306_sh1106.c ****     if (index > OLED_MATRIX_SIZE) index = OLED_MATRIX_SIZE;
 1106               		.loc 1 486 5 view .LVU261
 1107 0000 6130      		cpi r22,1
 1108 0002 92E0      		ldi r25,2
 1109 0004 7907      		cpc r23,r25
 1110 0006 00F0      		brlo .L61
 1111 0008 60E0      		ldi r22,0
 1112 000a 72E0      		ldi r23,lo8(2)
 1113               	.LVL98:
 1114               	.L61:
 487:drivers/oled/ssd1306_sh1106.c ****     if (oled_buffer[index] == data) return;
 1115               		.loc 1 487 5 view .LVU262
 1116               		.loc 1 487 20 is_stmt 0 view .LVU263
 1117 000c FB01      		movw r30,r22
 1118 000e E050      		subi r30,lo8(-(oled_buffer))
 1119 0010 F040      		sbci r31,hi8(-(oled_buffer))
 1120               		.loc 1 487 8 view .LVU264
 1121 0012 9081      		ld r25,Z
 1122 0014 9817      		cp r25,r24
 1123 0016 01F0      		breq .L60
 488:drivers/oled/ssd1306_sh1106.c ****     oled_buffer[index] = data;
 1124               		.loc 1 488 5 is_stmt 1 view .LVU265
 1125               		.loc 1 488 24 is_stmt 0 view .LVU266
 1126 0018 8083      		st Z,r24
 489:drivers/oled/ssd1306_sh1106.c ****     oled_dirty |= ((OLED_BLOCK_TYPE)1 << (index / OLED_BLOCK_SIZE));
 1127               		.loc 1 489 5 is_stmt 1 view .LVU267
 1128               		.loc 1 489 49 is_stmt 0 view .LVU268
 1129 001a 85E0      		ldi r24,5
 1130               		1:
 1131 001c 7695      		lsr r23
 1132 001e 6795      		ror r22
 1133 0020 8A95      		dec r24
 1134 0022 01F4      		brne 1b
 1135               	.LVL99:
 1136               		.loc 1 489 39 view .LVU269
 1137 0024 21E0      		ldi r18,lo8(1)
 1138 0026 30E0      		ldi r19,0
 1139 0028 00C0      		rjmp 2f
 1140               		1:
 1141 002a 220F      		lsl r18
 1142 002c 331F      		rol r19
 1143               		2:
 1144 002e 6A95      		dec r22
 1145 0030 02F4      		brpl 1b
 1146               		.loc 1 489 16 view .LVU270
 1147 0032 8091 0000 		lds r24,oled_dirty
 1148 0036 9091 0000 		lds r25,oled_dirty+1
 1149 003a 822B      		or r24,r18
 1150 003c 932B      		or r25,r19
 1151 003e 9093 0000 		sts oled_dirty+1,r25
 1152 0042 8093 0000 		sts oled_dirty,r24
 1153               	.LVL100:
 1154               	.L60:
 1155               	/* epilogue start */
 490:drivers/oled/ssd1306_sh1106.c **** }
 1156               		.loc 1 490 1 view .LVU271
 1157 0046 0895      		ret
 1158               		.cfi_endproc
 1159               	.LFE24:
 1161               		.section	.text.oled_write_raw,"ax",@progbits
 1162               	.global	oled_write_raw
 1164               	oled_write_raw:
 1165               	.LVL101:
 1166               	.LFB25:
 491:drivers/oled/ssd1306_sh1106.c **** 
 492:drivers/oled/ssd1306_sh1106.c **** void oled_write_raw(const char *data, uint16_t size) {
 1167               		.loc 1 492 54 is_stmt 1 view -0
 1168               		.cfi_startproc
 1169               	/* prologue: function */
 1170               	/* frame size = 0 */
 1171               	/* stack size = 0 */
 1172               	.L__stack_usage = 0
 493:drivers/oled/ssd1306_sh1106.c ****     uint16_t cursor_start_index = oled_cursor - &oled_buffer[0];
 1173               		.loc 1 493 5 view .LVU273
 1174               		.loc 1 493 47 is_stmt 0 view .LVU274
 1175 0000 2091 0000 		lds r18,oled_cursor
 1176 0004 3091 0000 		lds r19,oled_cursor+1
 1177 0008 2050      		subi r18,lo8(oled_buffer)
 1178 000a 3040      		sbci r19,hi8(oled_buffer)
 1179               	.LVL102:
 494:drivers/oled/ssd1306_sh1106.c ****     if ((size + cursor_start_index) > OLED_MATRIX_SIZE) size = OLED_MATRIX_SIZE - cursor_start_inde
 1180               		.loc 1 494 5 is_stmt 1 view .LVU275
 1181               		.loc 1 494 15 is_stmt 0 view .LVU276
 1182 000c A901      		movw r20,r18
 1183 000e 460F      		add r20,r22
 1184 0010 571F      		adc r21,r23
 1185               		.loc 1 494 8 view .LVU277
 1186 0012 4130      		cpi r20,1
 1187 0014 5240      		sbci r21,2
 1188 0016 00F0      		brlo .L64
 1189               		.loc 1 494 57 is_stmt 1 discriminator 1 view .LVU278
 1190               		.loc 1 494 62 is_stmt 0 discriminator 1 view .LVU279
 1191 0018 60E0      		ldi r22,0
 1192 001a 72E0      		ldi r23,lo8(2)
 1193               	.LVL103:
 1194               		.loc 1 494 62 discriminator 1 view .LVU280
 1195 001c 621B      		sub r22,r18
 1196 001e 730B      		sbc r23,r19
 1197               	.LVL104:
 1198               	.L64:
 495:drivers/oled/ssd1306_sh1106.c ****     for (uint16_t i = cursor_start_index; i < cursor_start_index + size; i++) {
 1199               		.loc 1 495 5 is_stmt 1 view .LVU281
 1200               	.LBB22:
 1201               		.loc 1 495 10 view .LVU282
 1202               		.loc 1 495 66 is_stmt 0 view .LVU283
 1203 0020 620F      		add r22,r18
 1204 0022 731F      		adc r23,r19
 1205               	.LVL105:
 1206               	.LBB23:
 496:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = *data++;
 497:drivers/oled/ssd1306_sh1106.c ****         if (oled_buffer[i] == c) continue;
 498:drivers/oled/ssd1306_sh1106.c ****         oled_buffer[i] = c;
 499:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (i / OLED_BLOCK_SIZE));
 1207               		.loc 1 499 43 view .LVU284
 1208 0024 41E0      		ldi r20,lo8(1)
 1209 0026 50E0      		ldi r21,0
 1210               	.LVL106:
 1211               	.L65:
 1212               		.loc 1 499 43 view .LVU285
 1213               	.LBE23:
 495:drivers/oled/ssd1306_sh1106.c ****     for (uint16_t i = cursor_start_index; i < cursor_start_index + size; i++) {
 1214               		.loc 1 495 5 discriminator 1 view .LVU286
 1215 0028 2617      		cp r18,r22
 1216 002a 3707      		cpc r19,r23
 1217 002c 00F0      		brlo .L67
 1218               	/* epilogue start */
 495:drivers/oled/ssd1306_sh1106.c ****     for (uint16_t i = cursor_start_index; i < cursor_start_index + size; i++) {
 1219               		.loc 1 495 5 discriminator 1 view .LVU287
 1220               	.LBE22:
 500:drivers/oled/ssd1306_sh1106.c ****     }
 501:drivers/oled/ssd1306_sh1106.c **** }
 1221               		.loc 1 501 1 view .LVU288
 1222 002e 0895      		ret
 1223               	.L67:
 1224               	.LBB26:
 1225               	.LBB24:
 496:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = *data++;
 1226               		.loc 1 496 9 is_stmt 1 view .LVU289
 496:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = *data++;
 1227               		.loc 1 496 26 is_stmt 0 view .LVU290
 1228 0030 FC01      		movw r30,r24
 1229               	.LVL107:
 496:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = *data++;
 1230               		.loc 1 496 17 view .LVU291
 1231 0032 8191      		ld r24,Z+
 1232               	.LVL108:
 497:drivers/oled/ssd1306_sh1106.c ****         oled_buffer[i] = c;
 1233               		.loc 1 497 9 is_stmt 1 view .LVU292
 1234 0034 D901      		movw r26,r18
 1235 0036 A050      		subi r26,lo8(-(oled_buffer))
 1236 0038 B040      		sbci r27,hi8(-(oled_buffer))
 497:drivers/oled/ssd1306_sh1106.c ****         oled_buffer[i] = c;
 1237               		.loc 1 497 12 is_stmt 0 view .LVU293
 1238 003a 9C91      		ld r25,X
 1239 003c 9817      		cp r25,r24
 1240 003e 01F0      		breq .L66
 498:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (i / OLED_BLOCK_SIZE));
 1241               		.loc 1 498 9 is_stmt 1 view .LVU294
 498:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (i / OLED_BLOCK_SIZE));
 1242               		.loc 1 498 24 is_stmt 0 view .LVU295
 1243 0040 8C93      		st X,r24
 499:drivers/oled/ssd1306_sh1106.c ****     }
 1244               		.loc 1 499 9 is_stmt 1 view .LVU296
 499:drivers/oled/ssd1306_sh1106.c ****     }
 1245               		.loc 1 499 49 is_stmt 0 view .LVU297
 1246 0042 C901      		movw r24,r18
 1247               	.LVL109:
 499:drivers/oled/ssd1306_sh1106.c ****     }
 1248               		.loc 1 499 49 view .LVU298
 1249 0044 A5E0      		ldi r26,5
 1250               		1:
 1251 0046 9695      		lsr r25
 1252 0048 8795      		ror r24
 1253 004a AA95      		dec r26
 1254 004c 01F4      		brne 1b
 1255               	.LVL110:
 499:drivers/oled/ssd1306_sh1106.c ****     }
 1256               		.loc 1 499 43 view .LVU299
 1257 004e DA01      		movw r26,r20
 1258 0050 00C0      		rjmp 2f
 1259               		1:
 1260 0052 AA0F      		lsl r26
 1261 0054 BB1F      		rol r27
 1262               		2:
 1263 0056 8A95      		dec r24
 1264 0058 02F4      		brpl 1b
 499:drivers/oled/ssd1306_sh1106.c ****     }
 1265               		.loc 1 499 20 view .LVU300
 1266 005a 8091 0000 		lds r24,oled_dirty
 1267 005e 9091 0000 		lds r25,oled_dirty+1
 1268 0062 8A2B      		or r24,r26
 1269 0064 9B2B      		or r25,r27
 1270 0066 9093 0000 		sts oled_dirty+1,r25
 1271 006a 8093 0000 		sts oled_dirty,r24
 1272               	.LVL111:
 1273               	.L66:
 499:drivers/oled/ssd1306_sh1106.c ****     }
 1274               		.loc 1 499 20 view .LVU301
 1275               	.LBE24:
 495:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = *data++;
 1276               		.loc 1 495 75 discriminator 2 view .LVU302
 1277 006e 2F5F      		subi r18,-1
 1278 0070 3F4F      		sbci r19,-1
 1279               	.LVL112:
 1280               	.LBB25:
 496:drivers/oled/ssd1306_sh1106.c ****         if (oled_buffer[i] == c) continue;
 1281               		.loc 1 496 26 discriminator 2 view .LVU303
 1282 0072 CF01      		movw r24,r30
 1283 0074 00C0      		rjmp .L65
 1284               	.LBE25:
 1285               	.LBE26:
 1286               		.cfi_endproc
 1287               	.LFE25:
 1289               		.section	.text.oled_write_pixel,"ax",@progbits
 1290               	.global	oled_write_pixel
 1292               	oled_write_pixel:
 1293               	.LVL113:
 1294               	.LFB26:
 502:drivers/oled/ssd1306_sh1106.c **** 
 503:drivers/oled/ssd1306_sh1106.c **** void oled_write_pixel(uint8_t x, uint8_t y, bool on) {
 1295               		.loc 1 503 54 is_stmt 1 view -0
 1296               		.cfi_startproc
 1297               	/* prologue: function */
 1298               	/* frame size = 0 */
 1299               	/* stack size = 0 */
 1300               	.L__stack_usage = 0
 504:drivers/oled/ssd1306_sh1106.c ****     if (x >= oled_rotation_width) {
 1301               		.loc 1 504 5 view .LVU305
 1302               		.loc 1 504 11 is_stmt 0 view .LVU306
 1303 0000 3091 0000 		lds r19,oled_rotation_width
 1304               		.loc 1 504 8 view .LVU307
 1305 0004 8317      		cp r24,r19
 1306 0006 00F4      		brsh .L68
 505:drivers/oled/ssd1306_sh1106.c ****         return;
 506:drivers/oled/ssd1306_sh1106.c ****     }
 507:drivers/oled/ssd1306_sh1106.c ****     uint16_t index = x + (y / 8) * oled_rotation_width;
 1307               		.loc 1 507 5 is_stmt 1 view .LVU308
 1308               		.loc 1 507 24 is_stmt 0 view .LVU309
 1309 0008 90E0      		ldi r25,0
 1310 000a 262F      		mov r18,r22
 1311 000c 2695      		lsr r18
 1312 000e 2695      		lsr r18
 1313 0010 2695      		lsr r18
 1314 0012 239F      		mul r18,r19
 1315 0014 800D      		add r24,r0
 1316 0016 911D      		adc r25,r1
 1317 0018 1124      		clr __zero_reg__
 1318               	.LVL114:
 508:drivers/oled/ssd1306_sh1106.c ****     if (index >= OLED_MATRIX_SIZE) {
 1319               		.loc 1 508 5 is_stmt 1 view .LVU310
 1320               		.loc 1 508 8 is_stmt 0 view .LVU311
 1321 001a 8115      		cp r24,__zero_reg__
 1322 001c 22E0      		ldi r18,2
 1323 001e 9207      		cpc r25,r18
 1324 0020 04F4      		brge .L68
 509:drivers/oled/ssd1306_sh1106.c ****         return;
 510:drivers/oled/ssd1306_sh1106.c ****     }
 511:drivers/oled/ssd1306_sh1106.c ****     uint8_t data = oled_buffer[index];
 1325               		.loc 1 511 5 is_stmt 1 view .LVU312
 1326               		.loc 1 511 13 is_stmt 0 view .LVU313
 1327 0022 FC01      		movw r30,r24
 1328 0024 E050      		subi r30,lo8(-(oled_buffer))
 1329 0026 F040      		sbci r31,hi8(-(oled_buffer))
 1330 0028 5081      		ld r21,Z
 1331               	.LVL115:
 512:drivers/oled/ssd1306_sh1106.c ****     if (on) {
 1332               		.loc 1 512 5 is_stmt 1 view .LVU314
 1333 002a 6770      		andi r22,lo8(7)
 1334               	.LVL116:
 1335               		.loc 1 512 5 is_stmt 0 view .LVU315
 1336 002c 21E0      		ldi r18,lo8(1)
 1337 002e 30E0      		ldi r19,0
 1338 0030 00C0      		rjmp 2f
 1339               		1:
 1340 0032 220F      		lsl r18
 1341               		2:
 1342 0034 6A95      		dec r22
 1343 0036 02F4      		brpl 1b
 1344               		.loc 1 512 8 view .LVU316
 1345 0038 4423      		tst r20
 1346 003a 01F0      		breq .L70
 513:drivers/oled/ssd1306_sh1106.c ****         data |= (1 << (y % 8));
 1347               		.loc 1 513 9 is_stmt 1 view .LVU317
 1348               		.loc 1 513 14 is_stmt 0 view .LVU318
 1349 003c 252B      		or r18,r21
 1350               	.LVL117:
 1351               	.L71:
 514:drivers/oled/ssd1306_sh1106.c ****     } else {
 515:drivers/oled/ssd1306_sh1106.c ****         data &= ~(1 << (y % 8));
 516:drivers/oled/ssd1306_sh1106.c ****     }
 517:drivers/oled/ssd1306_sh1106.c ****     if (oled_buffer[index] != data) {
 1352               		.loc 1 517 5 is_stmt 1 view .LVU319
 1353               		.loc 1 517 8 is_stmt 0 view .LVU320
 1354 003e 2517      		cp r18,r21
 1355 0040 01F0      		breq .L68
 518:drivers/oled/ssd1306_sh1106.c ****         oled_buffer[index] = data;
 1356               		.loc 1 518 9 is_stmt 1 view .LVU321
 1357               		.loc 1 518 28 is_stmt 0 view .LVU322
 1358 0042 2083      		st Z,r18
 519:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (index / OLED_BLOCK_SIZE));
 1359               		.loc 1 519 9 is_stmt 1 view .LVU323
 1360               		.loc 1 519 53 is_stmt 0 view .LVU324
 1361 0044 25E0      		ldi r18,5
 1362               		1:
 1363 0046 9695      		lsr r25
 1364 0048 8795      		ror r24
 1365 004a 2A95      		dec r18
 1366 004c 01F4      		brne 1b
 1367               	.LVL118:
 1368               		.loc 1 519 43 view .LVU325
 1369 004e 21E0      		ldi r18,lo8(1)
 1370 0050 30E0      		ldi r19,0
 1371 0052 00C0      		rjmp 2f
 1372               		1:
 1373 0054 220F      		lsl r18
 1374 0056 331F      		rol r19
 1375               		2:
 1376 0058 8A95      		dec r24
 1377 005a 02F4      		brpl 1b
 1378               		.loc 1 519 20 view .LVU326
 1379 005c 8091 0000 		lds r24,oled_dirty
 1380 0060 9091 0000 		lds r25,oled_dirty+1
 1381 0064 822B      		or r24,r18
 1382 0066 932B      		or r25,r19
 1383 0068 9093 0000 		sts oled_dirty+1,r25
 1384 006c 8093 0000 		sts oled_dirty,r24
 1385               	.LVL119:
 1386               	.L68:
 1387               	/* epilogue start */
 520:drivers/oled/ssd1306_sh1106.c ****     }
 521:drivers/oled/ssd1306_sh1106.c **** }
 1388               		.loc 1 521 1 view .LVU327
 1389 0070 0895      		ret
 1390               	.LVL120:
 1391               	.L70:
 515:drivers/oled/ssd1306_sh1106.c ****     }
 1392               		.loc 1 515 9 is_stmt 1 view .LVU328
 515:drivers/oled/ssd1306_sh1106.c ****     }
 1393               		.loc 1 515 14 is_stmt 0 view .LVU329
 1394 0072 2095      		com r18
 1395 0074 2523      		and r18,r21
 1396               	.LVL121:
 515:drivers/oled/ssd1306_sh1106.c ****     }
 1397               		.loc 1 515 14 view .LVU330
 1398 0076 00C0      		rjmp .L71
 1399               		.cfi_endproc
 1400               	.LFE26:
 1402               		.section	.text.oled_write_P,"ax",@progbits
 1403               	.global	oled_write_P
 1405               	oled_write_P:
 1406               	.LVL122:
 1407               	.LFB27:
 522:drivers/oled/ssd1306_sh1106.c **** 
 523:drivers/oled/ssd1306_sh1106.c **** #if defined(__AVR__)
 524:drivers/oled/ssd1306_sh1106.c **** void oled_write_P(const char *data, bool invert) {
 1408               		.loc 1 524 50 is_stmt 1 view -0
 1409               		.cfi_startproc
 1410               		.loc 1 524 50 is_stmt 0 view .LVU332
 1411 0000 1F93      		push r17
 1412               	.LCFI17:
 1413               		.cfi_def_cfa_offset 3
 1414               		.cfi_offset 17, -2
 1415 0002 CF93      		push r28
 1416               	.LCFI18:
 1417               		.cfi_def_cfa_offset 4
 1418               		.cfi_offset 28, -3
 1419 0004 DF93      		push r29
 1420               	.LCFI19:
 1421               		.cfi_def_cfa_offset 5
 1422               		.cfi_offset 29, -4
 1423               	/* prologue: function */
 1424               	/* frame size = 0 */
 1425               	/* stack size = 3 */
 1426               	.L__stack_usage = 3
 1427 0006 EC01      		movw r28,r24
 1428 0008 162F      		mov r17,r22
 1429               	.LVL123:
 1430               	.L75:
 1431               	.LBB27:
 525:drivers/oled/ssd1306_sh1106.c ****     uint8_t c = pgm_read_byte(data);
 526:drivers/oled/ssd1306_sh1106.c ****     while (c != 0) {
 527:drivers/oled/ssd1306_sh1106.c ****         oled_write_char(c, invert);
 528:drivers/oled/ssd1306_sh1106.c ****         c = pgm_read_byte(++data);
 1432               		.loc 1 528 13 is_stmt 1 view .LVU333
 1433               		.loc 1 528 13 view .LVU334
 1434 000a FE01      		movw r30,r28
 1435               	/* #APP */
 1436               	 ;  528 "drivers/oled/ssd1306_sh1106.c" 1
 1437 000c 8491      		lpm r24, Z
 1438               		
 1439               	 ;  0 "" 2
 1440               	.LVL124:
 1441               		.loc 1 528 13 view .LVU335
 1442               		.loc 1 528 13 is_stmt 0 view .LVU336
 1443               	/* #NOAPP */
 1444               	.LBE27:
 526:drivers/oled/ssd1306_sh1106.c ****         oled_write_char(c, invert);
 1445               		.loc 1 526 11 view .LVU337
 1446 000e 8111      		cpse r24,__zero_reg__
 1447 0010 00C0      		rjmp .L74
 1448               	/* epilogue start */
 529:drivers/oled/ssd1306_sh1106.c ****     }
 530:drivers/oled/ssd1306_sh1106.c **** }
 1449               		.loc 1 530 1 view .LVU338
 1450 0012 DF91      		pop r29
 1451 0014 CF91      		pop r28
 1452               	.LVL125:
 1453               		.loc 1 530 1 view .LVU339
 1454 0016 1F91      		pop r17
 1455               	.LVL126:
 1456               		.loc 1 530 1 view .LVU340
 1457 0018 0895      		ret
 1458               	.LVL127:
 1459               	.L74:
 527:drivers/oled/ssd1306_sh1106.c ****         c = pgm_read_byte(++data);
 1460               		.loc 1 527 9 is_stmt 1 view .LVU341
 1461 001a 612F      		mov r22,r17
 1462 001c 0E94 0000 		call oled_write_char
 1463               	.LVL128:
 528:drivers/oled/ssd1306_sh1106.c ****     }
 1464               		.loc 1 528 9 view .LVU342
 1465               	.LBB28:
 528:drivers/oled/ssd1306_sh1106.c ****     }
 1466               		.loc 1 528 13 view .LVU343
 1467 0020 2196      		adiw r28,1
 1468               	.LVL129:
 528:drivers/oled/ssd1306_sh1106.c ****     }
 1469               		.loc 1 528 13 is_stmt 0 view .LVU344
 1470 0022 00C0      		rjmp .L75
 1471               	.LBE28:
 1472               		.cfi_endproc
 1473               	.LFE27:
 1475               		.section	.text.oled_write_ln_P,"ax",@progbits
 1476               	.global	oled_write_ln_P
 1478               	oled_write_ln_P:
 1479               	.LVL130:
 1480               	.LFB28:
 531:drivers/oled/ssd1306_sh1106.c **** 
 532:drivers/oled/ssd1306_sh1106.c **** void oled_write_ln_P(const char *data, bool invert) {
 1481               		.loc 1 532 53 is_stmt 1 view -0
 1482               		.cfi_startproc
 1483               	/* prologue: function */
 1484               	/* frame size = 0 */
 1485               	/* stack size = 0 */
 1486               	.L__stack_usage = 0
 533:drivers/oled/ssd1306_sh1106.c ****     oled_write_P(data, invert);
 1487               		.loc 1 533 5 view .LVU346
 1488 0000 0E94 0000 		call oled_write_P
 1489               	.LVL131:
 534:drivers/oled/ssd1306_sh1106.c ****     oled_advance_page(true);
 1490               		.loc 1 534 5 view .LVU347
 1491 0004 81E0      		ldi r24,lo8(1)
 1492 0006 0C94 0000 		jmp oled_advance_page
 1493               	.LVL132:
 1494               		.cfi_endproc
 1495               	.LFE28:
 1497               		.section	.text.oled_write_raw_P,"ax",@progbits
 1498               	.global	oled_write_raw_P
 1500               	oled_write_raw_P:
 1501               	.LVL133:
 1502               	.LFB29:
 535:drivers/oled/ssd1306_sh1106.c **** }
 536:drivers/oled/ssd1306_sh1106.c **** 
 537:drivers/oled/ssd1306_sh1106.c **** void oled_write_raw_P(const char *data, uint16_t size) {
 1503               		.loc 1 537 56 view -0
 1504               		.cfi_startproc
 1505               		.loc 1 537 56 is_stmt 0 view .LVU349
 1506 0000 CF93      		push r28
 1507               	.LCFI20:
 1508               		.cfi_def_cfa_offset 3
 1509               		.cfi_offset 28, -2
 1510 0002 DF93      		push r29
 1511               	.LCFI21:
 1512               		.cfi_def_cfa_offset 4
 1513               		.cfi_offset 29, -3
 1514               	/* prologue: function */
 1515               	/* frame size = 0 */
 1516               	/* stack size = 2 */
 1517               	.L__stack_usage = 2
 538:drivers/oled/ssd1306_sh1106.c ****     uint16_t cursor_start_index = oled_cursor - &oled_buffer[0];
 1518               		.loc 1 538 5 is_stmt 1 view .LVU350
 1519               		.loc 1 538 47 is_stmt 0 view .LVU351
 1520 0004 2091 0000 		lds r18,oled_cursor
 1521 0008 3091 0000 		lds r19,oled_cursor+1
 1522 000c 2050      		subi r18,lo8(oled_buffer)
 1523 000e 3040      		sbci r19,hi8(oled_buffer)
 1524               	.LVL134:
 539:drivers/oled/ssd1306_sh1106.c ****     if ((size + cursor_start_index) > OLED_MATRIX_SIZE) size = OLED_MATRIX_SIZE - cursor_start_inde
 1525               		.loc 1 539 5 is_stmt 1 view .LVU352
 1526               		.loc 1 539 15 is_stmt 0 view .LVU353
 1527 0010 A901      		movw r20,r18
 1528 0012 460F      		add r20,r22
 1529 0014 571F      		adc r21,r23
 1530               		.loc 1 539 8 view .LVU354
 1531 0016 4130      		cpi r20,1
 1532 0018 5240      		sbci r21,2
 1533 001a 00F0      		brlo .L78
 1534               		.loc 1 539 57 is_stmt 1 discriminator 1 view .LVU355
 1535               		.loc 1 539 62 is_stmt 0 discriminator 1 view .LVU356
 1536 001c 60E0      		ldi r22,0
 1537 001e 72E0      		ldi r23,lo8(2)
 1538               	.LVL135:
 1539               		.loc 1 539 62 discriminator 1 view .LVU357
 1540 0020 621B      		sub r22,r18
 1541 0022 730B      		sbc r23,r19
 1542               	.LVL136:
 1543               	.L78:
 540:drivers/oled/ssd1306_sh1106.c ****     for (uint16_t i = cursor_start_index; i < cursor_start_index + size; i++) {
 1544               		.loc 1 540 5 is_stmt 1 view .LVU358
 1545               	.LBB29:
 1546               		.loc 1 540 10 view .LVU359
 1547               		.loc 1 540 10 is_stmt 0 view .LVU360
 1548 0024 4091 0000 		lds r20,oled_dirty
 1549 0028 5091 0000 		lds r21,oled_dirty+1
 1550 002c FC01      		movw r30,r24
 1551               		.loc 1 540 19 view .LVU361
 1552 002e C901      		movw r24,r18
 1553               	.LVL137:
 1554               		.loc 1 540 66 view .LVU362
 1555 0030 620F      		add r22,r18
 1556 0032 731F      		adc r23,r19
 1557               	.LVL138:
 1558               	.LBB30:
 541:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 542:drivers/oled/ssd1306_sh1106.c ****         if (oled_buffer[i] == c) continue;
 543:drivers/oled/ssd1306_sh1106.c ****         oled_buffer[i] = c;
 544:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (i / OLED_BLOCK_SIZE));
 1559               		.loc 1 544 43 view .LVU363
 1560 0034 C1E0      		ldi r28,lo8(1)
 1561 0036 D0E0      		ldi r29,0
 1562               	.LVL139:
 1563               	.L79:
 1564               		.loc 1 544 43 view .LVU364
 1565               	.LBE30:
 540:drivers/oled/ssd1306_sh1106.c ****     for (uint16_t i = cursor_start_index; i < cursor_start_index + size; i++) {
 1566               		.loc 1 540 5 discriminator 1 view .LVU365
 1567 0038 8617      		cp r24,r22
 1568 003a 9707      		cpc r25,r23
 1569 003c 00F0      		brlo .L81
 540:drivers/oled/ssd1306_sh1106.c ****     for (uint16_t i = cursor_start_index; i < cursor_start_index + size; i++) {
 1570               		.loc 1 540 5 discriminator 1 view .LVU366
 1571 003e 5093 0000 		sts oled_dirty+1,r21
 1572 0042 4093 0000 		sts oled_dirty,r20
 1573               	/* epilogue start */
 1574               	.LBE29:
 545:drivers/oled/ssd1306_sh1106.c ****     }
 546:drivers/oled/ssd1306_sh1106.c **** }
 1575               		.loc 1 546 1 view .LVU367
 1576 0046 DF91      		pop r29
 1577 0048 CF91      		pop r28
 1578 004a 0895      		ret
 1579               	.L81:
 1580               	.LBB33:
 1581               	.LBB32:
 541:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 1582               		.loc 1 541 9 is_stmt 1 view .LVU368
 1583               	.LBB31:
 541:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 1584               		.loc 1 541 21 view .LVU369
 1585               	.LVL140:
 541:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 1586               		.loc 1 541 21 view .LVU370
 541:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 1587               		.loc 1 541 21 view .LVU371
 1588               	/* #APP */
 1589               	 ;  541 "drivers/oled/ssd1306_sh1106.c" 1
 1590 004c 2491      		lpm r18, Z
 1591               		
 1592               	 ;  0 "" 2
 1593               	.LVL141:
 541:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 1594               		.loc 1 541 21 view .LVU372
 541:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 1595               		.loc 1 541 21 is_stmt 0 view .LVU373
 1596               	/* #NOAPP */
 1597               	.LBE31:
 542:drivers/oled/ssd1306_sh1106.c ****         oled_buffer[i] = c;
 1598               		.loc 1 542 9 is_stmt 1 view .LVU374
 1599 004e DC01      		movw r26,r24
 1600 0050 A050      		subi r26,lo8(-(oled_buffer))
 1601 0052 B040      		sbci r27,hi8(-(oled_buffer))
 542:drivers/oled/ssd1306_sh1106.c ****         oled_buffer[i] = c;
 1602               		.loc 1 542 12 is_stmt 0 view .LVU375
 1603 0054 3C91      		ld r19,X
 1604 0056 3217      		cp r19,r18
 1605 0058 01F0      		breq .L80
 543:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (i / OLED_BLOCK_SIZE));
 1606               		.loc 1 543 9 is_stmt 1 view .LVU376
 543:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (i / OLED_BLOCK_SIZE));
 1607               		.loc 1 543 24 is_stmt 0 view .LVU377
 1608 005a 2C93      		st X,r18
 544:drivers/oled/ssd1306_sh1106.c ****     }
 1609               		.loc 1 544 9 is_stmt 1 view .LVU378
 544:drivers/oled/ssd1306_sh1106.c ****     }
 1610               		.loc 1 544 49 is_stmt 0 view .LVU379
 1611 005c 9C01      		movw r18,r24
 1612               	.LVL142:
 544:drivers/oled/ssd1306_sh1106.c ****     }
 1613               		.loc 1 544 49 view .LVU380
 1614 005e A5E0      		ldi r26,5
 1615               		1:
 1616 0060 3695      		lsr r19
 1617 0062 2795      		ror r18
 1618 0064 AA95      		dec r26
 1619 0066 01F4      		brne 1b
 1620               	.LVL143:
 544:drivers/oled/ssd1306_sh1106.c ****     }
 1621               		.loc 1 544 43 view .LVU381
 1622 0068 DE01      		movw r26,r28
 1623 006a 00C0      		rjmp 2f
 1624               		1:
 1625 006c AA0F      		lsl r26
 1626 006e BB1F      		rol r27
 1627               		2:
 1628 0070 2A95      		dec r18
 1629 0072 02F4      		brpl 1b
 1630 0074 9D01      		movw r18,r26
 544:drivers/oled/ssd1306_sh1106.c ****     }
 1631               		.loc 1 544 20 view .LVU382
 1632 0076 4A2B      		or r20,r26
 1633 0078 532B      		or r21,r19
 1634               	.LVL144:
 1635               	.L80:
 544:drivers/oled/ssd1306_sh1106.c ****     }
 1636               		.loc 1 544 20 view .LVU383
 1637               	.LBE32:
 540:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 1638               		.loc 1 540 75 discriminator 2 view .LVU384
 1639 007a 0196      		adiw r24,1
 1640               	.LVL145:
 540:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 1641               		.loc 1 540 75 discriminator 2 view .LVU385
 1642 007c 3196      		adiw r30,1
 1643               	.LVL146:
 540:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 1644               		.loc 1 540 75 discriminator 2 view .LVU386
 1645 007e 00C0      		rjmp .L79
 1646               	.LBE33:
 1647               		.cfi_endproc
 1648               	.LFE29:
 1650               		.section	.text.oled_on,"ax",@progbits
 1651               	.global	oled_on
 1653               	oled_on:
 1654               	.LFB30:
 547:drivers/oled/ssd1306_sh1106.c **** #endif  // defined(__AVR__)
 548:drivers/oled/ssd1306_sh1106.c **** 
 549:drivers/oled/ssd1306_sh1106.c **** bool oled_on(void) {
 1655               		.loc 1 549 20 is_stmt 1 view -0
 1656               		.cfi_startproc
 1657               	/* prologue: function */
 1658               	/* frame size = 0 */
 1659               	/* stack size = 0 */
 1660               	.L__stack_usage = 0
 550:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 1661               		.loc 1 550 5 view .LVU388
 1662               		.loc 1 550 8 is_stmt 0 view .LVU389
 1663 0000 8091 0000 		lds r24,oled_initialized
 1664 0004 8111      		cpse r24,__zero_reg__
 1665 0006 00C0      		rjmp .L83
 1666               	.L85:
 551:drivers/oled/ssd1306_sh1106.c ****         return oled_active;
 552:drivers/oled/ssd1306_sh1106.c ****     }
 553:drivers/oled/ssd1306_sh1106.c **** 
 554:drivers/oled/ssd1306_sh1106.c **** #if OLED_TIMEOUT > 0
 555:drivers/oled/ssd1306_sh1106.c ****     oled_timeout = timer_read32() + OLED_TIMEOUT;
 556:drivers/oled/ssd1306_sh1106.c **** #endif
 557:drivers/oled/ssd1306_sh1106.c **** 
 558:drivers/oled/ssd1306_sh1106.c ****     static const uint8_t PROGMEM display_on[] =
 559:drivers/oled/ssd1306_sh1106.c **** #ifdef OLED_FADE_OUT
 560:drivers/oled/ssd1306_sh1106.c ****         {I2C_CMD, FADE_BLINK, 0x00};
 561:drivers/oled/ssd1306_sh1106.c **** #else
 562:drivers/oled/ssd1306_sh1106.c ****         {I2C_CMD, DISPLAY_ON};
 563:drivers/oled/ssd1306_sh1106.c **** #endif
 564:drivers/oled/ssd1306_sh1106.c **** 
 565:drivers/oled/ssd1306_sh1106.c ****     if (!oled_active) {
 566:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_on) != I2C_STATUS_SUCCESS) {
 567:drivers/oled/ssd1306_sh1106.c ****             print("oled_on cmd failed\n");
 568:drivers/oled/ssd1306_sh1106.c ****             return oled_active;
 569:drivers/oled/ssd1306_sh1106.c ****         }
 570:drivers/oled/ssd1306_sh1106.c ****         oled_active = true;
 571:drivers/oled/ssd1306_sh1106.c ****     }
 572:drivers/oled/ssd1306_sh1106.c ****     return oled_active;
 1667               		.loc 1 572 5 is_stmt 1 view .LVU390
 1668               		.loc 1 572 12 is_stmt 0 view .LVU391
 1669 0008 8091 0000 		lds r24,oled_active
 1670               	/* epilogue start */
 573:drivers/oled/ssd1306_sh1106.c **** }
 1671               		.loc 1 573 1 view .LVU392
 1672 000c 0895      		ret
 1673               	.L83:
 555:drivers/oled/ssd1306_sh1106.c **** #endif
 1674               		.loc 1 555 5 is_stmt 1 view .LVU393
 555:drivers/oled/ssd1306_sh1106.c **** #endif
 1675               		.loc 1 555 20 is_stmt 0 view .LVU394
 1676 000e 0E94 0000 		call timer_read32
 1677               	.LVL147:
 555:drivers/oled/ssd1306_sh1106.c **** #endif
 1678               		.loc 1 555 35 view .LVU395
 1679 0012 605A      		subi r22,-96
 1680 0014 7541      		sbci r23,21
 1681 0016 8F4F      		sbci r24,-1
 1682 0018 9F4F      		sbci r25,-1
 555:drivers/oled/ssd1306_sh1106.c **** #endif
 1683               		.loc 1 555 18 view .LVU396
 1684 001a 6093 0000 		sts oled_timeout,r22
 1685 001e 7093 0000 		sts oled_timeout+1,r23
 1686 0022 8093 0000 		sts oled_timeout+2,r24
 1687 0026 9093 0000 		sts oled_timeout+3,r25
 558:drivers/oled/ssd1306_sh1106.c **** #ifdef OLED_FADE_OUT
 1688               		.loc 1 558 5 is_stmt 1 view .LVU397
 565:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_on) != I2C_STATUS_SUCCESS) {
 1689               		.loc 1 565 5 view .LVU398
 565:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_on) != I2C_STATUS_SUCCESS) {
 1690               		.loc 1 565 8 is_stmt 0 view .LVU399
 1691 002a 8091 0000 		lds r24,oled_active
 1692 002e 8111      		cpse r24,__zero_reg__
 1693 0030 00C0      		rjmp .L85
 566:drivers/oled/ssd1306_sh1106.c ****             print("oled_on cmd failed\n");
 1694               		.loc 1 566 9 is_stmt 1 view .LVU400
 566:drivers/oled/ssd1306_sh1106.c ****             print("oled_on cmd failed\n");
 1695               		.loc 1 566 13 is_stmt 0 view .LVU401
 1696 0032 62E0      		ldi r22,lo8(2)
 1697 0034 70E0      		ldi r23,0
 1698 0036 80E0      		ldi r24,lo8(display_on.2272)
 1699 0038 90E0      		ldi r25,hi8(display_on.2272)
 1700 003a 0E94 0000 		call i2c_transmit_P.constprop.2
 1701               	.LVL148:
 566:drivers/oled/ssd1306_sh1106.c ****             print("oled_on cmd failed\n");
 1702               		.loc 1 566 12 view .LVU402
 1703 003e 892B      		or r24,r25
 1704 0040 01F4      		brne .L85
 570:drivers/oled/ssd1306_sh1106.c ****     }
 1705               		.loc 1 570 9 is_stmt 1 view .LVU403
 570:drivers/oled/ssd1306_sh1106.c ****     }
 1706               		.loc 1 570 21 is_stmt 0 view .LVU404
 1707 0042 81E0      		ldi r24,lo8(1)
 1708 0044 8093 0000 		sts oled_active,r24
 1709 0048 00C0      		rjmp .L85
 1710               		.cfi_endproc
 1711               	.LFE30:
 1713               		.section	.text.oled_render,"ax",@progbits
 1714               	.global	oled_render
 1716               	oled_render:
 1717               	.LFB15:
 288:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 1718               		.loc 1 288 24 is_stmt 1 view -0
 1719               		.cfi_startproc
 1720 0000 2F92      		push r2
 1721               	.LCFI22:
 1722               		.cfi_def_cfa_offset 3
 1723               		.cfi_offset 2, -2
 1724 0002 3F92      		push r3
 1725               	.LCFI23:
 1726               		.cfi_def_cfa_offset 4
 1727               		.cfi_offset 3, -3
 1728 0004 5F92      		push r5
 1729               	.LCFI24:
 1730               		.cfi_def_cfa_offset 5
 1731               		.cfi_offset 5, -4
 1732 0006 6F92      		push r6
 1733               	.LCFI25:
 1734               		.cfi_def_cfa_offset 6
 1735               		.cfi_offset 6, -5
 1736 0008 7F92      		push r7
 1737               	.LCFI26:
 1738               		.cfi_def_cfa_offset 7
 1739               		.cfi_offset 7, -6
 1740 000a 8F92      		push r8
 1741               	.LCFI27:
 1742               		.cfi_def_cfa_offset 8
 1743               		.cfi_offset 8, -7
 1744 000c 9F92      		push r9
 1745               	.LCFI28:
 1746               		.cfi_def_cfa_offset 9
 1747               		.cfi_offset 9, -8
 1748 000e AF92      		push r10
 1749               	.LCFI29:
 1750               		.cfi_def_cfa_offset 10
 1751               		.cfi_offset 10, -9
 1752 0010 BF92      		push r11
 1753               	.LCFI30:
 1754               		.cfi_def_cfa_offset 11
 1755               		.cfi_offset 11, -10
 1756 0012 CF92      		push r12
 1757               	.LCFI31:
 1758               		.cfi_def_cfa_offset 12
 1759               		.cfi_offset 12, -11
 1760 0014 DF92      		push r13
 1761               	.LCFI32:
 1762               		.cfi_def_cfa_offset 13
 1763               		.cfi_offset 13, -12
 1764 0016 EF92      		push r14
 1765               	.LCFI33:
 1766               		.cfi_def_cfa_offset 14
 1767               		.cfi_offset 14, -13
 1768 0018 FF92      		push r15
 1769               	.LCFI34:
 1770               		.cfi_def_cfa_offset 15
 1771               		.cfi_offset 15, -14
 1772 001a 0F93      		push r16
 1773               	.LCFI35:
 1774               		.cfi_def_cfa_offset 16
 1775               		.cfi_offset 16, -15
 1776 001c 1F93      		push r17
 1777               	.LCFI36:
 1778               		.cfi_def_cfa_offset 17
 1779               		.cfi_offset 17, -16
 1780 001e CF93      		push r28
 1781               	.LCFI37:
 1782               		.cfi_def_cfa_offset 18
 1783               		.cfi_offset 28, -17
 1784 0020 DF93      		push r29
 1785               	.LCFI38:
 1786               		.cfi_def_cfa_offset 19
 1787               		.cfi_offset 29, -18
 1788               	/* prologue: function */
 1789               	/* frame size = 0 */
 1790               	/* stack size = 17 */
 1791               	.L__stack_usage = 17
 289:drivers/oled/ssd1306_sh1106.c ****         return;
 1792               		.loc 1 289 5 view .LVU406
 289:drivers/oled/ssd1306_sh1106.c ****         return;
 1793               		.loc 1 289 8 is_stmt 0 view .LVU407
 1794 0022 8091 0000 		lds r24,oled_initialized
 1795 0026 8823      		tst r24
 1796 0028 01F0      		breq .L87
 294:drivers/oled/ssd1306_sh1106.c ****     if (!oled_dirty || oled_scrolling) {
 1797               		.loc 1 294 5 is_stmt 1 view .LVU408
 294:drivers/oled/ssd1306_sh1106.c ****     if (!oled_dirty || oled_scrolling) {
 1798               		.loc 1 294 16 is_stmt 0 view .LVU409
 1799 002a 2091 0000 		lds r18,oled_dirty
 1800 002e 3091 0000 		lds r19,oled_dirty+1
 295:drivers/oled/ssd1306_sh1106.c ****         return;
 1801               		.loc 1 295 5 is_stmt 1 view .LVU410
 295:drivers/oled/ssd1306_sh1106.c ****         return;
 1802               		.loc 1 295 8 is_stmt 0 view .LVU411
 1803 0032 2115      		cp r18,__zero_reg__
 1804 0034 3105      		cpc r19,__zero_reg__
 1805 0036 01F0      		breq .L87
 295:drivers/oled/ssd1306_sh1106.c ****         return;
 1806               		.loc 1 295 21 discriminator 1 view .LVU412
 1807 0038 8091 0000 		lds r24,oled_scrolling
 301:drivers/oled/ssd1306_sh1106.c ****         ++update_start;
 1808               		.loc 1 301 47 discriminator 1 view .LVU413
 1809 003c 61E0      		ldi r22,lo8(1)
 1810 003e 70E0      		ldi r23,0
 295:drivers/oled/ssd1306_sh1106.c ****         return;
 1811               		.loc 1 295 21 discriminator 1 view .LVU414
 1812 0040 8823      		tst r24
 1813 0042 01F0      		breq .L91
 1814               	.L87:
 1815               	/* epilogue start */
 348:drivers/oled/ssd1306_sh1106.c **** 
 1816               		.loc 1 348 1 view .LVU415
 1817 0044 DF91      		pop r29
 1818 0046 CF91      		pop r28
 1819 0048 1F91      		pop r17
 1820 004a 0F91      		pop r16
 1821 004c FF90      		pop r15
 1822 004e EF90      		pop r14
 1823 0050 DF90      		pop r13
 1824 0052 CF90      		pop r12
 1825 0054 BF90      		pop r11
 1826 0056 AF90      		pop r10
 1827 0058 9F90      		pop r9
 1828 005a 8F90      		pop r8
 1829 005c 7F90      		pop r7
 1830 005e 6F90      		pop r6
 1831 0060 5F90      		pop r5
 1832 0062 3F90      		pop r3
 1833 0064 2F90      		pop r2
 1834 0066 0895      		ret
 1835               	.LVL149:
 1836               	.L92:
 302:drivers/oled/ssd1306_sh1106.c ****     }
 1837               		.loc 1 302 9 is_stmt 1 view .LVU416
 1838 0068 8F5F      		subi r24,lo8(-(1))
 1839               	.LVL150:
 1840               	.L91:
 301:drivers/oled/ssd1306_sh1106.c ****         ++update_start;
 1841               		.loc 1 301 47 is_stmt 0 view .LVU417
 1842 006a 082F      		mov r16,r24
 1843 006c 10E0      		ldi r17,0
 1844 006e 1B01      		movw r2,r22
 1845 0070 082E      		mov r0,r24
 1846 0072 00C0      		rjmp 2f
 1847               		1:
 1848 0074 220C      		lsl r2
 1849 0076 331C      		rol r3
 1850               		2:
 1851 0078 0A94      		dec r0
 1852 007a 02F4      		brpl 1b
 301:drivers/oled/ssd1306_sh1106.c ****         ++update_start;
 1853               		.loc 1 301 25 view .LVU418
 1854 007c A901      		movw r20,r18
 1855 007e 4221      		and r20,r2
 1856 0080 5321      		and r21,r3
 301:drivers/oled/ssd1306_sh1106.c ****         ++update_start;
 1857               		.loc 1 301 11 view .LVU419
 1858 0082 452B      		or r20,r21
 1859 0084 01F0      		breq .L92
 306:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 1860               		.loc 1 306 5 is_stmt 1 view .LVU420
 307:drivers/oled/ssd1306_sh1106.c ****         calc_bounds(update_start, &display_start[1]);  // Offset from I2C_CMD byte at the start
 1861               		.loc 1 307 5 view .LVU421
 307:drivers/oled/ssd1306_sh1106.c ****         calc_bounds(update_start, &display_start[1]);  // Offset from I2C_CMD byte at the start
 1862               		.loc 1 307 8 is_stmt 0 view .LVU422
 1863 0086 9091 0000 		lds r25,oled_rotation
 1864 008a 90FD      		sbrc r25,0
 1865 008c 00C0      		rjmp .L93
 308:drivers/oled/ssd1306_sh1106.c ****     } else {
 1866               		.loc 1 308 9 is_stmt 1 view .LVU423
 1867               	.LVL151:
 1868               	.LBB47:
 1869               	.LBI47:
 243:drivers/oled/ssd1306_sh1106.c ****     // Calculate commands to set memory addressing bounds.
 1870               		.loc 1 243 13 view .LVU424
 1871               	.LBB48:
 245:drivers/oled/ssd1306_sh1106.c ****     uint8_t start_column = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_WIDTH;
 1872               		.loc 1 245 5 view .LVU425
 246:drivers/oled/ssd1306_sh1106.c **** #if (OLED_IC == OLED_IC_SH1106)
 1873               		.loc 1 246 5 view .LVU426
 246:drivers/oled/ssd1306_sh1106.c **** #if (OLED_IC == OLED_IC_SH1106)
 1874               		.loc 1 246 44 is_stmt 0 view .LVU427
 1875 008e 8295      		swap r24
 1876               	.LVL152:
 246:drivers/oled/ssd1306_sh1106.c **** #if (OLED_IC == OLED_IC_SH1106)
 1877               		.loc 1 246 44 view .LVU428
 1878 0090 880F      		lsl r24
 246:drivers/oled/ssd1306_sh1106.c **** #if (OLED_IC == OLED_IC_SH1106)
 1879               		.loc 1 246 13 view .LVU429
 1880 0092 8076      		andi r24,lo8(96)
 1881               	.LVL153:
 258:drivers/oled/ssd1306_sh1106.c ****     cmd_array[4] = start_page;
 1882               		.loc 1 258 5 is_stmt 1 view .LVU430
 258:drivers/oled/ssd1306_sh1106.c ****     cmd_array[4] = start_page;
 1883               		.loc 1 258 18 is_stmt 0 view .LVU431
 1884 0094 8093 0000 		sts display_start.2149+2,r24
 259:drivers/oled/ssd1306_sh1106.c ****     cmd_array[2] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) % OLED_DISPLAY_WIDTH + cmd_array[1];
 1885               		.loc 1 259 5 is_stmt 1 view .LVU432
 245:drivers/oled/ssd1306_sh1106.c ****     uint8_t start_column = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_WIDTH;
 1886               		.loc 1 245 59 is_stmt 0 view .LVU433
 1887 0098 9801      		movw r18,r16
 1888 009a 3695      		lsr r19
 1889 009c 2795      		ror r18
 1890 009e 3695      		lsr r19
 1891 00a0 2795      		ror r18
 245:drivers/oled/ssd1306_sh1106.c ****     uint8_t start_column = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_WIDTH;
 1892               		.loc 1 245 13 view .LVU434
 1893 00a2 2093 0000 		sts display_start.2149+5,r18
 260:drivers/oled/ssd1306_sh1106.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) / OLED_DISPLAY_WIDTH - 1;
 1894               		.loc 1 260 5 is_stmt 1 view .LVU435
 260:drivers/oled/ssd1306_sh1106.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) / OLED_DISPLAY_WIDTH - 1;
 1895               		.loc 1 260 84 is_stmt 0 view .LVU436
 1896 00a6 815E      		subi r24,lo8(-(31))
 1897               	.LVL154:
 260:drivers/oled/ssd1306_sh1106.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) / OLED_DISPLAY_WIDTH - 1;
 1898               		.loc 1 260 18 view .LVU437
 1899 00a8 8093 0000 		sts display_start.2149+3,r24
 261:drivers/oled/ssd1306_sh1106.c **** #endif
 1900               		.loc 1 261 5 is_stmt 1 view .LVU438
 261:drivers/oled/ssd1306_sh1106.c **** #endif
 1901               		.loc 1 261 18 is_stmt 0 view .LVU439
 1902 00ac 1092 0000 		sts display_start.2149+6,__zero_reg__
 1903               	.LVL155:
 1904               	.L94:
 261:drivers/oled/ssd1306_sh1106.c **** #endif
 1905               		.loc 1 261 18 view .LVU440
 1906               	.LBE48:
 1907               	.LBE47:
 314:drivers/oled/ssd1306_sh1106.c ****         print("oled_render offset command failed\n");
 1908               		.loc 1 314 5 is_stmt 1 view .LVU441
 314:drivers/oled/ssd1306_sh1106.c ****         print("oled_render offset command failed\n");
 1909               		.loc 1 314 9 is_stmt 0 view .LVU442
 1910 00b0 24E6      		ldi r18,lo8(100)
 1911 00b2 30E0      		ldi r19,0
 1912 00b4 47E0      		ldi r20,lo8(7)
 1913 00b6 50E0      		ldi r21,0
 1914 00b8 60E0      		ldi r22,lo8(display_start.2149)
 1915 00ba 70E0      		ldi r23,hi8(display_start.2149)
 1916 00bc 88E7      		ldi r24,lo8(120)
 1917 00be 0E94 0000 		call i2c_transmit
 1918               	.LVL156:
 314:drivers/oled/ssd1306_sh1106.c ****         print("oled_render offset command failed\n");
 1919               		.loc 1 314 8 view .LVU443
 1920 00c2 892B      		or r24,r25
 1921 00c4 01F0      		breq .+2
 1922 00c6 00C0      		rjmp .L87
 319:drivers/oled/ssd1306_sh1106.c ****         // Send render data chunk as is
 1923               		.loc 1 319 5 is_stmt 1 view .LVU444
 1924 00c8 A801      		movw r20,r16
 1925 00ca 25E0      		ldi r18,5
 1926               		1:
 1927 00cc 440F      		lsl r20
 1928 00ce 551F      		rol r21
 1929 00d0 2A95      		dec r18
 1930 00d2 01F4      		brne 1b
 319:drivers/oled/ssd1306_sh1106.c ****         // Send render data chunk as is
 1931               		.loc 1 319 8 is_stmt 0 view .LVU445
 1932 00d4 8091 0000 		lds r24,oled_rotation
 1933 00d8 80FD      		sbrc r24,0
 1934 00da 00C0      		rjmp .L95
 321:drivers/oled/ssd1306_sh1106.c ****             print("oled_render data failed\n");
 1935               		.loc 1 321 9 is_stmt 1 view .LVU446
 321:drivers/oled/ssd1306_sh1106.c ****             print("oled_render data failed\n");
 1936               		.loc 1 321 13 is_stmt 0 view .LVU447
 1937 00dc 4050      		subi r20,lo8(-(oled_buffer))
 1938 00de 5040      		sbci r21,hi8(-(oled_buffer))
 1939 00e0 04E6      		ldi r16,lo8(100)
 1940 00e2 10E0      		ldi r17,0
 1941               	.LVL157:
 321:drivers/oled/ssd1306_sh1106.c ****             print("oled_render data failed\n");
 1942               		.loc 1 321 13 view .LVU448
 1943 00e4 20E2      		ldi r18,lo8(32)
 1944 00e6 30E0      		ldi r19,0
 1945               	.L106:
 1946 00e8 60E4      		ldi r22,lo8(64)
 1947 00ea 88E7      		ldi r24,lo8(120)
 1948 00ec 0E94 0000 		call i2c_writeReg
 1949               	.LVL158:
 321:drivers/oled/ssd1306_sh1106.c ****             print("oled_render data failed\n");
 1950               		.loc 1 321 12 view .LVU449
 1951 00f0 892B      		or r24,r25
 1952 00f2 01F0      		breq .+2
 1953 00f4 00C0      		rjmp .L87
 344:drivers/oled/ssd1306_sh1106.c **** 
 1954               		.loc 1 344 5 is_stmt 1 view .LVU450
 1955 00f6 0E94 0000 		call oled_on
 1956               	.LVL159:
 347:drivers/oled/ssd1306_sh1106.c **** }
 1957               		.loc 1 347 5 view .LVU451
 347:drivers/oled/ssd1306_sh1106.c **** }
 1958               		.loc 1 347 19 is_stmt 0 view .LVU452
 1959 00fa E101      		movw r28,r2
 1960 00fc C095      		com r28
 1961 00fe D095      		com r29
 347:drivers/oled/ssd1306_sh1106.c **** }
 1962               		.loc 1 347 16 view .LVU453
 1963 0100 8091 0000 		lds r24,oled_dirty
 1964 0104 9091 0000 		lds r25,oled_dirty+1
 1965 0108 C823      		and r28,r24
 1966 010a D923      		and r29,r25
 1967 010c D093 0000 		sts oled_dirty+1,r29
 1968 0110 C093 0000 		sts oled_dirty,r28
 1969 0114 00C0      		rjmp .L87
 1970               	.LVL160:
 1971               	.L93:
 310:drivers/oled/ssd1306_sh1106.c ****     }
 1972               		.loc 1 310 9 is_stmt 1 view .LVU454
 1973               	.LBB49:
 1974               	.LBI49:
 265:drivers/oled/ssd1306_sh1106.c ****     cmd_array[1] = OLED_BLOCK_SIZE * update_start / OLED_DISPLAY_HEIGHT * 8;
 1975               		.loc 1 265 13 view .LVU455
 1976               	.LBB50:
 266:drivers/oled/ssd1306_sh1106.c ****     cmd_array[4] = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_HEIGHT;
 1977               		.loc 1 266 5 view .LVU456
 266:drivers/oled/ssd1306_sh1106.c ****     cmd_array[4] = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_HEIGHT;
 1978               		.loc 1 266 73 is_stmt 0 view .LVU457
 1979 0116 880F      		lsl r24
 1980 0118 880F      		lsl r24
 1981 011a 880F      		lsl r24
 266:drivers/oled/ssd1306_sh1106.c ****     cmd_array[4] = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_HEIGHT;
 1982               		.loc 1 266 18 view .LVU458
 1983 011c 8093 0000 		sts display_start.2149+2,r24
 267:drivers/oled/ssd1306_sh1106.c ****     cmd_array[2] = (OLED_BLOCK_SIZE + OLED_DISPLAY_HEIGHT - 1) / OLED_DISPLAY_HEIGHT * 8 - 1 + cmd_
 1984               		.loc 1 267 5 is_stmt 1 view .LVU459
 267:drivers/oled/ssd1306_sh1106.c ****     cmd_array[2] = (OLED_BLOCK_SIZE + OLED_DISPLAY_HEIGHT - 1) / OLED_DISPLAY_HEIGHT * 8 - 1 + cmd_
 1985               		.loc 1 267 18 is_stmt 0 view .LVU460
 1986 0120 1092 0000 		sts display_start.2149+5,__zero_reg__
 268:drivers/oled/ssd1306_sh1106.c ****     ;
 1987               		.loc 1 268 5 is_stmt 1 view .LVU461
 268:drivers/oled/ssd1306_sh1106.c ****     ;
 1988               		.loc 1 268 94 is_stmt 0 view .LVU462
 1989 0124 895F      		subi r24,lo8(-(7))
 268:drivers/oled/ssd1306_sh1106.c ****     ;
 1990               		.loc 1 268 18 view .LVU463
 1991 0126 8093 0000 		sts display_start.2149+3,r24
 269:drivers/oled/ssd1306_sh1106.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_HEIGHT - 1) % OLED_DISPLAY_HEIGHT / 8;
 1992               		.loc 1 269 5 is_stmt 1 view .LVU464
 270:drivers/oled/ssd1306_sh1106.c **** }
 1993               		.loc 1 270 5 view .LVU465
 270:drivers/oled/ssd1306_sh1106.c **** }
 1994               		.loc 1 270 18 is_stmt 0 view .LVU466
 1995 012a 83E0      		ldi r24,lo8(3)
 1996 012c 8093 0000 		sts display_start.2149+6,r24
 1997 0130 00C0      		rjmp .L94
 1998               	.LVL161:
 1999               	.L95:
 270:drivers/oled/ssd1306_sh1106.c **** }
 2000               		.loc 1 270 18 view .LVU467
 2001               	.LBE50:
 2002               	.LBE49:
 2003               	.LBB51:
 327:drivers/oled/ssd1306_sh1106.c ****         const static uint8_t target_map[] = OLED_TARGET_MAP;
 2004               		.loc 1 327 9 is_stmt 1 view .LVU468
 328:drivers/oled/ssd1306_sh1106.c **** 
 2005               		.loc 1 328 9 view .LVU469
 330:drivers/oled/ssd1306_sh1106.c ****         memset(temp_buffer, 0, sizeof(temp_buffer));
 2006               		.loc 1 330 9 view .LVU470
 331:drivers/oled/ssd1306_sh1106.c ****         for (uint8_t i = 0; i < sizeof(source_map); ++i) {
 2007               		.loc 1 331 9 view .LVU471
 2008 0132 E0E0      		ldi r30,lo8(temp_buffer.2152)
 2009 0134 F0E0      		ldi r31,hi8(temp_buffer.2152)
 2010 0136 80E2      		ldi r24,lo8(32)
 2011 0138 DF01      		movw r26,r30
 2012               		0:
 2013 013a 1D92      		st X+,__zero_reg__
 2014 013c 8A95      		dec r24
 2015 013e 01F4      		brne 0b
 332:drivers/oled/ssd1306_sh1106.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 2016               		.loc 1 332 9 view .LVU472
 2017               	.LBB52:
 332:drivers/oled/ssd1306_sh1106.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 2018               		.loc 1 332 14 view .LVU473
 2019               	.LVL162:
 332:drivers/oled/ssd1306_sh1106.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 2020               		.loc 1 332 14 is_stmt 0 view .LVU474
 2021 0140 A0E0      		ldi r26,lo8(target_map.2151)
 2022 0142 B0E0      		ldi r27,hi8(target_map.2151)
 2023 0144 00E0      		ldi r16,lo8(source_map.2150)
 2024 0146 10E0      		ldi r17,hi8(source_map.2150)
 2025               	.LVL163:
 332:drivers/oled/ssd1306_sh1106.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 2026               		.loc 1 332 14 view .LVU475
 2027 0148 80E0      		ldi r24,lo8(target_map.2151+4)
 2028 014a C82E      		mov r12,r24
 2029 014c 80E0      		ldi r24,hi8(target_map.2151+4)
 2030 014e D82E      		mov r13,r24
 2031 0150 97E0      		ldi r25,lo8(7)
 2032 0152 592E      		mov r5,r25
 2033               	.LBB53:
 2034               	.LBB54:
 2035               	.LBB55:
 281:drivers/oled/ssd1306_sh1106.c ****         for (uint8_t j = 0; j < 8; ++j) {
 2036               		.loc 1 281 31 view .LVU476
 2037 0154 7724      		clr r7
 2038 0156 7394      		inc r7
 2039               	.LVL164:
 2040               	.L98:
 281:drivers/oled/ssd1306_sh1106.c ****         for (uint8_t j = 0; j < 8; ++j) {
 2041               		.loc 1 281 31 view .LVU477
 2042               	.LBE55:
 2043               	.LBE54:
 2044               	.LBE53:
 333:drivers/oled/ssd1306_sh1106.c ****         }
 2045               		.loc 1 333 13 is_stmt 1 discriminator 3 view .LVU478
 333:drivers/oled/ssd1306_sh1106.c ****         }
 2046               		.loc 1 333 108 is_stmt 0 discriminator 3 view .LVU479
 2047 0158 8D91      		ld r24,X+
 2048               	.LVL165:
 333:drivers/oled/ssd1306_sh1106.c ****         }
 2049               		.loc 1 333 79 discriminator 3 view .LVU480
 2050 015a E801      		movw r28,r16
 2051 015c 2991      		ld r18,Y+
 2052 015e 8E01      		movw r16,r28
 333:drivers/oled/ssd1306_sh1106.c ****         }
 2053               		.loc 1 333 67 discriminator 3 view .LVU481
 2054 0160 240F      		add r18,r20
 2055 0162 352F      		mov r19,r21
 2056 0164 311D      		adc r19,__zero_reg__
 333:drivers/oled/ssd1306_sh1106.c ****         }
 2057               		.loc 1 333 23 discriminator 3 view .LVU482
 2058 0166 2050      		subi r18,lo8(-(oled_buffer))
 2059 0168 3040      		sbci r19,hi8(-(oled_buffer))
 2060               	.LVL166:
 2061               	.LBB64:
 2062               	.LBI53:
 279:drivers/oled/ssd1306_sh1106.c ****     for (uint8_t i = 0, shift = 7; i < 8; ++i, --shift) {
 2063               		.loc 1 279 13 is_stmt 1 discriminator 3 view .LVU483
 2064               	.LBE64:
 2065               	.LBE52:
 2066               	.LBE51:
 280:drivers/oled/ssd1306_sh1106.c ****         uint8_t selector = (1 << i);
 2067               		.loc 1 280 5 discriminator 3 view .LVU484
 2068               	.LBB68:
 2069               	.LBB67:
 2070               	.LBB65:
 2071               	.LBB62:
 280:drivers/oled/ssd1306_sh1106.c ****         uint8_t selector = (1 << i);
 2072               		.loc 1 280 10 discriminator 3 view .LVU485
 280:drivers/oled/ssd1306_sh1106.c ****         uint8_t selector = (1 << i);
 2073               		.loc 1 280 10 is_stmt 0 discriminator 3 view .LVU486
 2074               	.LBE62:
 2075               	.LBE65:
 333:drivers/oled/ssd1306_sh1106.c ****         }
 2076               		.loc 1 333 13 discriminator 3 view .LVU487
 2077 016a E82F      		mov r30,r24
 2078 016c F0E0      		ldi r31,0
 2079 016e E050      		subi r30,lo8(-(temp_buffer.2152))
 2080 0170 F040      		sbci r31,hi8(-(temp_buffer.2152))
 333:drivers/oled/ssd1306_sh1106.c ****         }
 2081               		.loc 1 333 23 discriminator 3 view .LVU488
 2082 0172 90E0      		ldi r25,0
 2083 0174 80E0      		ldi r24,0
 2084               	.LVL167:
 2085               	.L97:
 333:drivers/oled/ssd1306_sh1106.c ****         }
 2086               		.loc 1 333 23 discriminator 3 view .LVU489
 2087 0176 652C      		mov r6,r5
 2088 0178 681A      		sub r6,r24
 2089               	.LVL168:
 2090               	.LBB66:
 2091               	.LBB63:
 2092               	.LBB61:
 281:drivers/oled/ssd1306_sh1106.c ****         for (uint8_t j = 0; j < 8; ++j) {
 2093               		.loc 1 281 9 is_stmt 1 view .LVU490
 281:drivers/oled/ssd1306_sh1106.c ****         for (uint8_t j = 0; j < 8; ++j) {
 2094               		.loc 1 281 17 is_stmt 0 view .LVU491
 2095 017a 872C      		mov r8,r7
 2096 017c 082E      		mov r0,r24
 2097 017e 00C0      		rjmp 2f
 2098               		1:
 2099 0180 880C      		lsl r8
 2100               		2:
 2101 0182 0A94      		dec r0
 2102 0184 02F4      		brpl 1b
 2103               	.LVL169:
 282:drivers/oled/ssd1306_sh1106.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 2104               		.loc 1 282 9 is_stmt 1 view .LVU492
 2105               	.LBB56:
 282:drivers/oled/ssd1306_sh1106.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 2106               		.loc 1 282 14 view .LVU493
 282:drivers/oled/ssd1306_sh1106.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 2107               		.loc 1 282 14 is_stmt 0 view .LVU494
 2108 0186 7901      		movw r14,r18
 282:drivers/oled/ssd1306_sh1106.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 2109               		.loc 1 282 22 view .LVU495
 2110 0188 A12C      		mov r10,__zero_reg__
 2111               	.LVL170:
 2112               	.L96:
 283:drivers/oled/ssd1306_sh1106.c ****         }
 2113               		.loc 1 283 13 is_stmt 1 view .LVU496
 283:drivers/oled/ssd1306_sh1106.c ****         }
 2114               		.loc 1 283 32 is_stmt 0 view .LVU497
 2115 018a E701      		movw r28,r14
 2116 018c B990      		ld r11,Y+
 2117 018e 7E01      		movw r14,r28
 2118               	.LVL171:
 2119               	.LBB57:
 2120               	.LBI57:
 273:drivers/oled/ssd1306_sh1106.c ****     const uint8_t mask = 0x7;
 2121               		.loc 1 273 9 is_stmt 1 view .LVU498
 2122               	.LBB58:
 274:drivers/oled/ssd1306_sh1106.c ****     n &= mask;
 2123               		.loc 1 274 5 view .LVU499
 275:drivers/oled/ssd1306_sh1106.c ****     return a << n | a >> (-n & mask);
 2124               		.loc 1 275 5 view .LVU500
 276:drivers/oled/ssd1306_sh1106.c **** }
 2125               		.loc 1 276 5 view .LVU501
 276:drivers/oled/ssd1306_sh1106.c **** }
 2126               		.loc 1 276 5 is_stmt 0 view .LVU502
 2127               	.LBE58:
 2128               	.LBE57:
 283:drivers/oled/ssd1306_sh1106.c ****         }
 2129               		.loc 1 283 24 view .LVU503
 2130 0190 B820      		and r11,r8
 2131               	.LBB60:
 2132               	.LBB59:
 275:drivers/oled/ssd1306_sh1106.c ****     return a << n | a >> (-n & mask);
 2133               		.loc 1 275 7 view .LVU504
 2134 0192 662D      		mov r22,r6
 2135 0194 6A19      		sub r22,r10
 2136 0196 6770      		andi r22,lo8(7)
 2137 0198 962E      		mov r9,r22
 276:drivers/oled/ssd1306_sh1106.c **** }
 2138               		.loc 1 276 14 view .LVU505
 2139 019a 062E      		mov __tmp_reg__,r22
 2140 019c 000C      		lsl r0
 2141 019e 770B      		sbc r23,r23
 2142               	.LBE59:
 2143               	.LBE60:
 283:drivers/oled/ssd1306_sh1106.c ****         }
 2144               		.loc 1 283 21 view .LVU506
 2145 01a0 DB2D      		mov r29,r11
 2146 01a2 00C0      		rjmp 2f
 2147               		1:
 2148 01a4 DD0F      		lsl r29
 2149               		2:
 2150 01a6 9A94      		dec r9
 2151 01a8 02F4      		brpl 1b
 2152 01aa 7195      		neg r23
 2153 01ac 6195      		neg r22
 2154 01ae 7109      		sbc r23,__zero_reg__
 2155 01b0 6770      		andi r22,7
 2156 01b2 7727      		clr r23
 2157 01b4 00C0      		rjmp 2f
 2158               		1:
 2159 01b6 B694      		lsr r11
 2160               		2:
 2161 01b8 6A95      		dec r22
 2162 01ba 02F4      		brpl 1b
 2163 01bc BD2A      		or r11,r29
 2164 01be 6081      		ld r22,Z
 2165 01c0 962E      		mov r9,r22
 2166 01c2 9B28      		or r9,r11
 2167 01c4 9082      		st Z,r9
 282:drivers/oled/ssd1306_sh1106.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 2168               		.loc 1 282 36 view .LVU507
 2169 01c6 A394      		inc r10
 2170               	.LVL172:
 282:drivers/oled/ssd1306_sh1106.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 2171               		.loc 1 282 9 view .LVU508
 2172 01c8 68E0      		ldi r22,lo8(8)
 2173 01ca A612      		cpse r10,r22
 2174 01cc 00C0      		rjmp .L96
 2175               	.LVL173:
 282:drivers/oled/ssd1306_sh1106.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 2176               		.loc 1 282 9 view .LVU509
 2177 01ce 0196      		adiw r24,1
 2178               	.LVL174:
 282:drivers/oled/ssd1306_sh1106.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 2179               		.loc 1 282 9 view .LVU510
 2180 01d0 3196      		adiw r30,1
 2181               	.LBE56:
 2182               	.LBE61:
 280:drivers/oled/ssd1306_sh1106.c ****         uint8_t selector = (1 << i);
 2183               		.loc 1 280 5 view .LVU511
 2184 01d2 8830      		cpi r24,8
 2185 01d4 9105      		cpc r25,__zero_reg__
 2186 01d6 01F4      		brne .L97
 2187               	.LVL175:
 280:drivers/oled/ssd1306_sh1106.c ****         uint8_t selector = (1 << i);
 2188               		.loc 1 280 5 view .LVU512
 2189               	.LBE63:
 2190               	.LBE66:
 332:drivers/oled/ssd1306_sh1106.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 2191               		.loc 1 332 9 discriminator 3 view .LVU513
 2192 01d8 CA16      		cp r12,r26
 2193 01da DB06      		cpc r13,r27
 2194 01dc 01F0      		breq .+2
 2195 01de 00C0      		rjmp .L98
 2196               	.LBE67:
 337:drivers/oled/ssd1306_sh1106.c ****             print("oled_render90 data failed\n");
 2197               		.loc 1 337 9 is_stmt 1 view .LVU514
 337:drivers/oled/ssd1306_sh1106.c ****             print("oled_render90 data failed\n");
 2198               		.loc 1 337 13 is_stmt 0 view .LVU515
 2199 01e0 04E6      		ldi r16,lo8(100)
 2200 01e2 10E0      		ldi r17,0
 2201 01e4 20E2      		ldi r18,lo8(32)
 2202 01e6 30E0      		ldi r19,0
 2203 01e8 40E0      		ldi r20,lo8(temp_buffer.2152)
 2204 01ea 50E0      		ldi r21,hi8(temp_buffer.2152)
 2205 01ec 00C0      		rjmp .L106
 2206               	.LBE68:
 2207               		.cfi_endproc
 2208               	.LFE15:
 2210               		.section	.text.oled_off,"ax",@progbits
 2211               	.global	oled_off
 2213               	oled_off:
 2214               	.LFB31:
 574:drivers/oled/ssd1306_sh1106.c **** 
 575:drivers/oled/ssd1306_sh1106.c **** bool oled_off(void) {
 2215               		.loc 1 575 21 is_stmt 1 view -0
 2216               		.cfi_startproc
 2217               	/* prologue: function */
 2218               	/* frame size = 0 */
 2219               	/* stack size = 0 */
 2220               	.L__stack_usage = 0
 576:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2221               		.loc 1 576 5 view .LVU517
 2222 0000 8091 0000 		lds r24,oled_active
 2223               		.loc 1 576 8 is_stmt 0 view .LVU518
 2224 0004 9091 0000 		lds r25,oled_initialized
 2225 0008 9111      		cpse r25,__zero_reg__
 2226 000a 00C0      		rjmp .L108
 2227               	.L115:
 577:drivers/oled/ssd1306_sh1106.c ****         return !oled_active;
 578:drivers/oled/ssd1306_sh1106.c ****     }
 579:drivers/oled/ssd1306_sh1106.c **** 
 580:drivers/oled/ssd1306_sh1106.c ****     static const uint8_t PROGMEM display_off[] =
 581:drivers/oled/ssd1306_sh1106.c **** #ifdef OLED_FADE_OUT
 582:drivers/oled/ssd1306_sh1106.c ****         {I2C_CMD, FADE_BLINK, ENABLE_FADE | OLED_FADE_OUT_INTERVAL};
 583:drivers/oled/ssd1306_sh1106.c **** #else
 584:drivers/oled/ssd1306_sh1106.c ****         {I2C_CMD, DISPLAY_OFF};
 585:drivers/oled/ssd1306_sh1106.c **** #endif
 586:drivers/oled/ssd1306_sh1106.c **** 
 587:drivers/oled/ssd1306_sh1106.c ****     if (oled_active) {
 588:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_off) != I2C_STATUS_SUCCESS) {
 589:drivers/oled/ssd1306_sh1106.c ****             print("oled_off cmd failed\n");
 590:drivers/oled/ssd1306_sh1106.c ****             return oled_active;
 591:drivers/oled/ssd1306_sh1106.c ****         }
 592:drivers/oled/ssd1306_sh1106.c ****         oled_active = false;
 593:drivers/oled/ssd1306_sh1106.c ****     }
 594:drivers/oled/ssd1306_sh1106.c ****     return !oled_active;
 2228               		.loc 1 594 5 view .LVU519
 2229 000c 91E0      		ldi r25,lo8(1)
 2230 000e 8927      		eor r24,r25
 2231               	/* epilogue start */
 595:drivers/oled/ssd1306_sh1106.c **** }
 2232               		.loc 1 595 1 view .LVU520
 2233 0010 0895      		ret
 2234               	.L108:
 580:drivers/oled/ssd1306_sh1106.c **** #ifdef OLED_FADE_OUT
 2235               		.loc 1 580 5 is_stmt 1 view .LVU521
 587:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_off) != I2C_STATUS_SUCCESS) {
 2236               		.loc 1 587 5 view .LVU522
 587:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_off) != I2C_STATUS_SUCCESS) {
 2237               		.loc 1 587 8 is_stmt 0 view .LVU523
 2238 0012 8823      		tst r24
 2239 0014 01F0      		breq .L110
 588:drivers/oled/ssd1306_sh1106.c ****             print("oled_off cmd failed\n");
 2240               		.loc 1 588 9 is_stmt 1 view .LVU524
 588:drivers/oled/ssd1306_sh1106.c ****             print("oled_off cmd failed\n");
 2241               		.loc 1 588 13 is_stmt 0 view .LVU525
 2242 0016 62E0      		ldi r22,lo8(2)
 2243 0018 70E0      		ldi r23,0
 2244 001a 80E0      		ldi r24,lo8(display_off.2276)
 2245 001c 90E0      		ldi r25,hi8(display_off.2276)
 2246 001e 0E94 0000 		call i2c_transmit_P.constprop.2
 2247               	.LVL176:
 588:drivers/oled/ssd1306_sh1106.c ****             print("oled_off cmd failed\n");
 2248               		.loc 1 588 12 view .LVU526
 2249 0022 892B      		or r24,r25
 2250 0024 01F0      		breq .L111
 589:drivers/oled/ssd1306_sh1106.c ****             return oled_active;
 2251               		.loc 1 589 43 is_stmt 1 view .LVU527
 590:drivers/oled/ssd1306_sh1106.c ****         }
 2252               		.loc 1 590 13 view .LVU528
 590:drivers/oled/ssd1306_sh1106.c ****         }
 2253               		.loc 1 590 20 is_stmt 0 view .LVU529
 2254 0026 8091 0000 		lds r24,oled_active
 2255 002a 0895      		ret
 2256               	.L111:
 592:drivers/oled/ssd1306_sh1106.c ****     }
 2257               		.loc 1 592 9 is_stmt 1 view .LVU530
 592:drivers/oled/ssd1306_sh1106.c ****     }
 2258               		.loc 1 592 21 is_stmt 0 view .LVU531
 2259 002c 1092 0000 		sts oled_active,__zero_reg__
 2260               	.L110:
 594:drivers/oled/ssd1306_sh1106.c **** }
 2261               		.loc 1 594 5 is_stmt 1 view .LVU532
 2262 0030 8091 0000 		lds r24,oled_active
 2263 0034 00C0      		rjmp .L115
 2264               		.cfi_endproc
 2265               	.LFE31:
 2267               		.section	.text.is_oled_on,"ax",@progbits
 2268               	.global	is_oled_on
 2270               	is_oled_on:
 2271               	.LFB32:
 596:drivers/oled/ssd1306_sh1106.c **** 
 597:drivers/oled/ssd1306_sh1106.c **** bool is_oled_on(void) { return oled_active; }
 2272               		.loc 1 597 23 view -0
 2273               		.cfi_startproc
 2274               	/* prologue: function */
 2275               	/* frame size = 0 */
 2276               	/* stack size = 0 */
 2277               	.L__stack_usage = 0
 2278               		.loc 1 597 25 view .LVU534
 2279               		.loc 1 597 1 is_stmt 0 view .LVU535
 2280 0000 8091 0000 		lds r24,oled_active
 2281               	/* epilogue start */
 2282 0004 0895      		ret
 2283               		.cfi_endproc
 2284               	.LFE32:
 2286               		.section	.text.oled_set_brightness,"ax",@progbits
 2287               	.global	oled_set_brightness
 2289               	oled_set_brightness:
 2290               	.LVL177:
 2291               	.LFB33:
 598:drivers/oled/ssd1306_sh1106.c **** 
 599:drivers/oled/ssd1306_sh1106.c **** uint8_t oled_set_brightness(uint8_t level) {
 2292               		.loc 1 599 44 is_stmt 1 view -0
 2293               		.cfi_startproc
 2294               		.loc 1 599 44 is_stmt 0 view .LVU537
 2295 0000 1F93      		push r17
 2296               	.LCFI39:
 2297               		.cfi_def_cfa_offset 3
 2298               		.cfi_offset 17, -2
 2299 0002 CF93      		push r28
 2300               	.LCFI40:
 2301               		.cfi_def_cfa_offset 4
 2302               		.cfi_offset 28, -3
 2303 0004 DF93      		push r29
 2304               	.LCFI41:
 2305               		.cfi_def_cfa_offset 5
 2306               		.cfi_offset 29, -4
 2307 0006 00D0      		rcall .
 2308 0008 0F92      		push __tmp_reg__
 2309               	.LCFI42:
 2310               		.cfi_def_cfa_offset 8
 2311 000a CDB7      		in r28,__SP_L__
 2312 000c DEB7      		in r29,__SP_H__
 2313               	.LCFI43:
 2314               		.cfi_def_cfa_register 28
 2315               	/* prologue: function */
 2316               	/* frame size = 3 */
 2317               	/* stack size = 6 */
 2318               	.L__stack_usage = 6
 2319 000e 182F      		mov r17,r24
 600:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2320               		.loc 1 600 5 is_stmt 1 view .LVU538
 2321 0010 8091 0000 		lds r24,oled_brightness
 2322               	.LVL178:
 2323               		.loc 1 600 8 is_stmt 0 view .LVU539
 2324 0014 9091 0000 		lds r25,oled_initialized
 2325 0018 9923      		tst r25
 2326 001a 01F0      		breq .L117
 601:drivers/oled/ssd1306_sh1106.c ****         return oled_brightness;
 602:drivers/oled/ssd1306_sh1106.c ****     }
 603:drivers/oled/ssd1306_sh1106.c **** 
 604:drivers/oled/ssd1306_sh1106.c ****     uint8_t set_contrast[] = {I2C_CMD, CONTRAST, level};
 2327               		.loc 1 604 5 is_stmt 1 view .LVU540
 2328               		.loc 1 604 13 is_stmt 0 view .LVU541
 2329 001c 1982      		std Y+1,__zero_reg__
 2330 001e 91E8      		ldi r25,lo8(-127)
 2331 0020 9A83      		std Y+2,r25
 2332 0022 1B83      		std Y+3,r17
 605:drivers/oled/ssd1306_sh1106.c ****     if (oled_brightness != level) {
 2333               		.loc 1 605 5 is_stmt 1 view .LVU542
 2334               		.loc 1 605 8 is_stmt 0 view .LVU543
 2335 0024 1817      		cp r17,r24
 2336 0026 01F0      		breq .L119
 606:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT(set_contrast) != I2C_STATUS_SUCCESS) {
 2337               		.loc 1 606 9 is_stmt 1 view .LVU544
 2338               		.loc 1 606 13 is_stmt 0 view .LVU545
 2339 0028 24E6      		ldi r18,lo8(100)
 2340 002a 30E0      		ldi r19,0
 2341 002c 43E0      		ldi r20,lo8(3)
 2342 002e 50E0      		ldi r21,0
 2343 0030 BE01      		movw r22,r28
 2344 0032 6F5F      		subi r22,-1
 2345 0034 7F4F      		sbci r23,-1
 2346 0036 88E7      		ldi r24,lo8(120)
 2347 0038 0E94 0000 		call i2c_transmit
 2348               	.LVL179:
 2349               		.loc 1 606 12 view .LVU546
 2350 003c 892B      		or r24,r25
 2351 003e 01F0      		breq .L120
 2352               	.L119:
 607:drivers/oled/ssd1306_sh1106.c ****             print("set_brightness cmd failed\n");
 608:drivers/oled/ssd1306_sh1106.c ****             return oled_brightness;
 609:drivers/oled/ssd1306_sh1106.c ****         }
 610:drivers/oled/ssd1306_sh1106.c ****         oled_brightness = level;
 611:drivers/oled/ssd1306_sh1106.c ****     }
 612:drivers/oled/ssd1306_sh1106.c ****     return oled_brightness;
 2353               		.loc 1 612 5 is_stmt 1 view .LVU547
 2354               		.loc 1 612 12 is_stmt 0 view .LVU548
 2355 0040 8091 0000 		lds r24,oled_brightness
 2356               	.L117:
 2357               	/* epilogue start */
 613:drivers/oled/ssd1306_sh1106.c **** }
 2358               		.loc 1 613 1 view .LVU549
 2359 0044 0F90      		pop __tmp_reg__
 2360 0046 0F90      		pop __tmp_reg__
 2361 0048 0F90      		pop __tmp_reg__
 2362 004a DF91      		pop r29
 2363 004c CF91      		pop r28
 2364 004e 1F91      		pop r17
 2365               	.LVL180:
 2366               		.loc 1 613 1 view .LVU550
 2367 0050 0895      		ret
 2368               	.LVL181:
 2369               	.L120:
 610:drivers/oled/ssd1306_sh1106.c ****     }
 2370               		.loc 1 610 9 is_stmt 1 view .LVU551
 610:drivers/oled/ssd1306_sh1106.c ****     }
 2371               		.loc 1 610 25 is_stmt 0 view .LVU552
 2372 0052 1093 0000 		sts oled_brightness,r17
 2373 0056 00C0      		rjmp .L119
 2374               		.cfi_endproc
 2375               	.LFE33:
 2377               		.section	.text.oled_get_brightness,"ax",@progbits
 2378               	.global	oled_get_brightness
 2380               	oled_get_brightness:
 2381               	.LFB34:
 614:drivers/oled/ssd1306_sh1106.c **** 
 615:drivers/oled/ssd1306_sh1106.c **** uint8_t oled_get_brightness(void) { return oled_brightness; }
 2382               		.loc 1 615 35 is_stmt 1 view -0
 2383               		.cfi_startproc
 2384               	/* prologue: function */
 2385               	/* frame size = 0 */
 2386               	/* stack size = 0 */
 2387               	.L__stack_usage = 0
 2388               		.loc 1 615 37 view .LVU554
 2389               		.loc 1 615 1 is_stmt 0 view .LVU555
 2390 0000 8091 0000 		lds r24,oled_brightness
 2391               	/* epilogue start */
 2392 0004 0895      		ret
 2393               		.cfi_endproc
 2394               	.LFE34:
 2396               		.section	.text.oled_scroll_set_area,"ax",@progbits
 2397               	.global	oled_scroll_set_area
 2399               	oled_scroll_set_area:
 2400               	.LVL182:
 2401               	.LFB35:
 616:drivers/oled/ssd1306_sh1106.c **** 
 617:drivers/oled/ssd1306_sh1106.c **** // Set the specific 8 lines rows of the screen to scroll.
 618:drivers/oled/ssd1306_sh1106.c **** // 0 is the default for start, and 7 for end, which is the entire
 619:drivers/oled/ssd1306_sh1106.c **** // height of the screen.  For 128x32 screens, rows 4-7 are not used.
 620:drivers/oled/ssd1306_sh1106.c **** void oled_scroll_set_area(uint8_t start_line, uint8_t end_line) {
 2402               		.loc 1 620 65 is_stmt 1 view -0
 2403               		.cfi_startproc
 2404               	/* prologue: function */
 2405               	/* frame size = 0 */
 2406               	/* stack size = 0 */
 2407               	.L__stack_usage = 0
 621:drivers/oled/ssd1306_sh1106.c ****     oled_scroll_start = start_line;
 2408               		.loc 1 621 5 view .LVU557
 2409               		.loc 1 621 23 is_stmt 0 view .LVU558
 2410 0000 8093 0000 		sts oled_scroll_start,r24
 622:drivers/oled/ssd1306_sh1106.c ****     oled_scroll_end   = end_line;
 2411               		.loc 1 622 5 is_stmt 1 view .LVU559
 2412               		.loc 1 622 23 is_stmt 0 view .LVU560
 2413 0004 6093 0000 		sts oled_scroll_end,r22
 2414               	/* epilogue start */
 623:drivers/oled/ssd1306_sh1106.c **** }
 2415               		.loc 1 623 1 view .LVU561
 2416 0008 0895      		ret
 2417               		.cfi_endproc
 2418               	.LFE35:
 2420               		.section	.text.oled_scroll_set_speed,"ax",@progbits
 2421               	.global	oled_scroll_set_speed
 2423               	oled_scroll_set_speed:
 2424               	.LVL183:
 2425               	.LFB36:
 624:drivers/oled/ssd1306_sh1106.c **** 
 625:drivers/oled/ssd1306_sh1106.c **** void oled_scroll_set_speed(uint8_t speed) {
 2426               		.loc 1 625 43 is_stmt 1 view -0
 2427               		.cfi_startproc
 2428               	/* prologue: function */
 2429               	/* frame size = 0 */
 2430               	/* stack size = 0 */
 2431               	.L__stack_usage = 0
 626:drivers/oled/ssd1306_sh1106.c ****     // Sets the speed for scrolling... does not take effect
 627:drivers/oled/ssd1306_sh1106.c ****     // until scrolling is either started or restarted
 628:drivers/oled/ssd1306_sh1106.c ****     // the ssd1306 supports 8 speeds
 629:drivers/oled/ssd1306_sh1106.c ****     // FrameRate2   speed = 7
 630:drivers/oled/ssd1306_sh1106.c ****     // FrameRate3   speed = 4
 631:drivers/oled/ssd1306_sh1106.c ****     // FrameRate4   speed = 5
 632:drivers/oled/ssd1306_sh1106.c ****     // FrameRate5   speed = 0
 633:drivers/oled/ssd1306_sh1106.c ****     // FrameRate25  speed = 6
 634:drivers/oled/ssd1306_sh1106.c ****     // FrameRate64  speed = 1
 635:drivers/oled/ssd1306_sh1106.c ****     // FrameRate128 speed = 2
 636:drivers/oled/ssd1306_sh1106.c ****     // FrameRate256 speed = 3
 637:drivers/oled/ssd1306_sh1106.c ****     // for ease of use these are remaped here to be in order
 638:drivers/oled/ssd1306_sh1106.c ****     static const uint8_t scroll_remap[8] = {7, 4, 5, 0, 6, 1, 2, 3};
 2432               		.loc 1 638 5 view .LVU563
 639:drivers/oled/ssd1306_sh1106.c ****     oled_scroll_speed                    = scroll_remap[speed];
 2433               		.loc 1 639 5 view .LVU564
 2434               		.loc 1 639 56 is_stmt 0 view .LVU565
 2435 0000 E82F      		mov r30,r24
 2436 0002 F0E0      		ldi r31,0
 2437 0004 E050      		subi r30,lo8(-(scroll_remap.2294))
 2438 0006 F040      		sbci r31,hi8(-(scroll_remap.2294))
 2439               		.loc 1 639 42 view .LVU566
 2440 0008 8081      		ld r24,Z
 2441               	.LVL184:
 2442               		.loc 1 639 42 view .LVU567
 2443 000a 8093 0000 		sts oled_scroll_speed,r24
 2444               	/* epilogue start */
 640:drivers/oled/ssd1306_sh1106.c **** }
 2445               		.loc 1 640 1 view .LVU568
 2446 000e 0895      		ret
 2447               		.cfi_endproc
 2448               	.LFE36:
 2450               		.section	.text.oled_scroll_right,"ax",@progbits
 2451               	.global	oled_scroll_right
 2453               	oled_scroll_right:
 2454               	.LFB37:
 641:drivers/oled/ssd1306_sh1106.c **** 
 642:drivers/oled/ssd1306_sh1106.c **** bool oled_scroll_right(void) {
 2455               		.loc 1 642 30 is_stmt 1 view -0
 2456               		.cfi_startproc
 2457 0000 CF93      		push r28
 2458               	.LCFI44:
 2459               		.cfi_def_cfa_offset 3
 2460               		.cfi_offset 28, -2
 2461 0002 DF93      		push r29
 2462               	.LCFI45:
 2463               		.cfi_def_cfa_offset 4
 2464               		.cfi_offset 29, -3
 2465 0004 CDB7      		in r28,__SP_L__
 2466 0006 DEB7      		in r29,__SP_H__
 2467               	.LCFI46:
 2468               		.cfi_def_cfa_register 28
 2469 0008 2997      		sbiw r28,9
 2470               	.LCFI47:
 2471               		.cfi_def_cfa_offset 13
 2472 000a 0FB6      		in __tmp_reg__,__SREG__
 2473 000c F894      		cli
 2474 000e DEBF      		out __SP_H__,r29
 2475 0010 0FBE      		out __SREG__,__tmp_reg__
 2476 0012 CDBF      		out __SP_L__,r28
 2477               	/* prologue: function */
 2478               	/* frame size = 9 */
 2479               	/* stack size = 11 */
 2480               	.L__stack_usage = 11
 643:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2481               		.loc 1 643 5 view .LVU570
 2482 0014 8091 0000 		lds r24,oled_scrolling
 2483               		.loc 1 643 8 is_stmt 0 view .LVU571
 2484 0018 9091 0000 		lds r25,oled_initialized
 2485 001c 9923      		tst r25
 2486 001e 01F0      		breq .L127
 644:drivers/oled/ssd1306_sh1106.c ****         return oled_scrolling;
 645:drivers/oled/ssd1306_sh1106.c ****     }
 646:drivers/oled/ssd1306_sh1106.c **** 
 647:drivers/oled/ssd1306_sh1106.c ****     // Dont enable scrolling if we need to update the display
 648:drivers/oled/ssd1306_sh1106.c ****     // This prevents scrolling of bad data from starting the scroll too early after init
 649:drivers/oled/ssd1306_sh1106.c ****     if (!oled_dirty && !oled_scrolling) {
 2487               		.loc 1 649 5 is_stmt 1 view .LVU572
 2488               		.loc 1 649 8 is_stmt 0 view .LVU573
 2489 0020 2091 0000 		lds r18,oled_dirty
 2490 0024 3091 0000 		lds r19,oled_dirty+1
 2491 0028 232B      		or r18,r19
 2492 002a 01F4      		brne .L129
 2493               		.loc 1 649 21 discriminator 1 view .LVU574
 2494 002c 8111      		cpse r24,__zero_reg__
 2495 002e 00C0      		rjmp .L129
 2496               	.LBB69:
 650:drivers/oled/ssd1306_sh1106.c ****         uint8_t display_scroll_right[] = {I2C_CMD, SCROLL_RIGHT, 0x00, oled_scroll_start, oled_scro
 2497               		.loc 1 650 9 is_stmt 1 view .LVU575
 2498               		.loc 1 650 17 is_stmt 0 view .LVU576
 2499 0030 1982      		std Y+1,__zero_reg__
 2500 0032 86E2      		ldi r24,lo8(38)
 2501 0034 8A83      		std Y+2,r24
 2502 0036 1B82      		std Y+3,__zero_reg__
 2503 0038 8091 0000 		lds r24,oled_scroll_start
 2504 003c 8C83      		std Y+4,r24
 2505 003e 8091 0000 		lds r24,oled_scroll_speed
 2506 0042 8D83      		std Y+5,r24
 2507 0044 8091 0000 		lds r24,oled_scroll_end
 2508 0048 8E83      		std Y+6,r24
 2509 004a 1F82      		std Y+7,__zero_reg__
 2510 004c 8FEF      		ldi r24,lo8(-1)
 2511 004e 8887      		std Y+8,r24
 2512 0050 8FE2      		ldi r24,lo8(47)
 2513 0052 8987      		std Y+9,r24
 651:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT(display_scroll_right) != I2C_STATUS_SUCCESS) {
 2514               		.loc 1 651 9 is_stmt 1 view .LVU577
 2515               		.loc 1 651 13 is_stmt 0 view .LVU578
 2516 0054 24E6      		ldi r18,lo8(100)
 2517 0056 30E0      		ldi r19,0
 2518 0058 49E0      		ldi r20,lo8(9)
 2519 005a 50E0      		ldi r21,0
 2520 005c BE01      		movw r22,r28
 2521 005e 6F5F      		subi r22,-1
 2522 0060 7F4F      		sbci r23,-1
 2523 0062 88E7      		ldi r24,lo8(120)
 2524 0064 0E94 0000 		call i2c_transmit
 2525               	.LVL185:
 2526               		.loc 1 651 12 view .LVU579
 2527 0068 892B      		or r24,r25
 2528 006a 01F0      		breq .L130
 2529               	.L129:
 2530               	.LBE69:
 652:drivers/oled/ssd1306_sh1106.c ****             print("oled_scroll_right cmd failed\n");
 653:drivers/oled/ssd1306_sh1106.c ****             return oled_scrolling;
 654:drivers/oled/ssd1306_sh1106.c ****         }
 655:drivers/oled/ssd1306_sh1106.c ****         oled_scrolling = true;
 656:drivers/oled/ssd1306_sh1106.c ****     }
 657:drivers/oled/ssd1306_sh1106.c ****     return oled_scrolling;
 2531               		.loc 1 657 5 is_stmt 1 view .LVU580
 2532               		.loc 1 657 12 is_stmt 0 view .LVU581
 2533 006c 8091 0000 		lds r24,oled_scrolling
 2534               	.L127:
 2535               	/* epilogue start */
 658:drivers/oled/ssd1306_sh1106.c **** }
 2536               		.loc 1 658 1 view .LVU582
 2537 0070 2996      		adiw r28,9
 2538 0072 0FB6      		in __tmp_reg__,__SREG__
 2539 0074 F894      		cli
 2540 0076 DEBF      		out __SP_H__,r29
 2541 0078 0FBE      		out __SREG__,__tmp_reg__
 2542 007a CDBF      		out __SP_L__,r28
 2543 007c DF91      		pop r29
 2544 007e CF91      		pop r28
 2545 0080 0895      		ret
 2546               	.L130:
 2547               	.LBB70:
 655:drivers/oled/ssd1306_sh1106.c ****     }
 2548               		.loc 1 655 9 is_stmt 1 view .LVU583
 655:drivers/oled/ssd1306_sh1106.c ****     }
 2549               		.loc 1 655 24 is_stmt 0 view .LVU584
 2550 0082 81E0      		ldi r24,lo8(1)
 2551 0084 8093 0000 		sts oled_scrolling,r24
 2552 0088 00C0      		rjmp .L129
 2553               	.LBE70:
 2554               		.cfi_endproc
 2555               	.LFE37:
 2557               		.section	.text.oled_scroll_left,"ax",@progbits
 2558               	.global	oled_scroll_left
 2560               	oled_scroll_left:
 2561               	.LFB38:
 659:drivers/oled/ssd1306_sh1106.c **** 
 660:drivers/oled/ssd1306_sh1106.c **** bool oled_scroll_left(void) {
 2562               		.loc 1 660 29 is_stmt 1 view -0
 2563               		.cfi_startproc
 2564 0000 CF93      		push r28
 2565               	.LCFI48:
 2566               		.cfi_def_cfa_offset 3
 2567               		.cfi_offset 28, -2
 2568 0002 DF93      		push r29
 2569               	.LCFI49:
 2570               		.cfi_def_cfa_offset 4
 2571               		.cfi_offset 29, -3
 2572 0004 CDB7      		in r28,__SP_L__
 2573 0006 DEB7      		in r29,__SP_H__
 2574               	.LCFI50:
 2575               		.cfi_def_cfa_register 28
 2576 0008 2997      		sbiw r28,9
 2577               	.LCFI51:
 2578               		.cfi_def_cfa_offset 13
 2579 000a 0FB6      		in __tmp_reg__,__SREG__
 2580 000c F894      		cli
 2581 000e DEBF      		out __SP_H__,r29
 2582 0010 0FBE      		out __SREG__,__tmp_reg__
 2583 0012 CDBF      		out __SP_L__,r28
 2584               	/* prologue: function */
 2585               	/* frame size = 9 */
 2586               	/* stack size = 11 */
 2587               	.L__stack_usage = 11
 661:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2588               		.loc 1 661 5 view .LVU586
 2589 0014 8091 0000 		lds r24,oled_scrolling
 2590               		.loc 1 661 8 is_stmt 0 view .LVU587
 2591 0018 9091 0000 		lds r25,oled_initialized
 2592 001c 9923      		tst r25
 2593 001e 01F0      		breq .L134
 662:drivers/oled/ssd1306_sh1106.c ****         return oled_scrolling;
 663:drivers/oled/ssd1306_sh1106.c ****     }
 664:drivers/oled/ssd1306_sh1106.c **** 
 665:drivers/oled/ssd1306_sh1106.c ****     // Dont enable scrolling if we need to update the display
 666:drivers/oled/ssd1306_sh1106.c ****     // This prevents scrolling of bad data from starting the scroll too early after init
 667:drivers/oled/ssd1306_sh1106.c ****     if (!oled_dirty && !oled_scrolling) {
 2594               		.loc 1 667 5 is_stmt 1 view .LVU588
 2595               		.loc 1 667 8 is_stmt 0 view .LVU589
 2596 0020 2091 0000 		lds r18,oled_dirty
 2597 0024 3091 0000 		lds r19,oled_dirty+1
 2598 0028 232B      		or r18,r19
 2599 002a 01F4      		brne .L136
 2600               		.loc 1 667 21 discriminator 1 view .LVU590
 2601 002c 8111      		cpse r24,__zero_reg__
 2602 002e 00C0      		rjmp .L136
 2603               	.LBB71:
 668:drivers/oled/ssd1306_sh1106.c ****         uint8_t display_scroll_left[] = {I2C_CMD, SCROLL_LEFT, 0x00, oled_scroll_start, oled_scroll
 2604               		.loc 1 668 9 is_stmt 1 view .LVU591
 2605               		.loc 1 668 17 is_stmt 0 view .LVU592
 2606 0030 1982      		std Y+1,__zero_reg__
 2607 0032 87E2      		ldi r24,lo8(39)
 2608 0034 8A83      		std Y+2,r24
 2609 0036 1B82      		std Y+3,__zero_reg__
 2610 0038 8091 0000 		lds r24,oled_scroll_start
 2611 003c 8C83      		std Y+4,r24
 2612 003e 8091 0000 		lds r24,oled_scroll_speed
 2613 0042 8D83      		std Y+5,r24
 2614 0044 8091 0000 		lds r24,oled_scroll_end
 2615 0048 8E83      		std Y+6,r24
 2616 004a 1F82      		std Y+7,__zero_reg__
 2617 004c 8FEF      		ldi r24,lo8(-1)
 2618 004e 8887      		std Y+8,r24
 2619 0050 8FE2      		ldi r24,lo8(47)
 2620 0052 8987      		std Y+9,r24
 669:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT(display_scroll_left) != I2C_STATUS_SUCCESS) {
 2621               		.loc 1 669 9 is_stmt 1 view .LVU593
 2622               		.loc 1 669 13 is_stmt 0 view .LVU594
 2623 0054 24E6      		ldi r18,lo8(100)
 2624 0056 30E0      		ldi r19,0
 2625 0058 49E0      		ldi r20,lo8(9)
 2626 005a 50E0      		ldi r21,0
 2627 005c BE01      		movw r22,r28
 2628 005e 6F5F      		subi r22,-1
 2629 0060 7F4F      		sbci r23,-1
 2630 0062 88E7      		ldi r24,lo8(120)
 2631 0064 0E94 0000 		call i2c_transmit
 2632               	.LVL186:
 2633               		.loc 1 669 12 view .LVU595
 2634 0068 892B      		or r24,r25
 2635 006a 01F0      		breq .L137
 2636               	.L136:
 2637               	.LBE71:
 670:drivers/oled/ssd1306_sh1106.c ****             print("oled_scroll_left cmd failed\n");
 671:drivers/oled/ssd1306_sh1106.c ****             return oled_scrolling;
 672:drivers/oled/ssd1306_sh1106.c ****         }
 673:drivers/oled/ssd1306_sh1106.c ****         oled_scrolling = true;
 674:drivers/oled/ssd1306_sh1106.c ****     }
 675:drivers/oled/ssd1306_sh1106.c ****     return oled_scrolling;
 2638               		.loc 1 675 5 is_stmt 1 view .LVU596
 2639               		.loc 1 675 12 is_stmt 0 view .LVU597
 2640 006c 8091 0000 		lds r24,oled_scrolling
 2641               	.L134:
 2642               	/* epilogue start */
 676:drivers/oled/ssd1306_sh1106.c **** }
 2643               		.loc 1 676 1 view .LVU598
 2644 0070 2996      		adiw r28,9
 2645 0072 0FB6      		in __tmp_reg__,__SREG__
 2646 0074 F894      		cli
 2647 0076 DEBF      		out __SP_H__,r29
 2648 0078 0FBE      		out __SREG__,__tmp_reg__
 2649 007a CDBF      		out __SP_L__,r28
 2650 007c DF91      		pop r29
 2651 007e CF91      		pop r28
 2652 0080 0895      		ret
 2653               	.L137:
 2654               	.LBB72:
 673:drivers/oled/ssd1306_sh1106.c ****     }
 2655               		.loc 1 673 9 is_stmt 1 view .LVU599
 673:drivers/oled/ssd1306_sh1106.c ****     }
 2656               		.loc 1 673 24 is_stmt 0 view .LVU600
 2657 0082 81E0      		ldi r24,lo8(1)
 2658 0084 8093 0000 		sts oled_scrolling,r24
 2659 0088 00C0      		rjmp .L136
 2660               	.LBE72:
 2661               		.cfi_endproc
 2662               	.LFE38:
 2664               		.section	.text.oled_scroll_off,"ax",@progbits
 2665               	.global	oled_scroll_off
 2667               	oled_scroll_off:
 2668               	.LFB39:
 677:drivers/oled/ssd1306_sh1106.c **** 
 678:drivers/oled/ssd1306_sh1106.c **** bool oled_scroll_off(void) {
 2669               		.loc 1 678 28 is_stmt 1 view -0
 2670               		.cfi_startproc
 2671               	/* prologue: function */
 2672               	/* frame size = 0 */
 2673               	/* stack size = 0 */
 2674               	.L__stack_usage = 0
 679:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2675               		.loc 1 679 5 view .LVU602
 2676 0000 8091 0000 		lds r24,oled_scrolling
 2677               		.loc 1 679 8 is_stmt 0 view .LVU603
 2678 0004 9091 0000 		lds r25,oled_initialized
 2679 0008 9111      		cpse r25,__zero_reg__
 2680 000a 00C0      		rjmp .L142
 2681               	.L149:
 680:drivers/oled/ssd1306_sh1106.c ****         return !oled_scrolling;
 681:drivers/oled/ssd1306_sh1106.c ****     }
 682:drivers/oled/ssd1306_sh1106.c **** 
 683:drivers/oled/ssd1306_sh1106.c ****     if (oled_scrolling) {
 684:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_scroll_off[] = {I2C_CMD, DEACTIVATE_SCROLL};
 685:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_scroll_off) != I2C_STATUS_SUCCESS) {
 686:drivers/oled/ssd1306_sh1106.c ****             print("oled_scroll_off cmd failed\n");
 687:drivers/oled/ssd1306_sh1106.c ****             return oled_scrolling;
 688:drivers/oled/ssd1306_sh1106.c ****         }
 689:drivers/oled/ssd1306_sh1106.c ****         oled_scrolling = false;
 690:drivers/oled/ssd1306_sh1106.c ****         oled_dirty     = OLED_ALL_BLOCKS_MASK;
 691:drivers/oled/ssd1306_sh1106.c ****     }
 692:drivers/oled/ssd1306_sh1106.c ****     return !oled_scrolling;
 2682               		.loc 1 692 5 view .LVU604
 2683 000c 91E0      		ldi r25,lo8(1)
 2684 000e 8927      		eor r24,r25
 2685               	/* epilogue start */
 693:drivers/oled/ssd1306_sh1106.c **** }
 2686               		.loc 1 693 1 view .LVU605
 2687 0010 0895      		ret
 2688               	.L142:
 683:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_scroll_off[] = {I2C_CMD, DEACTIVATE_SCROLL};
 2689               		.loc 1 683 5 is_stmt 1 view .LVU606
 683:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_scroll_off[] = {I2C_CMD, DEACTIVATE_SCROLL};
 2690               		.loc 1 683 8 is_stmt 0 view .LVU607
 2691 0012 8823      		tst r24
 2692 0014 01F0      		breq .L144
 2693               	.LBB73:
 684:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_scroll_off) != I2C_STATUS_SUCCESS) {
 2694               		.loc 1 684 9 is_stmt 1 view .LVU608
 685:drivers/oled/ssd1306_sh1106.c ****             print("oled_scroll_off cmd failed\n");
 2695               		.loc 1 685 9 view .LVU609
 685:drivers/oled/ssd1306_sh1106.c ****             print("oled_scroll_off cmd failed\n");
 2696               		.loc 1 685 13 is_stmt 0 view .LVU610
 2697 0016 62E0      		ldi r22,lo8(2)
 2698 0018 70E0      		ldi r23,0
 2699 001a 80E0      		ldi r24,lo8(display_scroll_off.2306)
 2700 001c 90E0      		ldi r25,hi8(display_scroll_off.2306)
 2701 001e 0E94 0000 		call i2c_transmit_P.constprop.2
 2702               	.LVL187:
 685:drivers/oled/ssd1306_sh1106.c ****             print("oled_scroll_off cmd failed\n");
 2703               		.loc 1 685 12 view .LVU611
 2704 0022 892B      		or r24,r25
 2705 0024 01F0      		breq .L145
 686:drivers/oled/ssd1306_sh1106.c ****             return oled_scrolling;
 2706               		.loc 1 686 50 is_stmt 1 view .LVU612
 687:drivers/oled/ssd1306_sh1106.c ****         }
 2707               		.loc 1 687 13 view .LVU613
 687:drivers/oled/ssd1306_sh1106.c ****         }
 2708               		.loc 1 687 20 is_stmt 0 view .LVU614
 2709 0026 8091 0000 		lds r24,oled_scrolling
 2710 002a 0895      		ret
 2711               	.L145:
 689:drivers/oled/ssd1306_sh1106.c ****         oled_dirty     = OLED_ALL_BLOCKS_MASK;
 2712               		.loc 1 689 9 is_stmt 1 view .LVU615
 689:drivers/oled/ssd1306_sh1106.c ****         oled_dirty     = OLED_ALL_BLOCKS_MASK;
 2713               		.loc 1 689 24 is_stmt 0 view .LVU616
 2714 002c 1092 0000 		sts oled_scrolling,__zero_reg__
 690:drivers/oled/ssd1306_sh1106.c ****     }
 2715               		.loc 1 690 9 is_stmt 1 view .LVU617
 690:drivers/oled/ssd1306_sh1106.c ****     }
 2716               		.loc 1 690 24 is_stmt 0 view .LVU618
 2717 0030 8FEF      		ldi r24,lo8(-1)
 2718 0032 9FEF      		ldi r25,lo8(-1)
 2719 0034 9093 0000 		sts oled_dirty+1,r25
 2720 0038 8093 0000 		sts oled_dirty,r24
 2721               	.L144:
 2722               	.LBE73:
 692:drivers/oled/ssd1306_sh1106.c **** }
 2723               		.loc 1 692 5 is_stmt 1 view .LVU619
 2724 003c 8091 0000 		lds r24,oled_scrolling
 2725 0040 00C0      		rjmp .L149
 2726               		.cfi_endproc
 2727               	.LFE39:
 2729               		.section	.text.is_oled_scrolling,"ax",@progbits
 2730               	.global	is_oled_scrolling
 2732               	is_oled_scrolling:
 2733               	.LFB40:
 694:drivers/oled/ssd1306_sh1106.c **** 
 695:drivers/oled/ssd1306_sh1106.c **** bool is_oled_scrolling(void) { return oled_scrolling; }
 2734               		.loc 1 695 30 view -0
 2735               		.cfi_startproc
 2736               	/* prologue: function */
 2737               	/* frame size = 0 */
 2738               	/* stack size = 0 */
 2739               	.L__stack_usage = 0
 2740               		.loc 1 695 32 view .LVU621
 2741               		.loc 1 695 1 is_stmt 0 view .LVU622
 2742 0000 8091 0000 		lds r24,oled_scrolling
 2743               	/* epilogue start */
 2744 0004 0895      		ret
 2745               		.cfi_endproc
 2746               	.LFE40:
 2748               		.section	.text.oled_invert,"ax",@progbits
 2749               	.global	oled_invert
 2751               	oled_invert:
 2752               	.LVL188:
 2753               	.LFB41:
 696:drivers/oled/ssd1306_sh1106.c **** 
 697:drivers/oled/ssd1306_sh1106.c **** bool oled_invert(bool invert) {
 2754               		.loc 1 697 31 is_stmt 1 view -0
 2755               		.cfi_startproc
 2756               	/* prologue: function */
 2757               	/* frame size = 0 */
 2758               	/* stack size = 0 */
 2759               	.L__stack_usage = 0
 2760               		.loc 1 697 31 is_stmt 0 view .LVU624
 2761 0000 982F      		mov r25,r24
 698:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2762               		.loc 1 698 5 is_stmt 1 view .LVU625
 2763 0002 8091 0000 		lds r24,oled_inverted
 2764               	.LVL189:
 2765               		.loc 1 698 8 is_stmt 0 view .LVU626
 2766 0006 2091 0000 		lds r18,oled_initialized
 2767 000a 2223      		tst r18
 2768 000c 01F0      		breq .L151
 699:drivers/oled/ssd1306_sh1106.c ****         return oled_inverted;
 700:drivers/oled/ssd1306_sh1106.c ****     }
 701:drivers/oled/ssd1306_sh1106.c **** 
 702:drivers/oled/ssd1306_sh1106.c ****     if (invert && !oled_inverted) {
 2769               		.loc 1 702 5 is_stmt 1 view .LVU627
 2770               		.loc 1 702 8 is_stmt 0 view .LVU628
 2771 000e 9923      		tst r25
 2772 0010 01F0      		breq .L153
 2773               		.loc 1 702 16 discriminator 1 view .LVU629
 2774 0012 8111      		cpse r24,__zero_reg__
 2775 0014 00C0      		rjmp .L154
 2776               	.LBB74:
 703:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_inverted[] = {I2C_CMD, INVERT_DISPLAY};
 2777               		.loc 1 703 9 is_stmt 1 view .LVU630
 704:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_inverted) != I2C_STATUS_SUCCESS) {
 2778               		.loc 1 704 9 view .LVU631
 2779               		.loc 1 704 13 is_stmt 0 view .LVU632
 2780 0016 62E0      		ldi r22,lo8(2)
 2781 0018 70E0      		ldi r23,0
 2782 001a 80E0      		ldi r24,lo8(display_inverted.2313)
 2783 001c 90E0      		ldi r25,hi8(display_inverted.2313)
 2784 001e 0E94 0000 		call i2c_transmit_P.constprop.2
 2785               	.LVL190:
 2786               		.loc 1 704 12 view .LVU633
 2787 0022 892B      		or r24,r25
 2788 0024 01F0      		breq .L155
 2789               	.L154:
 2790               	.LBE74:
 705:drivers/oled/ssd1306_sh1106.c ****             print("oled_invert cmd failed\n");
 706:drivers/oled/ssd1306_sh1106.c ****             return oled_inverted;
 707:drivers/oled/ssd1306_sh1106.c ****         }
 708:drivers/oled/ssd1306_sh1106.c ****         oled_inverted = true;
 709:drivers/oled/ssd1306_sh1106.c ****     } else if (!invert && oled_inverted) {
 710:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, NORMAL_DISPLAY};
 711:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_normal) != I2C_STATUS_SUCCESS) {
 712:drivers/oled/ssd1306_sh1106.c ****             print("oled_invert cmd failed\n");
 713:drivers/oled/ssd1306_sh1106.c ****             return oled_inverted;
 714:drivers/oled/ssd1306_sh1106.c ****         }
 715:drivers/oled/ssd1306_sh1106.c ****         oled_inverted = false;
 716:drivers/oled/ssd1306_sh1106.c ****     }
 717:drivers/oled/ssd1306_sh1106.c **** 
 718:drivers/oled/ssd1306_sh1106.c ****     return oled_inverted;
 2791               		.loc 1 718 5 is_stmt 1 view .LVU634
 2792               		.loc 1 718 12 is_stmt 0 view .LVU635
 2793 0026 8091 0000 		lds r24,oled_inverted
 2794               	.L151:
 2795               	/* epilogue start */
 719:drivers/oled/ssd1306_sh1106.c **** }
 2796               		.loc 1 719 1 view .LVU636
 2797 002a 0895      		ret
 2798               	.L155:
 2799               	.LBB75:
 708:drivers/oled/ssd1306_sh1106.c ****     } else if (!invert && oled_inverted) {
 2800               		.loc 1 708 9 is_stmt 1 view .LVU637
 708:drivers/oled/ssd1306_sh1106.c ****     } else if (!invert && oled_inverted) {
 2801               		.loc 1 708 23 is_stmt 0 view .LVU638
 2802 002c 81E0      		ldi r24,lo8(1)
 2803 002e 8093 0000 		sts oled_inverted,r24
 2804               	.LBE75:
 702:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_inverted[] = {I2C_CMD, INVERT_DISPLAY};
 2805               		.loc 1 702 35 view .LVU639
 2806 0032 00C0      		rjmp .L154
 2807               	.LVL191:
 2808               	.L153:
 709:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, NORMAL_DISPLAY};
 2809               		.loc 1 709 12 is_stmt 1 discriminator 1 view .LVU640
 709:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, NORMAL_DISPLAY};
 2810               		.loc 1 709 24 is_stmt 0 discriminator 1 view .LVU641
 2811 0034 8823      		tst r24
 2812 0036 01F0      		breq .L154
 2813               	.LBB76:
 710:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_normal) != I2C_STATUS_SUCCESS) {
 2814               		.loc 1 710 9 is_stmt 1 view .LVU642
 711:drivers/oled/ssd1306_sh1106.c ****             print("oled_invert cmd failed\n");
 2815               		.loc 1 711 9 view .LVU643
 711:drivers/oled/ssd1306_sh1106.c ****             print("oled_invert cmd failed\n");
 2816               		.loc 1 711 13 is_stmt 0 view .LVU644
 2817 0038 62E0      		ldi r22,lo8(2)
 2818 003a 70E0      		ldi r23,0
 2819 003c 80E0      		ldi r24,lo8(display_normal.2314)
 2820 003e 90E0      		ldi r25,hi8(display_normal.2314)
 2821 0040 0E94 0000 		call i2c_transmit_P.constprop.2
 2822               	.LVL192:
 711:drivers/oled/ssd1306_sh1106.c ****             print("oled_invert cmd failed\n");
 2823               		.loc 1 711 12 view .LVU645
 2824 0044 892B      		or r24,r25
 2825 0046 01F4      		brne .L154
 715:drivers/oled/ssd1306_sh1106.c ****     }
 2826               		.loc 1 715 9 is_stmt 1 view .LVU646
 715:drivers/oled/ssd1306_sh1106.c ****     }
 2827               		.loc 1 715 23 is_stmt 0 view .LVU647
 2828 0048 1092 0000 		sts oled_inverted,__zero_reg__
 2829 004c 00C0      		rjmp .L154
 2830               	.LBE76:
 2831               		.cfi_endproc
 2832               	.LFE41:
 2834               		.section	.text.oled_max_chars,"ax",@progbits
 2835               	.global	oled_max_chars
 2837               	oled_max_chars:
 2838               	.LFB42:
 720:drivers/oled/ssd1306_sh1106.c **** 
 721:drivers/oled/ssd1306_sh1106.c **** uint8_t oled_max_chars(void) {
 2839               		.loc 1 721 30 is_stmt 1 view -0
 2840               		.cfi_startproc
 2841               	/* prologue: function */
 2842               	/* frame size = 0 */
 2843               	/* stack size = 0 */
 2844               	.L__stack_usage = 0
 722:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 2845               		.loc 1 722 5 view .LVU649
 2846               		.loc 1 722 8 is_stmt 0 view .LVU650
 2847 0000 8091 0000 		lds r24,oled_rotation
 2848 0004 80FD      		sbrc r24,0
 2849 0006 00C0      		rjmp .L165
 723:drivers/oled/ssd1306_sh1106.c ****         return OLED_DISPLAY_WIDTH / OLED_FONT_WIDTH;
 2850               		.loc 1 723 16 view .LVU651
 2851 0008 85E1      		ldi r24,lo8(21)
 2852 000a 0895      		ret
 2853               	.L165:
 724:drivers/oled/ssd1306_sh1106.c ****     }
 725:drivers/oled/ssd1306_sh1106.c ****     return OLED_DISPLAY_HEIGHT / OLED_FONT_WIDTH;
 2854               		.loc 1 725 12 view .LVU652
 2855 000c 85E0      		ldi r24,lo8(5)
 2856               	/* epilogue start */
 726:drivers/oled/ssd1306_sh1106.c **** }
 2857               		.loc 1 726 1 view .LVU653
 2858 000e 0895      		ret
 2859               		.cfi_endproc
 2860               	.LFE42:
 2862               		.section	.text.oled_max_lines,"ax",@progbits
 2863               	.global	oled_max_lines
 2865               	oled_max_lines:
 2866               	.LFB43:
 727:drivers/oled/ssd1306_sh1106.c **** 
 728:drivers/oled/ssd1306_sh1106.c **** uint8_t oled_max_lines(void) {
 2867               		.loc 1 728 30 is_stmt 1 view -0
 2868               		.cfi_startproc
 2869               	/* prologue: function */
 2870               	/* frame size = 0 */
 2871               	/* stack size = 0 */
 2872               	.L__stack_usage = 0
 729:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 2873               		.loc 1 729 5 view .LVU655
 2874               		.loc 1 729 8 is_stmt 0 view .LVU656
 2875 0000 8091 0000 		lds r24,oled_rotation
 2876 0004 80FD      		sbrc r24,0
 2877 0006 00C0      		rjmp .L168
 730:drivers/oled/ssd1306_sh1106.c ****         return OLED_DISPLAY_HEIGHT / OLED_FONT_HEIGHT;
 2878               		.loc 1 730 16 view .LVU657
 2879 0008 84E0      		ldi r24,lo8(4)
 2880 000a 0895      		ret
 2881               	.L168:
 731:drivers/oled/ssd1306_sh1106.c ****     }
 732:drivers/oled/ssd1306_sh1106.c ****     return OLED_DISPLAY_WIDTH / OLED_FONT_HEIGHT;
 2882               		.loc 1 732 12 view .LVU658
 2883 000c 80E1      		ldi r24,lo8(16)
 2884               	/* epilogue start */
 733:drivers/oled/ssd1306_sh1106.c **** }
 2885               		.loc 1 733 1 view .LVU659
 2886 000e 0895      		ret
 2887               		.cfi_endproc
 2888               	.LFE43:
 2890               		.section	.text.oled_task_user,"ax",@progbits
 2891               		.weak	oled_task_user
 2893               	oled_task_user:
 2894               	.LFB45:
 734:drivers/oled/ssd1306_sh1106.c **** 
 735:drivers/oled/ssd1306_sh1106.c **** void oled_task(void) {
 736:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 737:drivers/oled/ssd1306_sh1106.c ****         return;
 738:drivers/oled/ssd1306_sh1106.c ****     }
 739:drivers/oled/ssd1306_sh1106.c **** 
 740:drivers/oled/ssd1306_sh1106.c **** #if OLED_UPDATE_INTERVAL > 0
 741:drivers/oled/ssd1306_sh1106.c ****     if (timer_elapsed(oled_update_timeout) >= OLED_UPDATE_INTERVAL) {
 742:drivers/oled/ssd1306_sh1106.c ****         oled_update_timeout = timer_read();
 743:drivers/oled/ssd1306_sh1106.c ****         oled_set_cursor(0, 0);
 744:drivers/oled/ssd1306_sh1106.c ****         oled_task_user();
 745:drivers/oled/ssd1306_sh1106.c ****     }
 746:drivers/oled/ssd1306_sh1106.c **** #else
 747:drivers/oled/ssd1306_sh1106.c ****     oled_set_cursor(0, 0);
 748:drivers/oled/ssd1306_sh1106.c ****     oled_task_user();
 749:drivers/oled/ssd1306_sh1106.c **** #endif
 750:drivers/oled/ssd1306_sh1106.c **** 
 751:drivers/oled/ssd1306_sh1106.c **** #if OLED_SCROLL_TIMEOUT > 0
 752:drivers/oled/ssd1306_sh1106.c ****     if (oled_dirty && oled_scrolling) {
 753:drivers/oled/ssd1306_sh1106.c ****         oled_scroll_timeout = timer_read32() + OLED_SCROLL_TIMEOUT;
 754:drivers/oled/ssd1306_sh1106.c ****         oled_scroll_off();
 755:drivers/oled/ssd1306_sh1106.c ****     }
 756:drivers/oled/ssd1306_sh1106.c **** #endif
 757:drivers/oled/ssd1306_sh1106.c **** 
 758:drivers/oled/ssd1306_sh1106.c ****     // Smart render system, no need to check for dirty
 759:drivers/oled/ssd1306_sh1106.c ****     oled_render();
 760:drivers/oled/ssd1306_sh1106.c **** 
 761:drivers/oled/ssd1306_sh1106.c ****     // Display timeout check
 762:drivers/oled/ssd1306_sh1106.c **** #if OLED_TIMEOUT > 0
 763:drivers/oled/ssd1306_sh1106.c ****     if (oled_active && timer_expired32(timer_read32(), oled_timeout)) {
 764:drivers/oled/ssd1306_sh1106.c ****         oled_off();
 765:drivers/oled/ssd1306_sh1106.c ****     }
 766:drivers/oled/ssd1306_sh1106.c **** #endif
 767:drivers/oled/ssd1306_sh1106.c **** 
 768:drivers/oled/ssd1306_sh1106.c **** #if OLED_SCROLL_TIMEOUT > 0
 769:drivers/oled/ssd1306_sh1106.c ****     if (!oled_scrolling && timer_expired32(timer_read32(), oled_scroll_timeout)) {
 770:drivers/oled/ssd1306_sh1106.c **** #    ifdef OLED_SCROLL_TIMEOUT_RIGHT
 771:drivers/oled/ssd1306_sh1106.c ****         oled_scroll_right();
 772:drivers/oled/ssd1306_sh1106.c **** #    else
 773:drivers/oled/ssd1306_sh1106.c ****         oled_scroll_left();
 774:drivers/oled/ssd1306_sh1106.c **** #    endif
 775:drivers/oled/ssd1306_sh1106.c ****     }
 776:drivers/oled/ssd1306_sh1106.c **** #endif
 777:drivers/oled/ssd1306_sh1106.c **** }
 778:drivers/oled/ssd1306_sh1106.c **** 
 779:drivers/oled/ssd1306_sh1106.c **** __attribute__((weak)) void oled_task_user(void) {}
 2895               		.loc 1 779 49 is_stmt 1 view -0
 2896               		.cfi_startproc
 2897               	/* prologue: function */
 2898               	/* frame size = 0 */
 2899               	/* stack size = 0 */
 2900               	.L__stack_usage = 0
 2901               		.loc 1 779 50 view .LVU661
 2902               	/* epilogue start */
 2903               		.loc 1 779 1 is_stmt 0 view .LVU662
 2904 0000 0895      		ret
 2905               		.cfi_endproc
 2906               	.LFE45:
 2908               		.section	.text.oled_task,"ax",@progbits
 2909               	.global	oled_task
 2911               	oled_task:
 2912               	.LFB44:
 735:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2913               		.loc 1 735 22 is_stmt 1 view -0
 2914               		.cfi_startproc
 2915 0000 0F93      		push r16
 2916               	.LCFI52:
 2917               		.cfi_def_cfa_offset 3
 2918               		.cfi_offset 16, -2
 2919 0002 1F93      		push r17
 2920               	.LCFI53:
 2921               		.cfi_def_cfa_offset 4
 2922               		.cfi_offset 17, -3
 2923               	/* prologue: function */
 2924               	/* frame size = 0 */
 2925               	/* stack size = 2 */
 2926               	.L__stack_usage = 2
 736:drivers/oled/ssd1306_sh1106.c ****         return;
 2927               		.loc 1 736 5 view .LVU664
 736:drivers/oled/ssd1306_sh1106.c ****         return;
 2928               		.loc 1 736 8 is_stmt 0 view .LVU665
 2929 0004 8091 0000 		lds r24,oled_initialized
 2930 0008 8823      		tst r24
 2931 000a 01F0      		breq .L170
 741:drivers/oled/ssd1306_sh1106.c ****         oled_update_timeout = timer_read();
 2932               		.loc 1 741 5 is_stmt 1 view .LVU666
 741:drivers/oled/ssd1306_sh1106.c ****         oled_update_timeout = timer_read();
 2933               		.loc 1 741 9 is_stmt 0 view .LVU667
 2934 000c 8091 0000 		lds r24,oled_update_timeout
 2935 0010 9091 0000 		lds r25,oled_update_timeout+1
 2936 0014 0E94 0000 		call timer_elapsed
 2937               	.LVL193:
 741:drivers/oled/ssd1306_sh1106.c ****         oled_update_timeout = timer_read();
 2938               		.loc 1 741 8 view .LVU668
 2939 0018 C297      		sbiw r24,50
 2940 001a 00F0      		brlo .L173
 742:drivers/oled/ssd1306_sh1106.c ****         oled_set_cursor(0, 0);
 2941               		.loc 1 742 9 is_stmt 1 view .LVU669
 742:drivers/oled/ssd1306_sh1106.c ****         oled_set_cursor(0, 0);
 2942               		.loc 1 742 31 is_stmt 0 view .LVU670
 2943 001c 0E94 0000 		call timer_read
 2944               	.LVL194:
 742:drivers/oled/ssd1306_sh1106.c ****         oled_set_cursor(0, 0);
 2945               		.loc 1 742 29 view .LVU671
 2946 0020 9093 0000 		sts oled_update_timeout+1,r25
 2947 0024 8093 0000 		sts oled_update_timeout,r24
 743:drivers/oled/ssd1306_sh1106.c ****         oled_task_user();
 2948               		.loc 1 743 9 is_stmt 1 view .LVU672
 2949 0028 60E0      		ldi r22,0
 2950 002a 80E0      		ldi r24,0
 2951 002c 0E94 0000 		call oled_set_cursor
 2952               	.LVL195:
 744:drivers/oled/ssd1306_sh1106.c ****     }
 2953               		.loc 1 744 9 view .LVU673
 2954 0030 0E94 0000 		call oled_task_user
 2955               	.LVL196:
 2956               	.L173:
 759:drivers/oled/ssd1306_sh1106.c **** 
 2957               		.loc 1 759 5 view .LVU674
 2958 0034 0E94 0000 		call oled_render
 2959               	.LVL197:
 763:drivers/oled/ssd1306_sh1106.c ****         oled_off();
 2960               		.loc 1 763 5 view .LVU675
 763:drivers/oled/ssd1306_sh1106.c ****         oled_off();
 2961               		.loc 1 763 8 is_stmt 0 view .LVU676
 2962 0038 8091 0000 		lds r24,oled_active
 2963 003c 8823      		tst r24
 2964 003e 01F0      		breq .L170
 763:drivers/oled/ssd1306_sh1106.c ****         oled_off();
 2965               		.loc 1 763 24 discriminator 1 view .LVU677
 2966 0040 0E94 0000 		call timer_read32
 2967               	.LVL198:
 2968 0044 0091 0000 		lds r16,oled_timeout
 2969 0048 1091 0000 		lds r17,oled_timeout+1
 2970 004c 2091 0000 		lds r18,oled_timeout+2
 2971 0050 3091 0000 		lds r19,oled_timeout+3
 2972 0054 601B      		sub r22,r16
 2973 0056 710B      		sbc r23,r17
 2974 0058 820B      		sbc r24,r18
 2975 005a 930B      		sbc r25,r19
 763:drivers/oled/ssd1306_sh1106.c ****         oled_off();
 2976               		.loc 1 763 21 discriminator 1 view .LVU678
 2977 005c 6F3F      		cpi r22,-1
 2978 005e 7F4F      		sbci r23,-1
 2979 0060 8F4F      		sbci r24,-1
 2980 0062 9F47      		sbci r25,127
 2981 0064 00F4      		brsh .L170
 764:drivers/oled/ssd1306_sh1106.c ****     }
 2982               		.loc 1 764 9 is_stmt 1 view .LVU679
 2983               	/* epilogue start */
 777:drivers/oled/ssd1306_sh1106.c **** 
 2984               		.loc 1 777 1 is_stmt 0 view .LVU680
 2985 0066 1F91      		pop r17
 2986 0068 0F91      		pop r16
 764:drivers/oled/ssd1306_sh1106.c ****     }
 2987               		.loc 1 764 9 view .LVU681
 2988 006a 0C94 0000 		jmp oled_off
 2989               	.LVL199:
 2990               	.L170:
 2991               	/* epilogue start */
 777:drivers/oled/ssd1306_sh1106.c **** 
 2992               		.loc 1 777 1 view .LVU682
 2993 006e 1F91      		pop r17
 2994 0070 0F91      		pop r16
 2995 0072 0895      		ret
 2996               		.cfi_endproc
 2997               	.LFE44:
 2999               		.section	.progmem.data.display_normal.2314,"a"
 3002               	display_normal.2314:
 3003 0000 00        		.byte	0
 3004 0001 A6        		.byte	-90
 3005               		.section	.progmem.data.display_inverted.2313,"a"
 3008               	display_inverted.2313:
 3009 0000 00        		.byte	0
 3010 0001 A7        		.byte	-89
 3011               		.section	.progmem.data.display_scroll_off.2306,"a"
 3014               	display_scroll_off.2306:
 3015 0000 00        		.byte	0
 3016 0001 2E        		.byte	46
 3017               		.section	.rodata.scroll_remap.2294,"a"
 3020               	scroll_remap.2294:
 3021 0000 07        		.byte	7
 3022 0001 04        		.byte	4
 3023 0002 05        		.byte	5
 3024 0003 00        		.byte	0
 3025 0004 06        		.byte	6
 3026 0005 01        		.byte	1
 3027 0006 02        		.byte	2
 3028 0007 03        		.byte	3
 3029               		.section	.progmem.data.display_off.2276,"a"
 3032               	display_off.2276:
 3033 0000 00        		.byte	0
 3034 0001 AE        		.byte	-82
 3035               		.section	.progmem.data.display_on.2272,"a"
 3038               	display_on.2272:
 3039 0000 00        		.byte	0
 3040 0001 AF        		.byte	-81
 3041               		.section	.bss.oled_temp_buffer.2179,"aw",@nobits
 3044               	oled_temp_buffer.2179:
 3045 0000 0000 0000 		.zero	6
 3045      0000 
 3046               		.section	.rodata.source_map.2150,"a"
 3049               	source_map.2150:
 3050 0000 00        		.byte	0
 3051 0001 08        		.byte	8
 3052 0002 10        		.byte	16
 3053 0003 18        		.byte	24
 3054               		.section	.rodata.target_map.2151,"a"
 3057               	target_map.2151:
 3058 0000 18        		.byte	24
 3059 0001 10        		.byte	16
 3060 0002 08        		.byte	8
 3061 0003 00        		.byte	0
 3062               		.section	.bss.temp_buffer.2152,"aw",@nobits
 3065               	temp_buffer.2152:
 3066 0000 0000 0000 		.zero	32
 3066      0000 0000 
 3066      0000 0000 
 3066      0000 0000 
 3066      0000 0000 
 3067               		.section	.data.display_start.2149,"aw"
 3070               	display_start.2149:
 3071 0000 00        		.byte	0
 3072 0001 21        		.byte	33
 3073 0002 00        		.byte	0
 3074 0003 7F        		.byte	127
 3075 0004 22        		.byte	34
 3076 0005 00        		.byte	0
 3077 0006 03        		.byte	3
 3078               		.section	.progmem.data.display_setup2.2106,"a"
 3081               	display_setup2.2106:
 3082 0000 00        		.byte	0
 3083 0001 DA        		.byte	-38
 3084 0002 02        		.byte	2
 3085 0003 81        		.byte	-127
 3086 0004 FF        		.byte	-1
 3087 0005 D9        		.byte	-39
 3088 0006 F1        		.byte	-15
 3089 0007 DB        		.byte	-37
 3090 0008 20        		.byte	32
 3091 0009 A4        		.byte	-92
 3092 000a A6        		.byte	-90
 3093 000b 2E        		.byte	46
 3094 000c AF        		.byte	-81
 3095               		.section	.progmem.data.display_flipped.2105,"a"
 3098               	display_flipped.2105:
 3099 0000 00        		.byte	0
 3100 0001 A0        		.byte	-96
 3101 0002 C0        		.byte	-64
 3102               		.section	.progmem.data.display_normal.2104,"a"
 3105               	display_normal.2104:
 3106 0000 00        		.byte	0
 3107 0001 A1        		.byte	-95
 3108 0002 C8        		.byte	-56
 3109               		.section	.progmem.data.display_setup1.2103,"a"
 3112               	display_setup1.2103:
 3113 0000 00        		.byte	0
 3114 0001 AE        		.byte	-82
 3115 0002 D5        		.byte	-43
 3116 0003 80        		.byte	-128
 3117 0004 A8        		.byte	-88
 3118 0005 1F        		.byte	31
 3119 0006 D3        		.byte	-45
 3120 0007 00        		.byte	0
 3121 0008 40        		.byte	64
 3122 0009 8D        		.byte	-115
 3123 000a 14        		.byte	20
 3124 000b 20        		.byte	32
 3125 000c 00        		.byte	0
 3126               		.comm	oled_update_timeout,2,1
 3127               		.comm	oled_timeout,4,1
 3128               	.global	oled_scroll_end
 3129               		.section	.data.oled_scroll_end,"aw"
 3132               	oled_scroll_end:
 3133 0000 07        		.byte	7
 3134               	.global	oled_scroll_start
 3135               		.section	.bss.oled_scroll_start,"aw",@nobits
 3138               	oled_scroll_start:
 3139 0000 00        		.zero	1
 3140               	.global	oled_scroll_speed
 3141               		.section	.bss.oled_scroll_speed,"aw",@nobits
 3144               	oled_scroll_speed:
 3145 0000 00        		.zero	1
 3146               	.global	oled_rotation_width
 3147               		.section	.bss.oled_rotation_width,"aw",@nobits
 3150               	oled_rotation_width:
 3151 0000 00        		.zero	1
 3152               	.global	oled_rotation
 3153               		.section	.bss.oled_rotation,"aw",@nobits
 3156               	oled_rotation:
 3157 0000 00        		.zero	1
 3158               	.global	oled_brightness
 3159               		.section	.data.oled_brightness,"aw"
 3162               	oled_brightness:
 3163 0000 FF        		.byte	-1
 3164               	.global	oled_inverted
 3165               		.section	.bss.oled_inverted,"aw",@nobits
 3168               	oled_inverted:
 3169 0000 00        		.zero	1
 3170               	.global	oled_scrolling
 3171               		.section	.bss.oled_scrolling,"aw",@nobits
 3174               	oled_scrolling:
 3175 0000 00        		.zero	1
 3176               	.global	oled_active
 3177               		.section	.bss.oled_active,"aw",@nobits
 3180               	oled_active:
 3181 0000 00        		.zero	1
 3182               	.global	oled_initialized
 3183               		.section	.bss.oled_initialized,"aw",@nobits
 3186               	oled_initialized:
 3187 0000 00        		.zero	1
 3188               	.global	oled_dirty
 3189               		.section	.bss.oled_dirty,"aw",@nobits
 3192               	oled_dirty:
 3193 0000 0000      		.zero	2
 3194               		.comm	oled_cursor,2,1
 3195               		.comm	oled_buffer,512,1
 3196               		.section	.progmem.data.font,"a"
 3199               	font:
 3200 0000 07        		.byte	7
 3201 0001 08        		.byte	8
 3202 0002 7F        		.byte	127
 3203 0003 08        		.byte	8
 3204 0004 07        		.byte	7
 3205 0005 00        		.byte	0
 3206 0006 3E        		.byte	62
 3207 0007 5B        		.byte	91
 3208 0008 4F        		.byte	79
 3209 0009 5B        		.byte	91
 3210 000a 3E        		.byte	62
 3211 000b 00        		.byte	0
 3212 000c 3E        		.byte	62
 3213 000d 6B        		.byte	107
 3214 000e 4F        		.byte	79
 3215 000f 6B        		.byte	107
 3216 0010 3E        		.byte	62
 3217 0011 00        		.byte	0
 3218 0012 1C        		.byte	28
 3219 0013 3E        		.byte	62
 3220 0014 7C        		.byte	124
 3221 0015 3E        		.byte	62
 3222 0016 1C        		.byte	28
 3223 0017 00        		.byte	0
 3224 0018 18        		.byte	24
 3225 0019 3C        		.byte	60
 3226 001a 7E        		.byte	126
 3227 001b 3C        		.byte	60
 3228 001c 18        		.byte	24
 3229 001d 00        		.byte	0
 3230 001e 1C        		.byte	28
 3231 001f 57        		.byte	87
 3232 0020 7D        		.byte	125
 3233 0021 57        		.byte	87
 3234 0022 1C        		.byte	28
 3235 0023 00        		.byte	0
 3236 0024 1C        		.byte	28
 3237 0025 5E        		.byte	94
 3238 0026 7F        		.byte	127
 3239 0027 5E        		.byte	94
 3240 0028 1C        		.byte	28
 3241 0029 00        		.byte	0
 3242 002a 00        		.byte	0
 3243 002b 18        		.byte	24
 3244 002c 3C        		.byte	60
 3245 002d 18        		.byte	24
 3246 002e 00        		.byte	0
 3247 002f 00        		.byte	0
 3248 0030 FF        		.byte	-1
 3249 0031 E7        		.byte	-25
 3250 0032 C3        		.byte	-61
 3251 0033 E7        		.byte	-25
 3252 0034 FF        		.byte	-1
 3253 0035 00        		.byte	0
 3254 0036 00        		.byte	0
 3255 0037 18        		.byte	24
 3256 0038 24        		.byte	36
 3257 0039 18        		.byte	24
 3258 003a 00        		.byte	0
 3259 003b 00        		.byte	0
 3260 003c FF        		.byte	-1
 3261 003d E7        		.byte	-25
 3262 003e DB        		.byte	-37
 3263 003f E7        		.byte	-25
 3264 0040 FF        		.byte	-1
 3265 0041 00        		.byte	0
 3266 0042 30        		.byte	48
 3267 0043 48        		.byte	72
 3268 0044 3A        		.byte	58
 3269 0045 06        		.byte	6
 3270 0046 0E        		.byte	14
 3271 0047 00        		.byte	0
 3272 0048 26        		.byte	38
 3273 0049 29        		.byte	41
 3274 004a 79        		.byte	121
 3275 004b 29        		.byte	41
 3276 004c 26        		.byte	38
 3277 004d 00        		.byte	0
 3278 004e 40        		.byte	64
 3279 004f 7F        		.byte	127
 3280 0050 05        		.byte	5
 3281 0051 05        		.byte	5
 3282 0052 07        		.byte	7
 3283 0053 00        		.byte	0
 3284 0054 40        		.byte	64
 3285 0055 7F        		.byte	127
 3286 0056 05        		.byte	5
 3287 0057 25        		.byte	37
 3288 0058 3F        		.byte	63
 3289 0059 00        		.byte	0
 3290 005a 5A        		.byte	90
 3291 005b 3C        		.byte	60
 3292 005c E7        		.byte	-25
 3293 005d 3C        		.byte	60
 3294 005e 5A        		.byte	90
 3295 005f 00        		.byte	0
 3296 0060 7F        		.byte	127
 3297 0061 3E        		.byte	62
 3298 0062 1C        		.byte	28
 3299 0063 1C        		.byte	28
 3300 0064 08        		.byte	8
 3301 0065 00        		.byte	0
 3302 0066 08        		.byte	8
 3303 0067 1C        		.byte	28
 3304 0068 1C        		.byte	28
 3305 0069 3E        		.byte	62
 3306 006a 7F        		.byte	127
 3307 006b 00        		.byte	0
 3308 006c 14        		.byte	20
 3309 006d 22        		.byte	34
 3310 006e 7F        		.byte	127
 3311 006f 22        		.byte	34
 3312 0070 14        		.byte	20
 3313 0071 00        		.byte	0
 3314 0072 5F        		.byte	95
 3315 0073 5F        		.byte	95
 3316 0074 00        		.byte	0
 3317 0075 5F        		.byte	95
 3318 0076 5F        		.byte	95
 3319 0077 00        		.byte	0
 3320 0078 06        		.byte	6
 3321 0079 09        		.byte	9
 3322 007a 7F        		.byte	127
 3323 007b 01        		.byte	1
 3324 007c 7F        		.byte	127
 3325 007d 00        		.byte	0
 3326 007e 00        		.byte	0
 3327 007f 66        		.byte	102
 3328 0080 89        		.byte	-119
 3329 0081 95        		.byte	-107
 3330 0082 6A        		.byte	106
 3331 0083 00        		.byte	0
 3332 0084 60        		.byte	96
 3333 0085 60        		.byte	96
 3334 0086 60        		.byte	96
 3335 0087 60        		.byte	96
 3336 0088 60        		.byte	96
 3337 0089 00        		.byte	0
 3338 008a 94        		.byte	-108
 3339 008b A2        		.byte	-94
 3340 008c FF        		.byte	-1
 3341 008d A2        		.byte	-94
 3342 008e 94        		.byte	-108
 3343 008f 00        		.byte	0
 3344 0090 08        		.byte	8
 3345 0091 04        		.byte	4
 3346 0092 7E        		.byte	126
 3347 0093 04        		.byte	4
 3348 0094 08        		.byte	8
 3349 0095 00        		.byte	0
 3350 0096 10        		.byte	16
 3351 0097 20        		.byte	32
 3352 0098 7E        		.byte	126
 3353 0099 20        		.byte	32
 3354 009a 10        		.byte	16
 3355 009b 00        		.byte	0
 3356 009c 08        		.byte	8
 3357 009d 08        		.byte	8
 3358 009e 2A        		.byte	42
 3359 009f 1C        		.byte	28
 3360 00a0 08        		.byte	8
 3361 00a1 00        		.byte	0
 3362 00a2 08        		.byte	8
 3363 00a3 1C        		.byte	28
 3364 00a4 2A        		.byte	42
 3365 00a5 08        		.byte	8
 3366 00a6 08        		.byte	8
 3367 00a7 00        		.byte	0
 3368 00a8 1E        		.byte	30
 3369 00a9 10        		.byte	16
 3370 00aa 10        		.byte	16
 3371 00ab 10        		.byte	16
 3372 00ac 10        		.byte	16
 3373 00ad 00        		.byte	0
 3374 00ae 0C        		.byte	12
 3375 00af 1E        		.byte	30
 3376 00b0 0C        		.byte	12
 3377 00b1 1E        		.byte	30
 3378 00b2 0C        		.byte	12
 3379 00b3 00        		.byte	0
 3380 00b4 30        		.byte	48
 3381 00b5 38        		.byte	56
 3382 00b6 3E        		.byte	62
 3383 00b7 38        		.byte	56
 3384 00b8 30        		.byte	48
 3385 00b9 00        		.byte	0
 3386 00ba 06        		.byte	6
 3387 00bb 0E        		.byte	14
 3388 00bc 3E        		.byte	62
 3389 00bd 0E        		.byte	14
 3390 00be 06        		.byte	6
 3391 00bf 00        		.byte	0
 3392 00c0 00        		.byte	0
 3393 00c1 00        		.byte	0
 3394 00c2 00        		.byte	0
 3395 00c3 00        		.byte	0
 3396 00c4 00        		.byte	0
 3397 00c5 00        		.byte	0
 3398 00c6 00        		.byte	0
 3399 00c7 00        		.byte	0
 3400 00c8 5F        		.byte	95
 3401 00c9 00        		.byte	0
 3402 00ca 00        		.byte	0
 3403 00cb 00        		.byte	0
 3404 00cc 00        		.byte	0
 3405 00cd 07        		.byte	7
 3406 00ce 00        		.byte	0
 3407 00cf 07        		.byte	7
 3408 00d0 00        		.byte	0
 3409 00d1 00        		.byte	0
 3410 00d2 14        		.byte	20
 3411 00d3 7F        		.byte	127
 3412 00d4 14        		.byte	20
 3413 00d5 7F        		.byte	127
 3414 00d6 14        		.byte	20
 3415 00d7 00        		.byte	0
 3416 00d8 24        		.byte	36
 3417 00d9 2A        		.byte	42
 3418 00da 7F        		.byte	127
 3419 00db 2A        		.byte	42
 3420 00dc 12        		.byte	18
 3421 00dd 00        		.byte	0
 3422 00de 23        		.byte	35
 3423 00df 13        		.byte	19
 3424 00e0 08        		.byte	8
 3425 00e1 64        		.byte	100
 3426 00e2 62        		.byte	98
 3427 00e3 00        		.byte	0
 3428 00e4 36        		.byte	54
 3429 00e5 49        		.byte	73
 3430 00e6 56        		.byte	86
 3431 00e7 20        		.byte	32
 3432 00e8 50        		.byte	80
 3433 00e9 00        		.byte	0
 3434 00ea 00        		.byte	0
 3435 00eb 08        		.byte	8
 3436 00ec 07        		.byte	7
 3437 00ed 03        		.byte	3
 3438 00ee 00        		.byte	0
 3439 00ef 00        		.byte	0
 3440 00f0 00        		.byte	0
 3441 00f1 1C        		.byte	28
 3442 00f2 22        		.byte	34
 3443 00f3 41        		.byte	65
 3444 00f4 00        		.byte	0
 3445 00f5 00        		.byte	0
 3446 00f6 00        		.byte	0
 3447 00f7 41        		.byte	65
 3448 00f8 22        		.byte	34
 3449 00f9 1C        		.byte	28
 3450 00fa 00        		.byte	0
 3451 00fb 00        		.byte	0
 3452 00fc 2A        		.byte	42
 3453 00fd 1C        		.byte	28
 3454 00fe 7F        		.byte	127
 3455 00ff 1C        		.byte	28
 3456 0100 2A        		.byte	42
 3457 0101 00        		.byte	0
 3458 0102 08        		.byte	8
 3459 0103 08        		.byte	8
 3460 0104 3E        		.byte	62
 3461 0105 08        		.byte	8
 3462 0106 08        		.byte	8
 3463 0107 00        		.byte	0
 3464 0108 00        		.byte	0
 3465 0109 80        		.byte	-128
 3466 010a 70        		.byte	112
 3467 010b 30        		.byte	48
 3468 010c 00        		.byte	0
 3469 010d 00        		.byte	0
 3470 010e 08        		.byte	8
 3471 010f 08        		.byte	8
 3472 0110 08        		.byte	8
 3473 0111 08        		.byte	8
 3474 0112 08        		.byte	8
 3475 0113 00        		.byte	0
 3476 0114 00        		.byte	0
 3477 0115 00        		.byte	0
 3478 0116 60        		.byte	96
 3479 0117 60        		.byte	96
 3480 0118 00        		.byte	0
 3481 0119 00        		.byte	0
 3482 011a 20        		.byte	32
 3483 011b 10        		.byte	16
 3484 011c 08        		.byte	8
 3485 011d 04        		.byte	4
 3486 011e 02        		.byte	2
 3487 011f 00        		.byte	0
 3488 0120 3E        		.byte	62
 3489 0121 51        		.byte	81
 3490 0122 49        		.byte	73
 3491 0123 45        		.byte	69
 3492 0124 3E        		.byte	62
 3493 0125 00        		.byte	0
 3494 0126 00        		.byte	0
 3495 0127 42        		.byte	66
 3496 0128 7F        		.byte	127
 3497 0129 40        		.byte	64
 3498 012a 00        		.byte	0
 3499 012b 00        		.byte	0
 3500 012c 72        		.byte	114
 3501 012d 49        		.byte	73
 3502 012e 49        		.byte	73
 3503 012f 49        		.byte	73
 3504 0130 46        		.byte	70
 3505 0131 00        		.byte	0
 3506 0132 21        		.byte	33
 3507 0133 41        		.byte	65
 3508 0134 49        		.byte	73
 3509 0135 4D        		.byte	77
 3510 0136 33        		.byte	51
 3511 0137 00        		.byte	0
 3512 0138 18        		.byte	24
 3513 0139 14        		.byte	20
 3514 013a 12        		.byte	18
 3515 013b 7F        		.byte	127
 3516 013c 10        		.byte	16
 3517 013d 00        		.byte	0
 3518 013e 27        		.byte	39
 3519 013f 45        		.byte	69
 3520 0140 45        		.byte	69
 3521 0141 45        		.byte	69
 3522 0142 39        		.byte	57
 3523 0143 00        		.byte	0
 3524 0144 3C        		.byte	60
 3525 0145 4A        		.byte	74
 3526 0146 49        		.byte	73
 3527 0147 49        		.byte	73
 3528 0148 31        		.byte	49
 3529 0149 00        		.byte	0
 3530 014a 41        		.byte	65
 3531 014b 21        		.byte	33
 3532 014c 11        		.byte	17
 3533 014d 09        		.byte	9
 3534 014e 07        		.byte	7
 3535 014f 00        		.byte	0
 3536 0150 36        		.byte	54
 3537 0151 49        		.byte	73
 3538 0152 49        		.byte	73
 3539 0153 49        		.byte	73
 3540 0154 36        		.byte	54
 3541 0155 00        		.byte	0
 3542 0156 46        		.byte	70
 3543 0157 49        		.byte	73
 3544 0158 49        		.byte	73
 3545 0159 29        		.byte	41
 3546 015a 1E        		.byte	30
 3547 015b 00        		.byte	0
 3548 015c 00        		.byte	0
 3549 015d 00        		.byte	0
 3550 015e 14        		.byte	20
 3551 015f 00        		.byte	0
 3552 0160 00        		.byte	0
 3553 0161 00        		.byte	0
 3554 0162 00        		.byte	0
 3555 0163 40        		.byte	64
 3556 0164 34        		.byte	52
 3557 0165 00        		.byte	0
 3558 0166 00        		.byte	0
 3559 0167 00        		.byte	0
 3560 0168 00        		.byte	0
 3561 0169 08        		.byte	8
 3562 016a 14        		.byte	20
 3563 016b 22        		.byte	34
 3564 016c 41        		.byte	65
 3565 016d 00        		.byte	0
 3566 016e 14        		.byte	20
 3567 016f 14        		.byte	20
 3568 0170 14        		.byte	20
 3569 0171 14        		.byte	20
 3570 0172 14        		.byte	20
 3571 0173 00        		.byte	0
 3572 0174 00        		.byte	0
 3573 0175 41        		.byte	65
 3574 0176 22        		.byte	34
 3575 0177 14        		.byte	20
 3576 0178 08        		.byte	8
 3577 0179 00        		.byte	0
 3578 017a 02        		.byte	2
 3579 017b 01        		.byte	1
 3580 017c 59        		.byte	89
 3581 017d 09        		.byte	9
 3582 017e 06        		.byte	6
 3583 017f 00        		.byte	0
 3584 0180 3E        		.byte	62
 3585 0181 41        		.byte	65
 3586 0182 5D        		.byte	93
 3587 0183 59        		.byte	89
 3588 0184 4E        		.byte	78
 3589 0185 00        		.byte	0
 3590 0186 7C        		.byte	124
 3591 0187 12        		.byte	18
 3592 0188 11        		.byte	17
 3593 0189 12        		.byte	18
 3594 018a 7C        		.byte	124
 3595 018b 00        		.byte	0
 3596 018c 7F        		.byte	127
 3597 018d 49        		.byte	73
 3598 018e 49        		.byte	73
 3599 018f 49        		.byte	73
 3600 0190 36        		.byte	54
 3601 0191 00        		.byte	0
 3602 0192 3E        		.byte	62
 3603 0193 41        		.byte	65
 3604 0194 41        		.byte	65
 3605 0195 41        		.byte	65
 3606 0196 22        		.byte	34
 3607 0197 00        		.byte	0
 3608 0198 7F        		.byte	127
 3609 0199 41        		.byte	65
 3610 019a 41        		.byte	65
 3611 019b 41        		.byte	65
 3612 019c 3E        		.byte	62
 3613 019d 00        		.byte	0
 3614 019e 7F        		.byte	127
 3615 019f 49        		.byte	73
 3616 01a0 49        		.byte	73
 3617 01a1 49        		.byte	73
 3618 01a2 41        		.byte	65
 3619 01a3 00        		.byte	0
 3620 01a4 7F        		.byte	127
 3621 01a5 09        		.byte	9
 3622 01a6 09        		.byte	9
 3623 01a7 09        		.byte	9
 3624 01a8 01        		.byte	1
 3625 01a9 00        		.byte	0
 3626 01aa 3E        		.byte	62
 3627 01ab 41        		.byte	65
 3628 01ac 41        		.byte	65
 3629 01ad 51        		.byte	81
 3630 01ae 73        		.byte	115
 3631 01af 00        		.byte	0
 3632 01b0 7F        		.byte	127
 3633 01b1 08        		.byte	8
 3634 01b2 08        		.byte	8
 3635 01b3 08        		.byte	8
 3636 01b4 7F        		.byte	127
 3637 01b5 00        		.byte	0
 3638 01b6 00        		.byte	0
 3639 01b7 41        		.byte	65
 3640 01b8 7F        		.byte	127
 3641 01b9 41        		.byte	65
 3642 01ba 00        		.byte	0
 3643 01bb 00        		.byte	0
 3644 01bc 20        		.byte	32
 3645 01bd 40        		.byte	64
 3646 01be 41        		.byte	65
 3647 01bf 3F        		.byte	63
 3648 01c0 01        		.byte	1
 3649 01c1 00        		.byte	0
 3650 01c2 7F        		.byte	127
 3651 01c3 08        		.byte	8
 3652 01c4 14        		.byte	20
 3653 01c5 22        		.byte	34
 3654 01c6 41        		.byte	65
 3655 01c7 00        		.byte	0
 3656 01c8 7F        		.byte	127
 3657 01c9 40        		.byte	64
 3658 01ca 40        		.byte	64
 3659 01cb 40        		.byte	64
 3660 01cc 40        		.byte	64
 3661 01cd 00        		.byte	0
 3662 01ce 7F        		.byte	127
 3663 01cf 02        		.byte	2
 3664 01d0 1C        		.byte	28
 3665 01d1 02        		.byte	2
 3666 01d2 7F        		.byte	127
 3667 01d3 00        		.byte	0
 3668 01d4 7F        		.byte	127
 3669 01d5 04        		.byte	4
 3670 01d6 08        		.byte	8
 3671 01d7 10        		.byte	16
 3672 01d8 7F        		.byte	127
 3673 01d9 00        		.byte	0
 3674 01da 3E        		.byte	62
 3675 01db 41        		.byte	65
 3676 01dc 41        		.byte	65
 3677 01dd 41        		.byte	65
 3678 01de 3E        		.byte	62
 3679 01df 00        		.byte	0
 3680 01e0 7F        		.byte	127
 3681 01e1 09        		.byte	9
 3682 01e2 09        		.byte	9
 3683 01e3 09        		.byte	9
 3684 01e4 06        		.byte	6
 3685 01e5 00        		.byte	0
 3686 01e6 3E        		.byte	62
 3687 01e7 41        		.byte	65
 3688 01e8 51        		.byte	81
 3689 01e9 21        		.byte	33
 3690 01ea 5E        		.byte	94
 3691 01eb 00        		.byte	0
 3692 01ec 7F        		.byte	127
 3693 01ed 09        		.byte	9
 3694 01ee 19        		.byte	25
 3695 01ef 29        		.byte	41
 3696 01f0 46        		.byte	70
 3697 01f1 00        		.byte	0
 3698 01f2 26        		.byte	38
 3699 01f3 49        		.byte	73
 3700 01f4 49        		.byte	73
 3701 01f5 49        		.byte	73
 3702 01f6 32        		.byte	50
 3703 01f7 00        		.byte	0
 3704 01f8 03        		.byte	3
 3705 01f9 01        		.byte	1
 3706 01fa 7F        		.byte	127
 3707 01fb 01        		.byte	1
 3708 01fc 03        		.byte	3
 3709 01fd 00        		.byte	0
 3710 01fe 3F        		.byte	63
 3711 01ff 40        		.byte	64
 3712 0200 40        		.byte	64
 3713 0201 40        		.byte	64
 3714 0202 3F        		.byte	63
 3715 0203 00        		.byte	0
 3716 0204 1F        		.byte	31
 3717 0205 20        		.byte	32
 3718 0206 40        		.byte	64
 3719 0207 20        		.byte	32
 3720 0208 1F        		.byte	31
 3721 0209 00        		.byte	0
 3722 020a 3F        		.byte	63
 3723 020b 40        		.byte	64
 3724 020c 38        		.byte	56
 3725 020d 40        		.byte	64
 3726 020e 3F        		.byte	63
 3727 020f 00        		.byte	0
 3728 0210 63        		.byte	99
 3729 0211 14        		.byte	20
 3730 0212 08        		.byte	8
 3731 0213 14        		.byte	20
 3732 0214 63        		.byte	99
 3733 0215 00        		.byte	0
 3734 0216 03        		.byte	3
 3735 0217 04        		.byte	4
 3736 0218 78        		.byte	120
 3737 0219 04        		.byte	4
 3738 021a 03        		.byte	3
 3739 021b 00        		.byte	0
 3740 021c 61        		.byte	97
 3741 021d 59        		.byte	89
 3742 021e 49        		.byte	73
 3743 021f 4D        		.byte	77
 3744 0220 43        		.byte	67
 3745 0221 00        		.byte	0
 3746 0222 00        		.byte	0
 3747 0223 7F        		.byte	127
 3748 0224 41        		.byte	65
 3749 0225 41        		.byte	65
 3750 0226 41        		.byte	65
 3751 0227 00        		.byte	0
 3752 0228 02        		.byte	2
 3753 0229 04        		.byte	4
 3754 022a 08        		.byte	8
 3755 022b 10        		.byte	16
 3756 022c 20        		.byte	32
 3757 022d 00        		.byte	0
 3758 022e 00        		.byte	0
 3759 022f 41        		.byte	65
 3760 0230 41        		.byte	65
 3761 0231 41        		.byte	65
 3762 0232 7F        		.byte	127
 3763 0233 00        		.byte	0
 3764 0234 04        		.byte	4
 3765 0235 02        		.byte	2
 3766 0236 01        		.byte	1
 3767 0237 02        		.byte	2
 3768 0238 04        		.byte	4
 3769 0239 00        		.byte	0
 3770 023a 40        		.byte	64
 3771 023b 40        		.byte	64
 3772 023c 40        		.byte	64
 3773 023d 40        		.byte	64
 3774 023e 40        		.byte	64
 3775 023f 00        		.byte	0
 3776 0240 00        		.byte	0
 3777 0241 03        		.byte	3
 3778 0242 07        		.byte	7
 3779 0243 08        		.byte	8
 3780 0244 00        		.byte	0
 3781 0245 00        		.byte	0
 3782 0246 20        		.byte	32
 3783 0247 54        		.byte	84
 3784 0248 54        		.byte	84
 3785 0249 78        		.byte	120
 3786 024a 40        		.byte	64
 3787 024b 00        		.byte	0
 3788 024c 7F        		.byte	127
 3789 024d 28        		.byte	40
 3790 024e 44        		.byte	68
 3791 024f 44        		.byte	68
 3792 0250 38        		.byte	56
 3793 0251 00        		.byte	0
 3794 0252 38        		.byte	56
 3795 0253 44        		.byte	68
 3796 0254 44        		.byte	68
 3797 0255 44        		.byte	68
 3798 0256 28        		.byte	40
 3799 0257 00        		.byte	0
 3800 0258 38        		.byte	56
 3801 0259 44        		.byte	68
 3802 025a 44        		.byte	68
 3803 025b 28        		.byte	40
 3804 025c 7F        		.byte	127
 3805 025d 00        		.byte	0
 3806 025e 38        		.byte	56
 3807 025f 54        		.byte	84
 3808 0260 54        		.byte	84
 3809 0261 54        		.byte	84
 3810 0262 18        		.byte	24
 3811 0263 00        		.byte	0
 3812 0264 00        		.byte	0
 3813 0265 08        		.byte	8
 3814 0266 7E        		.byte	126
 3815 0267 09        		.byte	9
 3816 0268 02        		.byte	2
 3817 0269 00        		.byte	0
 3818 026a 18        		.byte	24
 3819 026b A4        		.byte	-92
 3820 026c A4        		.byte	-92
 3821 026d 9C        		.byte	-100
 3822 026e 78        		.byte	120
 3823 026f 00        		.byte	0
 3824 0270 7F        		.byte	127
 3825 0271 08        		.byte	8
 3826 0272 04        		.byte	4
 3827 0273 04        		.byte	4
 3828 0274 78        		.byte	120
 3829 0275 00        		.byte	0
 3830 0276 00        		.byte	0
 3831 0277 44        		.byte	68
 3832 0278 7D        		.byte	125
 3833 0279 40        		.byte	64
 3834 027a 00        		.byte	0
 3835 027b 00        		.byte	0
 3836 027c 20        		.byte	32
 3837 027d 40        		.byte	64
 3838 027e 40        		.byte	64
 3839 027f 3D        		.byte	61
 3840 0280 00        		.byte	0
 3841 0281 00        		.byte	0
 3842 0282 7F        		.byte	127
 3843 0283 10        		.byte	16
 3844 0284 28        		.byte	40
 3845 0285 44        		.byte	68
 3846 0286 00        		.byte	0
 3847 0287 00        		.byte	0
 3848 0288 00        		.byte	0
 3849 0289 41        		.byte	65
 3850 028a 7F        		.byte	127
 3851 028b 40        		.byte	64
 3852 028c 00        		.byte	0
 3853 028d 00        		.byte	0
 3854 028e 7C        		.byte	124
 3855 028f 04        		.byte	4
 3856 0290 78        		.byte	120
 3857 0291 04        		.byte	4
 3858 0292 78        		.byte	120
 3859 0293 00        		.byte	0
 3860 0294 7C        		.byte	124
 3861 0295 08        		.byte	8
 3862 0296 04        		.byte	4
 3863 0297 04        		.byte	4
 3864 0298 78        		.byte	120
 3865 0299 00        		.byte	0
 3866 029a 38        		.byte	56
 3867 029b 44        		.byte	68
 3868 029c 44        		.byte	68
 3869 029d 44        		.byte	68
 3870 029e 38        		.byte	56
 3871 029f 00        		.byte	0
 3872 02a0 FC        		.byte	-4
 3873 02a1 18        		.byte	24
 3874 02a2 24        		.byte	36
 3875 02a3 24        		.byte	36
 3876 02a4 18        		.byte	24
 3877 02a5 00        		.byte	0
 3878 02a6 18        		.byte	24
 3879 02a7 24        		.byte	36
 3880 02a8 24        		.byte	36
 3881 02a9 18        		.byte	24
 3882 02aa FC        		.byte	-4
 3883 02ab 00        		.byte	0
 3884 02ac 7C        		.byte	124
 3885 02ad 08        		.byte	8
 3886 02ae 04        		.byte	4
 3887 02af 04        		.byte	4
 3888 02b0 08        		.byte	8
 3889 02b1 00        		.byte	0
 3890 02b2 48        		.byte	72
 3891 02b3 54        		.byte	84
 3892 02b4 54        		.byte	84
 3893 02b5 54        		.byte	84
 3894 02b6 24        		.byte	36
 3895 02b7 00        		.byte	0
 3896 02b8 04        		.byte	4
 3897 02b9 04        		.byte	4
 3898 02ba 3F        		.byte	63
 3899 02bb 44        		.byte	68
 3900 02bc 24        		.byte	36
 3901 02bd 00        		.byte	0
 3902 02be 3C        		.byte	60
 3903 02bf 40        		.byte	64
 3904 02c0 40        		.byte	64
 3905 02c1 20        		.byte	32
 3906 02c2 7C        		.byte	124
 3907 02c3 00        		.byte	0
 3908 02c4 1C        		.byte	28
 3909 02c5 20        		.byte	32
 3910 02c6 40        		.byte	64
 3911 02c7 20        		.byte	32
 3912 02c8 1C        		.byte	28
 3913 02c9 00        		.byte	0
 3914 02ca 3C        		.byte	60
 3915 02cb 40        		.byte	64
 3916 02cc 30        		.byte	48
 3917 02cd 40        		.byte	64
 3918 02ce 3C        		.byte	60
 3919 02cf 00        		.byte	0
 3920 02d0 44        		.byte	68
 3921 02d1 28        		.byte	40
 3922 02d2 10        		.byte	16
 3923 02d3 28        		.byte	40
 3924 02d4 44        		.byte	68
 3925 02d5 00        		.byte	0
 3926 02d6 4C        		.byte	76
 3927 02d7 90        		.byte	-112
 3928 02d8 90        		.byte	-112
 3929 02d9 90        		.byte	-112
 3930 02da 7C        		.byte	124
 3931 02db 00        		.byte	0
 3932 02dc 44        		.byte	68
 3933 02dd 64        		.byte	100
 3934 02de 54        		.byte	84
 3935 02df 4C        		.byte	76
 3936 02e0 44        		.byte	68
 3937 02e1 00        		.byte	0
 3938 02e2 00        		.byte	0
 3939 02e3 08        		.byte	8
 3940 02e4 36        		.byte	54
 3941 02e5 41        		.byte	65
 3942 02e6 00        		.byte	0
 3943 02e7 00        		.byte	0
 3944 02e8 00        		.byte	0
 3945 02e9 00        		.byte	0
 3946 02ea 77        		.byte	119
 3947 02eb 00        		.byte	0
 3948 02ec 00        		.byte	0
 3949 02ed 00        		.byte	0
 3950 02ee 00        		.byte	0
 3951 02ef 41        		.byte	65
 3952 02f0 36        		.byte	54
 3953 02f1 08        		.byte	8
 3954 02f2 00        		.byte	0
 3955 02f3 00        		.byte	0
 3956 02f4 02        		.byte	2
 3957 02f5 01        		.byte	1
 3958 02f6 02        		.byte	2
 3959 02f7 04        		.byte	4
 3960 02f8 02        		.byte	2
 3961 02f9 00        		.byte	0
 3962 02fa 3C        		.byte	60
 3963 02fb 26        		.byte	38
 3964 02fc 23        		.byte	35
 3965 02fd 26        		.byte	38
 3966 02fe 3C        		.byte	60
 3967 02ff 00        		.byte	0
 3968 0300 00        		.byte	0
 3969 0301 00        		.byte	0
 3970 0302 00        		.byte	0
 3971 0303 00        		.byte	0
 3972 0304 00        		.byte	0
 3973 0305 00        		.byte	0
 3974 0306 40        		.byte	64
 3975 0307 40        		.byte	64
 3976 0308 40        		.byte	64
 3977 0309 F0        		.byte	-16
 3978 030a F8        		.byte	-8
 3979 030b F8        		.byte	-8
 3980 030c FF        		.byte	-1
 3981 030d 38        		.byte	56
 3982 030e FF        		.byte	-1
 3983 030f F8        		.byte	-8
 3984 0310 F8        		.byte	-8
 3985 0311 3F        		.byte	63
 3986 0312 F8        		.byte	-8
 3987 0313 F8        		.byte	-8
 3988 0314 FF        		.byte	-1
 3989 0315 38        		.byte	56
 3990 0316 FF        		.byte	-1
 3991 0317 F8        		.byte	-8
 3992 0318 F8        		.byte	-8
 3993 0319 F0        		.byte	-16
 3994 031a 40        		.byte	64
 3995 031b 40        		.byte	64
 3996 031c 40        		.byte	64
 3997 031d 00        		.byte	0
 3998 031e 00        		.byte	0
 3999 031f 00        		.byte	0
 4000 0320 00        		.byte	0
 4001 0321 00        		.byte	0
 4002 0322 00        		.byte	0
 4003 0323 80        		.byte	-128
 4004 0324 C0        		.byte	-64
 4005 0325 C0        		.byte	-64
 4006 0326 C0        		.byte	-64
 4007 0327 80        		.byte	-128
 4008 0328 00        		.byte	0
 4009 0329 00        		.byte	0
 4010 032a C0        		.byte	-64
 4011 032b C0        		.byte	-64
 4012 032c 80        		.byte	-128
 4013 032d 00        		.byte	0
 4014 032e 00        		.byte	0
 4015 032f 00        		.byte	0
 4016 0330 80        		.byte	-128
 4017 0331 C0        		.byte	-64
 4018 0332 C0        		.byte	-64
 4019 0333 00        		.byte	0
 4020 0334 C0        		.byte	-64
 4021 0335 C0        		.byte	-64
 4022 0336 00        		.byte	0
 4023 0337 00        		.byte	0
 4024 0338 80        		.byte	-128
 4025 0339 C0        		.byte	-64
 4026 033a C0        		.byte	-64
 4027 033b 00        		.byte	0
 4028 033c 00        		.byte	0
 4029 033d 00        		.byte	0
 4030 033e 00        		.byte	0
 4031 033f 00        		.byte	0
 4032 0340 C0        		.byte	-64
 4033 0341 C0        		.byte	-64
 4034 0342 C0        		.byte	-64
 4035 0343 C0        		.byte	-64
 4036 0344 C0        		.byte	-64
 4037 0345 00        		.byte	0
 4038 0346 C0        		.byte	-64
 4039 0347 C0        		.byte	-64
 4040 0348 00        		.byte	0
 4041 0349 00        		.byte	0
 4042 034a 00        		.byte	0
 4043 034b 00        		.byte	0
 4044 034c 00        		.byte	0
 4045 034d 00        		.byte	0
 4046 034e 00        		.byte	0
 4047 034f 00        		.byte	0
 4048 0350 00        		.byte	0
 4049 0351 00        		.byte	0
 4050 0352 00        		.byte	0
 4051 0353 00        		.byte	0
 4052 0354 00        		.byte	0
 4053 0355 00        		.byte	0
 4054 0356 00        		.byte	0
 4055 0357 00        		.byte	0
 4056 0358 00        		.byte	0
 4057 0359 00        		.byte	0
 4058 035a 00        		.byte	0
 4059 035b 00        		.byte	0
 4060 035c 00        		.byte	0
 4061 035d 00        		.byte	0
 4062 035e 00        		.byte	0
 4063 035f 00        		.byte	0
 4064 0360 00        		.byte	0
 4065 0361 00        		.byte	0
 4066 0362 00        		.byte	0
 4067 0363 00        		.byte	0
 4068 0364 00        		.byte	0
 4069 0365 00        		.byte	0
 4070 0366 00        		.byte	0
 4071 0367 00        		.byte	0
 4072 0368 00        		.byte	0
 4073 0369 00        		.byte	0
 4074 036a 00        		.byte	0
 4075 036b 00        		.byte	0
 4076 036c 00        		.byte	0
 4077 036d 00        		.byte	0
 4078 036e 00        		.byte	0
 4079 036f 00        		.byte	0
 4080 0370 00        		.byte	0
 4081 0371 00        		.byte	0
 4082 0372 00        		.byte	0
 4083 0373 00        		.byte	0
 4084 0374 00        		.byte	0
 4085 0375 00        		.byte	0
 4086 0376 00        		.byte	0
 4087 0377 00        		.byte	0
 4088 0378 00        		.byte	0
 4089 0379 00        		.byte	0
 4090 037a 00        		.byte	0
 4091 037b 00        		.byte	0
 4092 037c 00        		.byte	0
 4093 037d 00        		.byte	0
 4094 037e 00        		.byte	0
 4095 037f C0        		.byte	-64
 4096 0380 F0        		.byte	-16
 4097 0381 F8        		.byte	-8
 4098 0382 FC        		.byte	-4
 4099 0383 3E        		.byte	62
 4100 0384 1E        		.byte	30
 4101 0385 06        		.byte	6
 4102 0386 01        		.byte	1
 4103 0387 00        		.byte	0
 4104 0388 00        		.byte	0
 4105 0389 00        		.byte	0
 4106 038a 7F        		.byte	127
 4107 038b 41        		.byte	65
 4108 038c 41        		.byte	65
 4109 038d 41        		.byte	65
 4110 038e 7F        		.byte	127
 4111 038f 00        		.byte	0
 4112 0390 7F        		.byte	127
 4113 0391 41        		.byte	65
 4114 0392 41        		.byte	65
 4115 0393 41        		.byte	65
 4116 0394 7F        		.byte	127
 4117 0395 00        		.byte	0
 4118 0396 00        		.byte	0
 4119 0397 80        		.byte	-128
 4120 0398 C0        		.byte	-64
 4121 0399 E0        		.byte	-32
 4122 039a 7E        		.byte	126
 4123 039b 5B        		.byte	91
 4124 039c 4F        		.byte	79
 4125 039d 5B        		.byte	91
 4126 039e FE        		.byte	-2
 4127 039f C0        		.byte	-64
 4128 03a0 00        		.byte	0
 4129 03a1 00        		.byte	0
 4130 03a2 C0        		.byte	-64
 4131 03a3 00        		.byte	0
 4132 03a4 DC        		.byte	-36
 4133 03a5 D7        		.byte	-41
 4134 03a6 DE        		.byte	-34
 4135 03a7 DE        		.byte	-34
 4136 03a8 DE        		.byte	-34
 4137 03a9 D7        		.byte	-41
 4138 03aa DC        		.byte	-36
 4139 03ab 00        		.byte	0
 4140 03ac C0        		.byte	-64
 4141 03ad 00        		.byte	0
 4142 03ae 00        		.byte	0
 4143 03af 00        		.byte	0
 4144 03b0 00        		.byte	0
 4145 03b1 00        		.byte	0
 4146 03b2 00        		.byte	0
 4147 03b3 00        		.byte	0
 4148 03b4 00        		.byte	0
 4149 03b5 00        		.byte	0
 4150 03b6 00        		.byte	0
 4151 03b7 00        		.byte	0
 4152 03b8 00        		.byte	0
 4153 03b9 00        		.byte	0
 4154 03ba 00        		.byte	0
 4155 03bb 00        		.byte	0
 4156 03bc 00        		.byte	0
 4157 03bd 00        		.byte	0
 4158 03be 00        		.byte	0
 4159 03bf 00        		.byte	0
 4160 03c0 00        		.byte	0
 4161 03c1 00        		.byte	0
 4162 03c2 00        		.byte	0
 4163 03c3 00        		.byte	0
 4164 03c4 00        		.byte	0
 4165 03c5 00        		.byte	0
 4166 03c6 49        		.byte	73
 4167 03c7 49        		.byte	73
 4168 03c8 49        		.byte	73
 4169 03c9 FF        		.byte	-1
 4170 03ca FF        		.byte	-1
 4171 03cb FF        		.byte	-1
 4172 03cc FF        		.byte	-1
 4173 03cd E0        		.byte	-32
 4174 03ce DF        		.byte	-33
 4175 03cf BF        		.byte	-65
 4176 03d0 BF        		.byte	-65
 4177 03d1 00        		.byte	0
 4178 03d2 BF        		.byte	-65
 4179 03d3 BF        		.byte	-65
 4180 03d4 DF        		.byte	-33
 4181 03d5 E0        		.byte	-32
 4182 03d6 FF        		.byte	-1
 4183 03d7 FF        		.byte	-1
 4184 03d8 FF        		.byte	-1
 4185 03d9 FF        		.byte	-1
 4186 03da 49        		.byte	73
 4187 03db 49        		.byte	73
 4188 03dc 49        		.byte	73
 4189 03dd 00        		.byte	0
 4190 03de 00        		.byte	0
 4191 03df 00        		.byte	0
 4192 03e0 00        		.byte	0
 4193 03e1 00        		.byte	0
 4194 03e2 1F        		.byte	31
 4195 03e3 3F        		.byte	63
 4196 03e4 60        		.byte	96
 4197 03e5 60        		.byte	96
 4198 03e6 E0        		.byte	-32
 4199 03e7 BF        		.byte	-65
 4200 03e8 1F        		.byte	31
 4201 03e9 00        		.byte	0
 4202 03ea 7F        		.byte	127
 4203 03eb 7F        		.byte	127
 4204 03ec 07        		.byte	7
 4205 03ed 1E        		.byte	30
 4206 03ee 38        		.byte	56
 4207 03ef 1E        		.byte	30
 4208 03f0 07        		.byte	7
 4209 03f1 7F        		.byte	127
 4210 03f2 7F        		.byte	127
 4211 03f3 00        		.byte	0
 4212 03f4 7F        		.byte	127
 4213 03f5 7F        		.byte	127
 4214 03f6 0E        		.byte	14
 4215 03f7 1F        		.byte	31
 4216 03f8 3B        		.byte	59
 4217 03f9 71        		.byte	113
 4218 03fa 60        		.byte	96
 4219 03fb 00        		.byte	0
 4220 03fc 00        		.byte	0
 4221 03fd 00        		.byte	0
 4222 03fe 00        		.byte	0
 4223 03ff 00        		.byte	0
 4224 0400 7F        		.byte	127
 4225 0401 7F        		.byte	127
 4226 0402 0C        		.byte	12
 4227 0403 0C        		.byte	12
 4228 0404 0C        		.byte	12
 4229 0405 00        		.byte	0
 4230 0406 7E        		.byte	126
 4231 0407 7E        		.byte	126
 4232 0408 00        		.byte	0
 4233 0409 7F        		.byte	127
 4234 040a 7E        		.byte	126
 4235 040b 03        		.byte	3
 4236 040c 03        		.byte	3
 4237 040d 00        		.byte	0
 4238 040e 7F        		.byte	127
 4239 040f 7E        		.byte	126
 4240 0410 03        		.byte	3
 4241 0411 03        		.byte	3
 4242 0412 7E        		.byte	126
 4243 0413 7E        		.byte	126
 4244 0414 03        		.byte	3
 4245 0415 03        		.byte	3
 4246 0416 7F        		.byte	127
 4247 0417 7E        		.byte	126
 4248 0418 00        		.byte	0
 4249 0419 0F        		.byte	15
 4250 041a 3E        		.byte	62
 4251 041b 70        		.byte	112
 4252 041c 3C        		.byte	60
 4253 041d 06        		.byte	6
 4254 041e 3C        		.byte	60
 4255 041f 70        		.byte	112
 4256 0420 3E        		.byte	62
 4257 0421 0F        		.byte	15
 4258 0422 00        		.byte	0
 4259 0423 32        		.byte	50
 4260 0424 7B        		.byte	123
 4261 0425 49        		.byte	73
 4262 0426 49        		.byte	73
 4263 0427 3F        		.byte	63
 4264 0428 7E        		.byte	126
 4265 0429 00        		.byte	0
 4266 042a 7F        		.byte	127
 4267 042b 7E        		.byte	126
 4268 042c 03        		.byte	3
 4269 042d 03        		.byte	3
 4270 042e 00        		.byte	0
 4271 042f 1E        		.byte	30
 4272 0430 3F        		.byte	63
 4273 0431 69        		.byte	105
 4274 0432 69        		.byte	105
 4275 0433 6F        		.byte	111
 4276 0434 26        		.byte	38
 4277 0435 00        		.byte	0
 4278 0436 00        		.byte	0
 4279 0437 00        		.byte	0
 4280 0438 00        		.byte	0
 4281 0439 00        		.byte	0
 4282 043a 00        		.byte	0
 4283 043b 00        		.byte	0
 4284 043c 00        		.byte	0
 4285 043d 00        		.byte	0
 4286 043e 00        		.byte	0
 4287 043f 03        		.byte	3
 4288 0440 0F        		.byte	15
 4289 0441 1F        		.byte	31
 4290 0442 3F        		.byte	63
 4291 0443 3C        		.byte	60
 4292 0444 78        		.byte	120
 4293 0445 70        		.byte	112
 4294 0446 60        		.byte	96
 4295 0447 00        		.byte	0
 4296 0448 00        		.byte	0
 4297 0449 00        		.byte	0
 4298 044a 7F        		.byte	127
 4299 044b 41        		.byte	65
 4300 044c 41        		.byte	65
 4301 044d 41        		.byte	65
 4302 044e 7F        		.byte	127
 4303 044f 00        		.byte	0
 4304 0450 7F        		.byte	127
 4305 0451 41        		.byte	65
 4306 0452 41        		.byte	65
 4307 0453 41        		.byte	65
 4308 0454 7F        		.byte	127
 4309 0455 00        		.byte	0
 4310 0456 30        		.byte	48
 4311 0457 7B        		.byte	123
 4312 0458 7F        		.byte	127
 4313 0459 78        		.byte	120
 4314 045a 30        		.byte	48
 4315 045b 20        		.byte	32
 4316 045c 20        		.byte	32
 4317 045d 30        		.byte	48
 4318 045e 78        		.byte	120
 4319 045f 7F        		.byte	127
 4320 0460 3B        		.byte	59
 4321 0461 00        		.byte	0
 4322 0462 03        		.byte	3
 4323 0463 00        		.byte	0
 4324 0464 0F        		.byte	15
 4325 0465 7F        		.byte	127
 4326 0466 0F        		.byte	15
 4327 0467 0F        		.byte	15
 4328 0468 0F        		.byte	15
 4329 0469 7F        		.byte	127
 4330 046a 0F        		.byte	15
 4331 046b 00        		.byte	0
 4332 046c 03        		.byte	3
 4333 046d 00        		.byte	0
 4334 046e 00        		.byte	0
 4335 046f 00        		.byte	0
 4336 0470 00        		.byte	0
 4337 0471 00        		.byte	0
 4338 0472 00        		.byte	0
 4339 0473 00        		.byte	0
 4340 0474 00        		.byte	0
 4341 0475 00        		.byte	0
 4342 0476 00        		.byte	0
 4343 0477 00        		.byte	0
 4344 0478 00        		.byte	0
 4345 0479 00        		.byte	0
 4346 047a 00        		.byte	0
 4347 047b 00        		.byte	0
 4348 047c 00        		.byte	0
 4349 047d 00        		.byte	0
 4350 047e 00        		.byte	0
 4351 047f 00        		.byte	0
 4352 0480 00        		.byte	0
 4353 0481 00        		.byte	0
 4354 0482 00        		.byte	0
 4355 0483 00        		.byte	0
 4356 0484 00        		.byte	0
 4357 0485 00        		.byte	0
 4358 0486 01        		.byte	1
 4359 0487 01        		.byte	1
 4360 0488 01        		.byte	1
 4361 0489 07        		.byte	7
 4362 048a 0F        		.byte	15
 4363 048b 0F        		.byte	15
 4364 048c 7F        		.byte	127
 4365 048d 0F        		.byte	15
 4366 048e 7F        		.byte	127
 4367 048f 0F        		.byte	15
 4368 0490 0F        		.byte	15
 4369 0491 7E        		.byte	126
 4370 0492 0F        		.byte	15
 4371 0493 0F        		.byte	15
 4372 0494 7F        		.byte	127
 4373 0495 0F        		.byte	15
 4374 0496 7F        		.byte	127
 4375 0497 0F        		.byte	15
 4376 0498 0F        		.byte	15
 4377 0499 07        		.byte	7
 4378 049a 01        		.byte	1
 4379 049b 01        		.byte	1
 4380 049c 01        		.byte	1
 4381 049d 00        		.byte	0
 4382 049e 00        		.byte	0
 4383 049f 00        		.byte	0
 4384 04a0 00        		.byte	0
 4385 04a1 00        		.byte	0
 4386 04a2 00        		.byte	0
 4387 04a3 00        		.byte	0
 4388 04a4 00        		.byte	0
 4389 04a5 00        		.byte	0
 4390 04a6 00        		.byte	0
 4391 04a7 01        		.byte	1
 4392 04a8 01        		.byte	1
 4393 04a9 00        		.byte	0
 4394 04aa 00        		.byte	0
 4395 04ab 00        		.byte	0
 4396 04ac 00        		.byte	0
 4397 04ad 00        		.byte	0
 4398 04ae 00        		.byte	0
 4399 04af 00        		.byte	0
 4400 04b0 00        		.byte	0
 4401 04b1 00        		.byte	0
 4402 04b2 00        		.byte	0
 4403 04b3 00        		.byte	0
 4404 04b4 00        		.byte	0
 4405 04b5 00        		.byte	0
 4406 04b6 00        		.byte	0
 4407 04b7 00        		.byte	0
 4408 04b8 00        		.byte	0
 4409 04b9 00        		.byte	0
 4410 04ba 00        		.byte	0
 4411 04bb 00        		.byte	0
 4412 04bc 00        		.byte	0
 4413 04bd 00        		.byte	0
 4414 04be 00        		.byte	0
 4415 04bf 00        		.byte	0
 4416 04c0 00        		.byte	0
 4417 04c1 00        		.byte	0
 4418 04c2 00        		.byte	0
 4419 04c3 00        		.byte	0
 4420 04c4 00        		.byte	0
 4421 04c5 00        		.byte	0
 4422 04c6 00        		.byte	0
 4423 04c7 00        		.byte	0
 4424 04c8 00        		.byte	0
 4425 04c9 00        		.byte	0
 4426 04ca 00        		.byte	0
 4427 04cb 00        		.byte	0
 4428 04cc 00        		.byte	0
 4429 04cd 00        		.byte	0
 4430 04ce 00        		.byte	0
 4431 04cf 00        		.byte	0
 4432 04d0 00        		.byte	0
 4433 04d1 00        		.byte	0
 4434 04d2 00        		.byte	0
 4435 04d3 00        		.byte	0
 4436 04d4 00        		.byte	0
 4437 04d5 00        		.byte	0
 4438 04d6 00        		.byte	0
 4439 04d7 00        		.byte	0
 4440 04d8 00        		.byte	0
 4441 04d9 00        		.byte	0
 4442 04da 00        		.byte	0
 4443 04db 00        		.byte	0
 4444 04dc 00        		.byte	0
 4445 04dd 00        		.byte	0
 4446 04de 00        		.byte	0
 4447 04df 00        		.byte	0
 4448 04e0 00        		.byte	0
 4449 04e1 00        		.byte	0
 4450 04e2 00        		.byte	0
 4451 04e3 00        		.byte	0
 4452 04e4 00        		.byte	0
 4453 04e5 00        		.byte	0
 4454 04e6 00        		.byte	0
 4455 04e7 00        		.byte	0
 4456 04e8 00        		.byte	0
 4457 04e9 00        		.byte	0
 4458 04ea 00        		.byte	0
 4459 04eb 00        		.byte	0
 4460 04ec 00        		.byte	0
 4461 04ed 00        		.byte	0
 4462 04ee 00        		.byte	0
 4463 04ef 00        		.byte	0
 4464 04f0 00        		.byte	0
 4465 04f1 00        		.byte	0
 4466 04f2 00        		.byte	0
 4467 04f3 00        		.byte	0
 4468 04f4 00        		.byte	0
 4469 04f5 00        		.byte	0
 4470 04f6 00        		.byte	0
 4471 04f7 00        		.byte	0
 4472 04f8 00        		.byte	0
 4473 04f9 00        		.byte	0
 4474 04fa 00        		.byte	0
 4475 04fb 00        		.byte	0
 4476 04fc 00        		.byte	0
 4477 04fd 00        		.byte	0
 4478 04fe 00        		.byte	0
 4479 04ff 00        		.byte	0
 4480 0500 00        		.byte	0
 4481 0501 00        		.byte	0
 4482 0502 00        		.byte	0
 4483 0503 00        		.byte	0
 4484 0504 00        		.byte	0
 4485 0505 00        		.byte	0
 4486 0506 00        		.byte	0
 4487 0507 00        		.byte	0
 4488 0508 00        		.byte	0
 4489 0509 00        		.byte	0
 4490 050a 00        		.byte	0
 4491 050b 00        		.byte	0
 4492 050c 00        		.byte	0
 4493 050d 00        		.byte	0
 4494 050e 00        		.byte	0
 4495 050f 00        		.byte	0
 4496 0510 00        		.byte	0
 4497 0511 00        		.byte	0
 4498 0512 00        		.byte	0
 4499 0513 00        		.byte	0
 4500 0514 00        		.byte	0
 4501 0515 00        		.byte	0
 4502 0516 00        		.byte	0
 4503 0517 00        		.byte	0
 4504 0518 00        		.byte	0
 4505 0519 00        		.byte	0
 4506 051a 00        		.byte	0
 4507 051b 00        		.byte	0
 4508 051c 00        		.byte	0
 4509 051d 00        		.byte	0
 4510 051e 00        		.byte	0
 4511 051f 00        		.byte	0
 4512 0520 00        		.byte	0
 4513 0521 00        		.byte	0
 4514 0522 00        		.byte	0
 4515 0523 00        		.byte	0
 4516 0524 00        		.byte	0
 4517 0525 00        		.byte	0
 4518 0526 00        		.byte	0
 4519 0527 00        		.byte	0
 4520 0528 00        		.byte	0
 4521 0529 00        		.byte	0
 4522 052a 00        		.byte	0
 4523 052b 00        		.byte	0
 4524 052c 00        		.byte	0
 4525 052d 00        		.byte	0
 4526 052e 00        		.byte	0
 4527 052f 00        		.byte	0
 4528 0530 00        		.byte	0
 4529 0531 00        		.byte	0
 4530 0532 00        		.byte	0
 4531 0533 00        		.byte	0
 4532 0534 00        		.byte	0
 4533 0535 00        		.byte	0
 4534 0536 00        		.byte	0
 4535 0537 00        		.byte	0
 4536 0538 00        		.byte	0
 4537 0539 00        		.byte	0
 4538 053a 00        		.byte	0
 4539 053b 00        		.byte	0
 4540 053c 00        		.byte	0
 4541 053d 00        		.byte	0
 4542 053e 00        		.byte	0
 4543 053f 00        		.byte	0
 4544               		.text
 4545               	.Letext0:
 4546               		.file 2 "/usr/avr/include/stdint.h"
 4547               		.file 3 "platforms/avr/drivers/i2c_master.h"
 4548               		.file 4 "drivers/oled/oled_driver.h"
 4549               		.file 5 "tmk_core/common/timer.h"
 4550               		.file 6 "drivers/oled/glcdfont.c"
 4551               		.file 7 "/usr/avr/include/avr/pgmspace.h"
 4552               		.file 8 "/usr/avr/include/string.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ssd1306_sh1106.c
     /tmp/ccajmf1L.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccajmf1L.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccajmf1L.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccajmf1L.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccajmf1L.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccajmf1L.s:12     .text.i2c_transmit_P.constprop.2:0000000000000000 i2c_transmit_P.constprop.2
     /tmp/ccajmf1L.s:151    .text.oled_init_user:0000000000000000 oled_init_user
     /tmp/ccajmf1L.s:170    .text.oled_clear:0000000000000000 oled_clear
                            *COM*:0000000000000200 oled_buffer
                            *COM*:0000000000000002 oled_cursor
     /tmp/ccajmf1L.s:3192   .bss.oled_dirty:0000000000000000 oled_dirty
     /tmp/ccajmf1L.s:209    .text.oled_init:0000000000000000 oled_init
     /tmp/ccajmf1L.s:3156   .bss.oled_rotation:0000000000000000 oled_rotation
     /tmp/ccajmf1L.s:3150   .bss.oled_rotation_width:0000000000000000 oled_rotation_width
     /tmp/ccajmf1L.s:3112   .progmem.data.display_setup1.2103:0000000000000000 display_setup1.2103
     /tmp/ccajmf1L.s:3105   .progmem.data.display_normal.2104:0000000000000000 display_normal.2104
     /tmp/ccajmf1L.s:3081   .progmem.data.display_setup2.2106:0000000000000000 display_setup2.2106
                            *COM*:0000000000000004 oled_timeout
     /tmp/ccajmf1L.s:3186   .bss.oled_initialized:0000000000000000 oled_initialized
     /tmp/ccajmf1L.s:3180   .bss.oled_active:0000000000000000 oled_active
     /tmp/ccajmf1L.s:3174   .bss.oled_scrolling:0000000000000000 oled_scrolling
     /tmp/ccajmf1L.s:3098   .progmem.data.display_flipped.2105:0000000000000000 display_flipped.2105
     /tmp/ccajmf1L.s:344    .text.crot:0000000000000000 crot
     /tmp/ccajmf1L.s:394    .text.oled_set_cursor:0000000000000000 oled_set_cursor
     /tmp/ccajmf1L.s:445    .text.oled_advance_char:0000000000000000 oled_advance_char
     /tmp/ccajmf1L.s:510    .text.oled_write_char:0000000000000000 oled_write_char
     /tmp/ccajmf1L.s:745    .text.oled_advance_page:0000000000000000 oled_advance_page
     /tmp/ccajmf1L.s:3044   .bss.oled_temp_buffer.2179:0000000000000000 oled_temp_buffer.2179
     /tmp/ccajmf1L.s:3199   .progmem.data.font:0000000000000000 font
     /tmp/ccajmf1L.s:851    .text.oled_write:0000000000000000 oled_write
     /tmp/ccajmf1L.s:933    .text.oled_write_ln:0000000000000000 oled_write_ln
     /tmp/ccajmf1L.s:955    .text.oled_pan:0000000000000000 oled_pan
     /tmp/ccajmf1L.s:1050   .text.oled_read_raw:0000000000000000 oled_read_raw
     /tmp/ccajmf1L.s:1097   .text.oled_write_raw_byte:0000000000000000 oled_write_raw_byte
     /tmp/ccajmf1L.s:1164   .text.oled_write_raw:0000000000000000 oled_write_raw
     /tmp/ccajmf1L.s:1292   .text.oled_write_pixel:0000000000000000 oled_write_pixel
     /tmp/ccajmf1L.s:1405   .text.oled_write_P:0000000000000000 oled_write_P
     /tmp/ccajmf1L.s:1478   .text.oled_write_ln_P:0000000000000000 oled_write_ln_P
     /tmp/ccajmf1L.s:1500   .text.oled_write_raw_P:0000000000000000 oled_write_raw_P
     /tmp/ccajmf1L.s:1653   .text.oled_on:0000000000000000 oled_on
     /tmp/ccajmf1L.s:3038   .progmem.data.display_on.2272:0000000000000000 display_on.2272
     /tmp/ccajmf1L.s:1716   .text.oled_render:0000000000000000 oled_render
     /tmp/ccajmf1L.s:3070   .data.display_start.2149:0000000000000000 display_start.2149
     /tmp/ccajmf1L.s:3065   .bss.temp_buffer.2152:0000000000000000 temp_buffer.2152
     /tmp/ccajmf1L.s:3057   .rodata.target_map.2151:0000000000000000 target_map.2151
     /tmp/ccajmf1L.s:3049   .rodata.source_map.2150:0000000000000000 source_map.2150
     /tmp/ccajmf1L.s:2213   .text.oled_off:0000000000000000 oled_off
     /tmp/ccajmf1L.s:3032   .progmem.data.display_off.2276:0000000000000000 display_off.2276
     /tmp/ccajmf1L.s:2270   .text.is_oled_on:0000000000000000 is_oled_on
     /tmp/ccajmf1L.s:2289   .text.oled_set_brightness:0000000000000000 oled_set_brightness
     /tmp/ccajmf1L.s:3162   .data.oled_brightness:0000000000000000 oled_brightness
     /tmp/ccajmf1L.s:2380   .text.oled_get_brightness:0000000000000000 oled_get_brightness
     /tmp/ccajmf1L.s:2399   .text.oled_scroll_set_area:0000000000000000 oled_scroll_set_area
     /tmp/ccajmf1L.s:3138   .bss.oled_scroll_start:0000000000000000 oled_scroll_start
     /tmp/ccajmf1L.s:3132   .data.oled_scroll_end:0000000000000000 oled_scroll_end
     /tmp/ccajmf1L.s:2423   .text.oled_scroll_set_speed:0000000000000000 oled_scroll_set_speed
     /tmp/ccajmf1L.s:3020   .rodata.scroll_remap.2294:0000000000000000 scroll_remap.2294
     /tmp/ccajmf1L.s:3144   .bss.oled_scroll_speed:0000000000000000 oled_scroll_speed
     /tmp/ccajmf1L.s:2453   .text.oled_scroll_right:0000000000000000 oled_scroll_right
     /tmp/ccajmf1L.s:2560   .text.oled_scroll_left:0000000000000000 oled_scroll_left
     /tmp/ccajmf1L.s:2667   .text.oled_scroll_off:0000000000000000 oled_scroll_off
     /tmp/ccajmf1L.s:3014   .progmem.data.display_scroll_off.2306:0000000000000000 display_scroll_off.2306
     /tmp/ccajmf1L.s:2732   .text.is_oled_scrolling:0000000000000000 is_oled_scrolling
     /tmp/ccajmf1L.s:2751   .text.oled_invert:0000000000000000 oled_invert
     /tmp/ccajmf1L.s:3168   .bss.oled_inverted:0000000000000000 oled_inverted
     /tmp/ccajmf1L.s:3008   .progmem.data.display_inverted.2313:0000000000000000 display_inverted.2313
     /tmp/ccajmf1L.s:3002   .progmem.data.display_normal.2314:0000000000000000 display_normal.2314
     /tmp/ccajmf1L.s:2837   .text.oled_max_chars:0000000000000000 oled_max_chars
     /tmp/ccajmf1L.s:2865   .text.oled_max_lines:0000000000000000 oled_max_lines
     /tmp/ccajmf1L.s:2893   .text.oled_task_user:0000000000000000 oled_task_user
     /tmp/ccajmf1L.s:2911   .text.oled_task:0000000000000000 oled_task
                            *COM*:0000000000000002 oled_update_timeout

UNDEFINED SYMBOLS
i2c_start
i2c_write
i2c_stop
i2c_init
timer_read32
__udivmodhi4
memcmp
memcpy_P
__udivmodqi4
i2c_transmit
i2c_writeReg
timer_elapsed
timer_read
__do_copy_data
__do_clear_bss
