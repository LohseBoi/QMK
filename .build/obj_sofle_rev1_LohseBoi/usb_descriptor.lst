   1               		.file	"usb_descriptor.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.get_usb_descriptor,"ax",@progbits
  11               	.global	get_usb_descriptor
  13               	get_usb_descriptor:
  14               	.LVL0:
  15               	.LFB102:
  16               		.file 1 "tmk_core/protocol/usb_descriptor.c"
   1:tmk_core/protocol/usb_descriptor.c **** /*
   2:tmk_core/protocol/usb_descriptor.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:tmk_core/protocol/usb_descriptor.c ****  * This file is based on:
   4:tmk_core/protocol/usb_descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:tmk_core/protocol/usb_descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:tmk_core/protocol/usb_descriptor.c ****  */
   7:tmk_core/protocol/usb_descriptor.c **** 
   8:tmk_core/protocol/usb_descriptor.c **** /*
   9:tmk_core/protocol/usb_descriptor.c ****                          LUFA Library
  10:tmk_core/protocol/usb_descriptor.c ****          Copyright (C) Dean Camera, 2012.
  11:tmk_core/protocol/usb_descriptor.c **** 
  12:tmk_core/protocol/usb_descriptor.c ****     dean [at] fourwalledcubicle [dot] com
  13:tmk_core/protocol/usb_descriptor.c ****                      www.lufa-lib.org
  14:tmk_core/protocol/usb_descriptor.c **** */
  15:tmk_core/protocol/usb_descriptor.c **** 
  16:tmk_core/protocol/usb_descriptor.c **** /*
  17:tmk_core/protocol/usb_descriptor.c ****     Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:tmk_core/protocol/usb_descriptor.c ****     Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:tmk_core/protocol/usb_descriptor.c **** 
  20:tmk_core/protocol/usb_descriptor.c ****     Permission to use, copy, modify, distribute, and sell this
  21:tmk_core/protocol/usb_descriptor.c ****     software and its documentation for any purpose is hereby granted
  22:tmk_core/protocol/usb_descriptor.c ****     without fee, provided that the above copyright notice appear in
  23:tmk_core/protocol/usb_descriptor.c ****     all copies and that both that the copyright notice and this
  24:tmk_core/protocol/usb_descriptor.c ****     permission notice and warranty disclaimer appear in supporting
  25:tmk_core/protocol/usb_descriptor.c ****     documentation, and that the name of the author not be used in
  26:tmk_core/protocol/usb_descriptor.c ****     advertising or publicity pertaining to distribution of the
  27:tmk_core/protocol/usb_descriptor.c ****     software without specific, written prior permission.
  28:tmk_core/protocol/usb_descriptor.c **** 
  29:tmk_core/protocol/usb_descriptor.c ****     The author disclaim all warranties with regard to this
  30:tmk_core/protocol/usb_descriptor.c ****     software, including all implied warranties of merchantability
  31:tmk_core/protocol/usb_descriptor.c ****     and fitness.  In no event shall the author be liable for any
  32:tmk_core/protocol/usb_descriptor.c ****     special, indirect or consequential damages or any damages
  33:tmk_core/protocol/usb_descriptor.c ****     whatsoever resulting from loss of use, data or profits, whether
  34:tmk_core/protocol/usb_descriptor.c ****     in an action of contract, negligence or other tortious action,
  35:tmk_core/protocol/usb_descriptor.c ****     arising out of or in connection with the use or performance of
  36:tmk_core/protocol/usb_descriptor.c ****     this software.
  37:tmk_core/protocol/usb_descriptor.c **** */
  38:tmk_core/protocol/usb_descriptor.c **** 
  39:tmk_core/protocol/usb_descriptor.c **** #include "util.h"
  40:tmk_core/protocol/usb_descriptor.c **** #include "report.h"
  41:tmk_core/protocol/usb_descriptor.c **** #include "usb_descriptor.h"
  42:tmk_core/protocol/usb_descriptor.c **** #include "usb_descriptor_common.h"
  43:tmk_core/protocol/usb_descriptor.c **** 
  44:tmk_core/protocol/usb_descriptor.c **** #ifdef JOYSTICK_ENABLE
  45:tmk_core/protocol/usb_descriptor.c **** #    include "joystick.h"
  46:tmk_core/protocol/usb_descriptor.c **** #endif
  47:tmk_core/protocol/usb_descriptor.c **** 
  48:tmk_core/protocol/usb_descriptor.c **** // clang-format off
  49:tmk_core/protocol/usb_descriptor.c **** 
  50:tmk_core/protocol/usb_descriptor.c **** /*
  51:tmk_core/protocol/usb_descriptor.c ****  * HID report descriptors
  52:tmk_core/protocol/usb_descriptor.c ****  */
  53:tmk_core/protocol/usb_descriptor.c **** #ifdef KEYBOARD_SHARED_EP
  54:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
  55:tmk_core/protocol/usb_descriptor.c **** #    define SHARED_REPORT_STARTED
  56:tmk_core/protocol/usb_descriptor.c **** #else
  57:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM KeyboardReport[] = {
  58:tmk_core/protocol/usb_descriptor.c **** #endif
  59:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),        // Generic Desktop
  60:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x06),             // Keyboard
  61:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),        // Application
  62:tmk_core/protocol/usb_descriptor.c **** #ifdef KEYBOARD_SHARED_EP
  63:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_KEYBOARD),
  64:tmk_core/protocol/usb_descriptor.c **** #endif
  65:tmk_core/protocol/usb_descriptor.c ****         // Modifiers (8 bits)
  66:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07),    // Keyboard/Keypad
  67:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0xE0), // Keyboard Left Control
  68:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xE7), // Keyboard Right GUI
  69:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
  70:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
  71:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x08),
  72:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
  73:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
  74:tmk_core/protocol/usb_descriptor.c ****         // Reserved (1 byte)
  75:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
  76:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
  77:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_CONSTANT),
  78:tmk_core/protocol/usb_descriptor.c ****         // Keycodes (6 bytes)
  79:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07),    // Keyboard/Keypad
  80:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x00),
  81:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xFF),
  82:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
  83:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
  84:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x06),
  85:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
  86:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
  87:tmk_core/protocol/usb_descriptor.c **** 
  88:tmk_core/protocol/usb_descriptor.c ****         // Status LEDs (5 bits)
  89:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x08),    // LED
  90:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01), // Num Lock
  91:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0x05), // Kana
  92:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x05),
  93:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
  94:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
  95:tmk_core/protocol/usb_descriptor.c ****         // LED padding (3 bits)
  96:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
  97:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x03),
  98:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
  99:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 100:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 101:tmk_core/protocol/usb_descriptor.c **** };
 102:tmk_core/protocol/usb_descriptor.c **** #endif
 103:tmk_core/protocol/usb_descriptor.c **** 
 104:tmk_core/protocol/usb_descriptor.c **** #ifdef MOUSE_ENABLE
 105:tmk_core/protocol/usb_descriptor.c **** #    ifndef MOUSE_SHARED_EP
 106:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM MouseReport[] = {
 107:tmk_core/protocol/usb_descriptor.c **** #    elif !defined(SHARED_REPORT_STARTED)
 108:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
 109:tmk_core/protocol/usb_descriptor.c **** #        define SHARED_REPORT_STARTED
 110:tmk_core/protocol/usb_descriptor.c **** #    endif
 111:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),            // Generic Desktop
 112:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x02),                 // Mouse
 113:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),            // Application
 114:tmk_core/protocol/usb_descriptor.c **** #    ifdef MOUSE_SHARED_EP
 115:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_MOUSE),
 116:tmk_core/protocol/usb_descriptor.c **** #    endif
 117:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x01),             // Pointer
 118:tmk_core/protocol/usb_descriptor.c ****         HID_RI_COLLECTION(8, 0x00),        // Physical
 119:tmk_core/protocol/usb_descriptor.c ****             // Buttons (8 bits)
 120:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x09),    // Button
 121:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_MINIMUM(8, 0x01), // Button 1
 122:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_MAXIMUM(8, 0x08), // Button 8
 123:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, 0x00),
 124:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 125:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x08),
 126:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x01),
 127:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 128:tmk_core/protocol/usb_descriptor.c **** 
 129:tmk_core/protocol/usb_descriptor.c ****             // X/Y position (2 bytes)
 130:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x01),    // Generic Desktop
 131:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x30),         // X
 132:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x31),         // Y
 133:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 134:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 135:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x02),
 136:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 137:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 138:tmk_core/protocol/usb_descriptor.c **** 
 139:tmk_core/protocol/usb_descriptor.c ****             // Vertical wheel (1 byte)
 140:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x38),         // Wheel
 141:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 142:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 143:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 144:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 145:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 146:tmk_core/protocol/usb_descriptor.c ****             // Horizontal wheel (1 byte)
 147:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x0C),    // Consumer
 148:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(16, 0x0238),      // AC Pan
 149:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 150:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 151:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 152:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 153:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 154:tmk_core/protocol/usb_descriptor.c ****         HID_RI_END_COLLECTION(0),
 155:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 156:tmk_core/protocol/usb_descriptor.c **** #    ifndef MOUSE_SHARED_EP
 157:tmk_core/protocol/usb_descriptor.c **** };
 158:tmk_core/protocol/usb_descriptor.c **** #    endif
 159:tmk_core/protocol/usb_descriptor.c **** #endif
 160:tmk_core/protocol/usb_descriptor.c **** 
 161:tmk_core/protocol/usb_descriptor.c **** #ifdef DIGITIZER_ENABLE
 162:tmk_core/protocol/usb_descriptor.c **** #    ifndef DIGITIZER_SHARED_EP
 163:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM DigitizerReport[] = {
 164:tmk_core/protocol/usb_descriptor.c **** #    elif !defined(SHARED_REPORT_STARTED)
 165:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
 166:tmk_core/protocol/usb_descriptor.c **** #        define SHARED_REPORT_STARTED
 167:tmk_core/protocol/usb_descriptor.c **** #    endif
 168:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x0D),      // Digitizers
 169:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x01),           // Digitizer
 170:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),      // Application
 171:tmk_core/protocol/usb_descriptor.c **** #    ifdef DIGITIZER_SHARED_EP
 172:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_DIGITIZER),
 173:tmk_core/protocol/usb_descriptor.c **** #    endif
 174:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x20),       // Stylus
 175:tmk_core/protocol/usb_descriptor.c ****         HID_RI_COLLECTION(8, 0x00),  // Physical
 176:tmk_core/protocol/usb_descriptor.c ****             // Tip Switch (1 bit)
 177:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x42),   // Tip Switch
 178:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, 0x00),
 179:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 180:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x01),
 181:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 182:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_VARIABLE),
 183:tmk_core/protocol/usb_descriptor.c ****             // In Range (1 bit)
 184:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x32),  // In Range
 185:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_VARIABLE),
 186:tmk_core/protocol/usb_descriptor.c ****             // Padding (6 bits)
 187:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x06),
 188:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_CONSTANT | HID_IOF_VARIABLE),
 189:tmk_core/protocol/usb_descriptor.c **** 
 190:tmk_core/protocol/usb_descriptor.c ****             // X/Y Position (4 bytes)
 191:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x01),     // Generic Desktop
 192:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(16, 0x7FFF),
 193:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x10),
 194:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 195:tmk_core/protocol/usb_descriptor.c ****             HID_RI_UNIT(8, 0x33),           // Inch, English Linear
 196:tmk_core/protocol/usb_descriptor.c ****             HID_RI_UNIT_EXPONENT(8, 0x0E),  // -2
 197:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x30),          // X
 198:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_VARIABLE),
 199:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x31),          // Y
 200:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_VARIABLE),
 201:tmk_core/protocol/usb_descriptor.c ****         HID_RI_END_COLLECTION(0),
 202:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 203:tmk_core/protocol/usb_descriptor.c **** #    ifndef DIGITIZER_SHARED_EP
 204:tmk_core/protocol/usb_descriptor.c **** };
 205:tmk_core/protocol/usb_descriptor.c **** #    endif
 206:tmk_core/protocol/usb_descriptor.c **** #endif
 207:tmk_core/protocol/usb_descriptor.c **** 
 208:tmk_core/protocol/usb_descriptor.c **** #if defined(SHARED_EP_ENABLE) && !defined(SHARED_REPORT_STARTED)
 209:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
 210:tmk_core/protocol/usb_descriptor.c **** #endif
 211:tmk_core/protocol/usb_descriptor.c **** 
 212:tmk_core/protocol/usb_descriptor.c **** #ifdef EXTRAKEY_ENABLE
 213:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),           // Generic Desktop
 214:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x80),                // System Control
 215:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),           // Application
 216:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_SYSTEM),
 217:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01),    // Pointer
 218:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(16, 0x00B7), // System Display LCD Autoscale
 219:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x01),
 220:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00B7),
 221:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 1),
 222:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 16),
 223:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 224:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 225:tmk_core/protocol/usb_descriptor.c **** 
 226:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x0C),           // Consumer
 227:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x01),                // Consumer Control
 228:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),           // Application
 229:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_CONSUMER),
 230:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01),    // Consumer Control
 231:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(16, 0x02A0), // AC Desktop Show All Applications
 232:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x01),
 233:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x02A0),
 234:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 1),
 235:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 16),
 236:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 237:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 238:tmk_core/protocol/usb_descriptor.c **** #endif
 239:tmk_core/protocol/usb_descriptor.c **** 
 240:tmk_core/protocol/usb_descriptor.c **** #ifdef NKRO_ENABLE
 241:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),        // Generic Desktop
 242:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x06),             // Keyboard
 243:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),        // Application
 244:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_NKRO),
 245:tmk_core/protocol/usb_descriptor.c ****         // Modifiers (8 bits)
 246:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07),    // Keyboard/Keypad
 247:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0xE0), // Keyboard Left Control
 248:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xE7), // Keyboard Right GUI
 249:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 250:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 251:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x08),
 252:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 253:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 254:tmk_core/protocol/usb_descriptor.c ****         // Keycodes
 255:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07),    // Keyboard/Keypad
 256:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x00),
 257:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, KEYBOARD_REPORT_BITS * 8 - 1),
 258:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 259:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 260:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, KEYBOARD_REPORT_BITS * 8),
 261:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 262:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 263:tmk_core/protocol/usb_descriptor.c **** 
 264:tmk_core/protocol/usb_descriptor.c ****         // Status LEDs (5 bits)
 265:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x08),    // LED
 266:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01), // Num Lock
 267:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0x05), // Kana
 268:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x05),
 269:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 270:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 271:tmk_core/protocol/usb_descriptor.c ****         // LED padding (3 bits)
 272:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
 273:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x03),
 274:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
 275:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 276:tmk_core/protocol/usb_descriptor.c **** #endif
 277:tmk_core/protocol/usb_descriptor.c **** 
 278:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 279:tmk_core/protocol/usb_descriptor.c **** };
 280:tmk_core/protocol/usb_descriptor.c **** #endif
 281:tmk_core/protocol/usb_descriptor.c **** 
 282:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 283:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM RawReport[] = {
 284:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(16, RAW_USAGE_PAGE), // Vendor Defined
 285:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, RAW_USAGE_ID),         // Vendor Defined
 286:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),    // Application
 287:tmk_core/protocol/usb_descriptor.c ****         // Data to host
 288:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x62),     // Vendor Defined
 289:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 290:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 291:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, RAW_EPSIZE),
 292:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 293:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 294:tmk_core/protocol/usb_descriptor.c **** 
 295:tmk_core/protocol/usb_descriptor.c ****         // Data from host
 296:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x63),     // Vendor Defined
 297:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 298:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 299:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, RAW_EPSIZE),
 300:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 301:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 302:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 303:tmk_core/protocol/usb_descriptor.c **** };
 304:tmk_core/protocol/usb_descriptor.c **** #endif
 305:tmk_core/protocol/usb_descriptor.c **** 
 306:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 307:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM ConsoleReport[] = {
 308:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(16, 0xFF31), // Vendor Defined (PJRC Teensy compatible)
 309:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x74),         // Vendor Defined (PJRC Teensy compatible)
 310:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),    // Application
 311:tmk_core/protocol/usb_descriptor.c ****         // Data to host
 312:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x75),     // Vendor Defined
 313:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 314:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 315:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 316:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 317:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 318:tmk_core/protocol/usb_descriptor.c **** 
 319:tmk_core/protocol/usb_descriptor.c ****         // Data from host
 320:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x76),     // Vendor Defined
 321:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 322:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 323:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 324:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 325:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 326:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 327:tmk_core/protocol/usb_descriptor.c **** };
 328:tmk_core/protocol/usb_descriptor.c **** #endif
 329:tmk_core/protocol/usb_descriptor.c **** 
 330:tmk_core/protocol/usb_descriptor.c **** #ifdef JOYSTICK_ENABLE
 331:tmk_core/protocol/usb_descriptor.c **** #    if JOYSTICK_AXES_COUNT == 0 && JOYSTICK_BUTTON_COUNT == 0
 332:tmk_core/protocol/usb_descriptor.c **** #        error Need at least one axis or button for joystick
 333:tmk_core/protocol/usb_descriptor.c **** #    endif
 334:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM JoystickReport[] = {
 335:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),         // Generic Desktop
 336:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x04),              // Joystick
 337:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),         // Application
 338:tmk_core/protocol/usb_descriptor.c ****         HID_RI_COLLECTION(8, 0x00),     // Physical
 339:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x01), // Generic Desktop
 340:tmk_core/protocol/usb_descriptor.c **** #    if JOYSTICK_AXES_COUNT >= 1
 341:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x30),      // X
 342:tmk_core/protocol/usb_descriptor.c **** #    endif
 343:tmk_core/protocol/usb_descriptor.c **** #    if JOYSTICK_AXES_COUNT >= 2
 344:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x31),      // Y
 345:tmk_core/protocol/usb_descriptor.c **** #    endif
 346:tmk_core/protocol/usb_descriptor.c **** #    if JOYSTICK_AXES_COUNT >= 3
 347:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x32),      // Z
 348:tmk_core/protocol/usb_descriptor.c **** #    endif
 349:tmk_core/protocol/usb_descriptor.c **** #    if JOYSTICK_AXES_COUNT >= 4
 350:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x33),      // Rx
 351:tmk_core/protocol/usb_descriptor.c **** #    endif
 352:tmk_core/protocol/usb_descriptor.c **** #    if JOYSTICK_AXES_COUNT >= 5
 353:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x34),      // Ry
 354:tmk_core/protocol/usb_descriptor.c **** #    endif
 355:tmk_core/protocol/usb_descriptor.c **** #    if JOYSTICK_AXES_COUNT >= 6
 356:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x35),      // Rz
 357:tmk_core/protocol/usb_descriptor.c **** #    endif
 358:tmk_core/protocol/usb_descriptor.c **** #    if JOYSTICK_AXES_COUNT >= 1
 359:tmk_core/protocol/usb_descriptor.c ****      # if JOYSTICK_AXES_RESOLUTION == 8
 360:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -JOYSTICK_RESOLUTION),
 361:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, JOYSTICK_RESOLUTION),
 362:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, JOYSTICK_AXES_COUNT),
 363:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 364:tmk_core/protocol/usb_descriptor.c ****      # else
 365:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(16, -JOYSTICK_RESOLUTION),
 366:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(16, JOYSTICK_RESOLUTION),
 367:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, JOYSTICK_AXES_COUNT),
 368:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x10),
 369:tmk_core/protocol/usb_descriptor.c ****      # endif
 370:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 371:tmk_core/protocol/usb_descriptor.c **** #    endif
 372:tmk_core/protocol/usb_descriptor.c **** 
 373:tmk_core/protocol/usb_descriptor.c **** #    if JOYSTICK_BUTTON_COUNT >= 1
 374:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x09), // Button
 375:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_MINIMUM(8, 0x01),
 376:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_MAXIMUM(8, JOYSTICK_BUTTON_COUNT),
 377:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, 0x00),
 378:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 379:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, JOYSTICK_BUTTON_COUNT),
 380:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x01),
 381:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 382:tmk_core/protocol/usb_descriptor.c **** 
 383:tmk_core/protocol/usb_descriptor.c **** #        if (JOYSTICK_BUTTON_COUNT % 8) != 0
 384:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 8 - (JOYSTICK_BUTTON_COUNT % 8)),
 385:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x01),
 386:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_CONSTANT),
 387:tmk_core/protocol/usb_descriptor.c **** #        endif
 388:tmk_core/protocol/usb_descriptor.c **** #    endif
 389:tmk_core/protocol/usb_descriptor.c ****         HID_RI_END_COLLECTION(0),
 390:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0)
 391:tmk_core/protocol/usb_descriptor.c **** };
 392:tmk_core/protocol/usb_descriptor.c **** #endif
 393:tmk_core/protocol/usb_descriptor.c **** 
 394:tmk_core/protocol/usb_descriptor.c **** /*
 395:tmk_core/protocol/usb_descriptor.c ****  * Device descriptor
 396:tmk_core/protocol/usb_descriptor.c ****  */
 397:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor = {
 398:tmk_core/protocol/usb_descriptor.c ****     .Header = {
 399:tmk_core/protocol/usb_descriptor.c ****         .Size                   = sizeof(USB_Descriptor_Device_t),
 400:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_Device
 401:tmk_core/protocol/usb_descriptor.c ****     },
 402:tmk_core/protocol/usb_descriptor.c ****     .USBSpecification           = VERSION_BCD(2, 0, 0),
 403:tmk_core/protocol/usb_descriptor.c **** 
 404:tmk_core/protocol/usb_descriptor.c **** #if VIRTSER_ENABLE
 405:tmk_core/protocol/usb_descriptor.c ****     .Class                      = USB_CSCP_IADDeviceClass,
 406:tmk_core/protocol/usb_descriptor.c ****     .SubClass                   = USB_CSCP_IADDeviceSubclass,
 407:tmk_core/protocol/usb_descriptor.c ****     .Protocol                   = USB_CSCP_IADDeviceProtocol,
 408:tmk_core/protocol/usb_descriptor.c **** #else
 409:tmk_core/protocol/usb_descriptor.c ****     .Class                      = USB_CSCP_NoDeviceClass,
 410:tmk_core/protocol/usb_descriptor.c ****     .SubClass                   = USB_CSCP_NoDeviceSubclass,
 411:tmk_core/protocol/usb_descriptor.c ****     .Protocol                   = USB_CSCP_NoDeviceProtocol,
 412:tmk_core/protocol/usb_descriptor.c **** #endif
 413:tmk_core/protocol/usb_descriptor.c **** 
 414:tmk_core/protocol/usb_descriptor.c ****     .Endpoint0Size              = FIXED_CONTROL_ENDPOINT_SIZE,
 415:tmk_core/protocol/usb_descriptor.c ****     // Specified in config.h
 416:tmk_core/protocol/usb_descriptor.c ****     .VendorID                   = VENDOR_ID,
 417:tmk_core/protocol/usb_descriptor.c ****     .ProductID                  = PRODUCT_ID,
 418:tmk_core/protocol/usb_descriptor.c ****     .ReleaseNumber              = DEVICE_VER,
 419:tmk_core/protocol/usb_descriptor.c ****     .ManufacturerStrIndex       = 0x01,
 420:tmk_core/protocol/usb_descriptor.c ****     .ProductStrIndex            = 0x02,
 421:tmk_core/protocol/usb_descriptor.c **** #if defined(SERIAL_NUMBER)
 422:tmk_core/protocol/usb_descriptor.c ****     .SerialNumStrIndex          = 0x03,
 423:tmk_core/protocol/usb_descriptor.c **** #else
 424:tmk_core/protocol/usb_descriptor.c ****     .SerialNumStrIndex          = 0x00,
 425:tmk_core/protocol/usb_descriptor.c **** #endif
 426:tmk_core/protocol/usb_descriptor.c ****     .NumberOfConfigurations     = FIXED_NUM_CONFIGURATIONS
 427:tmk_core/protocol/usb_descriptor.c **** };
 428:tmk_core/protocol/usb_descriptor.c **** 
 429:tmk_core/protocol/usb_descriptor.c **** #ifndef USB_MAX_POWER_CONSUMPTION
 430:tmk_core/protocol/usb_descriptor.c **** #    define USB_MAX_POWER_CONSUMPTION 500
 431:tmk_core/protocol/usb_descriptor.c **** #endif
 432:tmk_core/protocol/usb_descriptor.c **** 
 433:tmk_core/protocol/usb_descriptor.c **** #ifndef USB_POLLING_INTERVAL_MS
 434:tmk_core/protocol/usb_descriptor.c **** #    define USB_POLLING_INTERVAL_MS 10
 435:tmk_core/protocol/usb_descriptor.c **** #endif
 436:tmk_core/protocol/usb_descriptor.c **** 
 437:tmk_core/protocol/usb_descriptor.c **** /*
 438:tmk_core/protocol/usb_descriptor.c ****  * Configuration descriptors
 439:tmk_core/protocol/usb_descriptor.c ****  */
 440:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor = {
 441:tmk_core/protocol/usb_descriptor.c ****     .Config = {
 442:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 443:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Configuration_Header_t),
 444:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Configuration
 445:tmk_core/protocol/usb_descriptor.c ****         },
 446:tmk_core/protocol/usb_descriptor.c ****         .TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
 447:tmk_core/protocol/usb_descriptor.c ****         .TotalInterfaces        = TOTAL_INTERFACES,
 448:tmk_core/protocol/usb_descriptor.c ****         .ConfigurationNumber    = 1,
 449:tmk_core/protocol/usb_descriptor.c ****         .ConfigurationStrIndex  = NO_DESCRIPTOR,
 450:tmk_core/protocol/usb_descriptor.c ****         .ConfigAttributes       = (USB_CONFIG_ATTR_RESERVED | USB_CONFIG_ATTR_REMOTEWAKEUP),
 451:tmk_core/protocol/usb_descriptor.c ****         .MaxPowerConsumption    = USB_CONFIG_POWER_MA(USB_MAX_POWER_CONSUMPTION)
 452:tmk_core/protocol/usb_descriptor.c ****     },
 453:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 454:tmk_core/protocol/usb_descriptor.c ****     /*
 455:tmk_core/protocol/usb_descriptor.c ****      * Keyboard
 456:tmk_core/protocol/usb_descriptor.c ****      */
 457:tmk_core/protocol/usb_descriptor.c ****     .Keyboard_Interface = {
 458:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 459:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 460:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 461:tmk_core/protocol/usb_descriptor.c ****         },
 462:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = KEYBOARD_INTERFACE,
 463:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 464:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 1,
 465:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 466:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_BootSubclass,
 467:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_KeyboardBootProtocol,
 468:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 469:tmk_core/protocol/usb_descriptor.c ****     },
 470:tmk_core/protocol/usb_descriptor.c ****     .Keyboard_HID = {
 471:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 472:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 473:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 474:tmk_core/protocol/usb_descriptor.c ****         },
 475:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 476:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 477:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 478:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 479:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(KeyboardReport)
 480:tmk_core/protocol/usb_descriptor.c ****     },
 481:tmk_core/protocol/usb_descriptor.c ****     .Keyboard_INEndpoint = {
 482:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 483:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 484:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 485:tmk_core/protocol/usb_descriptor.c ****         },
 486:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | KEYBOARD_IN_EPNUM),
 487:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 488:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = KEYBOARD_EPSIZE,
 489:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = USB_POLLING_INTERVAL_MS
 490:tmk_core/protocol/usb_descriptor.c ****     },
 491:tmk_core/protocol/usb_descriptor.c **** #endif
 492:tmk_core/protocol/usb_descriptor.c **** 
 493:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 494:tmk_core/protocol/usb_descriptor.c ****     /*
 495:tmk_core/protocol/usb_descriptor.c ****      * Raw HID
 496:tmk_core/protocol/usb_descriptor.c ****      */
 497:tmk_core/protocol/usb_descriptor.c ****     .Raw_Interface = {
 498:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 499:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 500:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 501:tmk_core/protocol/usb_descriptor.c ****         },
 502:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = RAW_INTERFACE,
 503:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 504:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 2,
 505:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 506:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_NonBootSubclass,
 507:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_NonBootProtocol,
 508:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 509:tmk_core/protocol/usb_descriptor.c ****     },
 510:tmk_core/protocol/usb_descriptor.c ****     .Raw_HID = {
 511:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 512:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 513:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 514:tmk_core/protocol/usb_descriptor.c ****         },
 515:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 516:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 517:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 518:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 519:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(RawReport)
 520:tmk_core/protocol/usb_descriptor.c ****     },
 521:tmk_core/protocol/usb_descriptor.c ****     .Raw_INEndpoint = {
 522:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 523:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 524:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 525:tmk_core/protocol/usb_descriptor.c ****         },
 526:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | RAW_IN_EPNUM),
 527:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 528:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = RAW_EPSIZE,
 529:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x01
 530:tmk_core/protocol/usb_descriptor.c ****     },
 531:tmk_core/protocol/usb_descriptor.c ****     .Raw_OUTEndpoint = {
 532:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 533:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 534:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 535:tmk_core/protocol/usb_descriptor.c ****         },
 536:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_OUT | RAW_OUT_EPNUM),
 537:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 538:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = RAW_EPSIZE,
 539:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x01
 540:tmk_core/protocol/usb_descriptor.c ****     },
 541:tmk_core/protocol/usb_descriptor.c **** #endif
 542:tmk_core/protocol/usb_descriptor.c **** 
 543:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 544:tmk_core/protocol/usb_descriptor.c ****     /*
 545:tmk_core/protocol/usb_descriptor.c ****      * Mouse
 546:tmk_core/protocol/usb_descriptor.c ****      */
 547:tmk_core/protocol/usb_descriptor.c ****     .Mouse_Interface  = {
 548:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 549:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 550:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 551:tmk_core/protocol/usb_descriptor.c ****         },
 552:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = MOUSE_INTERFACE,
 553:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 554:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 1,
 555:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 556:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_BootSubclass,
 557:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_MouseBootProtocol,
 558:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 559:tmk_core/protocol/usb_descriptor.c ****     },
 560:tmk_core/protocol/usb_descriptor.c ****     .Mouse_HID = {
 561:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 562:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 563:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 564:tmk_core/protocol/usb_descriptor.c ****         },
 565:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 566:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 567:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 568:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 569:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(MouseReport)
 570:tmk_core/protocol/usb_descriptor.c ****     },
 571:tmk_core/protocol/usb_descriptor.c ****     .Mouse_INEndpoint = {
 572:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 573:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 574:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 575:tmk_core/protocol/usb_descriptor.c ****         },
 576:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | MOUSE_IN_EPNUM),
 577:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 578:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = MOUSE_EPSIZE,
 579:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = USB_POLLING_INTERVAL_MS
 580:tmk_core/protocol/usb_descriptor.c ****     },
 581:tmk_core/protocol/usb_descriptor.c **** #endif
 582:tmk_core/protocol/usb_descriptor.c **** 
 583:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 584:tmk_core/protocol/usb_descriptor.c ****     /*
 585:tmk_core/protocol/usb_descriptor.c ****      * Shared
 586:tmk_core/protocol/usb_descriptor.c ****      */
 587:tmk_core/protocol/usb_descriptor.c ****     .Shared_Interface = {
 588:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 589:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 590:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 591:tmk_core/protocol/usb_descriptor.c ****         },
 592:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = SHARED_INTERFACE,
 593:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 594:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 1,
 595:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 596:tmk_core/protocol/usb_descriptor.c **** #    ifdef KEYBOARD_SHARED_EP
 597:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_BootSubclass,
 598:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_KeyboardBootProtocol,
 599:tmk_core/protocol/usb_descriptor.c **** #    else
 600:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_NonBootSubclass,
 601:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_NonBootProtocol,
 602:tmk_core/protocol/usb_descriptor.c **** #    endif
 603:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 604:tmk_core/protocol/usb_descriptor.c ****     },
 605:tmk_core/protocol/usb_descriptor.c ****     .Shared_HID = {
 606:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 607:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 608:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 609:tmk_core/protocol/usb_descriptor.c ****         },
 610:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 611:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 612:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 613:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 614:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(SharedReport)
 615:tmk_core/protocol/usb_descriptor.c ****     },
 616:tmk_core/protocol/usb_descriptor.c ****     .Shared_INEndpoint = {
 617:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 618:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 619:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 620:tmk_core/protocol/usb_descriptor.c ****         },
 621:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | SHARED_IN_EPNUM),
 622:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 623:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = SHARED_EPSIZE,
 624:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = USB_POLLING_INTERVAL_MS
 625:tmk_core/protocol/usb_descriptor.c ****     },
 626:tmk_core/protocol/usb_descriptor.c **** #endif
 627:tmk_core/protocol/usb_descriptor.c **** 
 628:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 629:tmk_core/protocol/usb_descriptor.c ****     /*
 630:tmk_core/protocol/usb_descriptor.c ****      * Console
 631:tmk_core/protocol/usb_descriptor.c ****      */
 632:tmk_core/protocol/usb_descriptor.c ****     .Console_Interface = {
 633:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 634:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 635:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 636:tmk_core/protocol/usb_descriptor.c ****         },
 637:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = CONSOLE_INTERFACE,
 638:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 639:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 2,
 640:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 641:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_NonBootSubclass,
 642:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_NonBootProtocol,
 643:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 644:tmk_core/protocol/usb_descriptor.c ****     },
 645:tmk_core/protocol/usb_descriptor.c ****     .Console_HID = {
 646:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 647:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 648:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 649:tmk_core/protocol/usb_descriptor.c ****         },
 650:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 651:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 652:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 653:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 654:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(ConsoleReport)
 655:tmk_core/protocol/usb_descriptor.c ****     },
 656:tmk_core/protocol/usb_descriptor.c ****     .Console_INEndpoint = {
 657:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 658:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 659:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 660:tmk_core/protocol/usb_descriptor.c ****         },
 661:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | CONSOLE_IN_EPNUM),
 662:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 663:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CONSOLE_EPSIZE,
 664:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x01
 665:tmk_core/protocol/usb_descriptor.c ****     },
 666:tmk_core/protocol/usb_descriptor.c ****     .Console_OUTEndpoint = {
 667:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 668:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 669:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 670:tmk_core/protocol/usb_descriptor.c ****         },
 671:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_OUT | CONSOLE_OUT_EPNUM),
 672:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 673:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CONSOLE_EPSIZE,
 674:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x01
 675:tmk_core/protocol/usb_descriptor.c ****     },
 676:tmk_core/protocol/usb_descriptor.c **** #endif
 677:tmk_core/protocol/usb_descriptor.c **** 
 678:tmk_core/protocol/usb_descriptor.c **** #ifdef MIDI_ENABLE
 679:tmk_core/protocol/usb_descriptor.c ****     /*
 680:tmk_core/protocol/usb_descriptor.c ****      * MIDI
 681:tmk_core/protocol/usb_descriptor.c ****      */
 682:tmk_core/protocol/usb_descriptor.c ****     .Audio_Interface_Association = {
 683:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 684:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_Association_t),
 685:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_InterfaceAssociation
 686:tmk_core/protocol/usb_descriptor.c ****         },
 687:tmk_core/protocol/usb_descriptor.c ****         .FirstInterfaceIndex    = AC_INTERFACE,
 688:tmk_core/protocol/usb_descriptor.c ****         .TotalInterfaces        = 2,
 689:tmk_core/protocol/usb_descriptor.c ****         .Class                  = AUDIO_CSCP_AudioClass,
 690:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = AUDIO_CSCP_ControlSubclass,
 691:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = AUDIO_CSCP_ControlProtocol,
 692:tmk_core/protocol/usb_descriptor.c ****         .IADStrIndex            = NO_DESCRIPTOR,
 693:tmk_core/protocol/usb_descriptor.c ****     },
 694:tmk_core/protocol/usb_descriptor.c ****     .Audio_ControlInterface = {
 695:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 696:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 697:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 698:tmk_core/protocol/usb_descriptor.c ****         },
 699:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = AC_INTERFACE,
 700:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0,
 701:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 0,
 702:tmk_core/protocol/usb_descriptor.c ****         .Class                  = AUDIO_CSCP_AudioClass,
 703:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = AUDIO_CSCP_ControlSubclass,
 704:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = AUDIO_CSCP_ControlProtocol,
 705:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 706:tmk_core/protocol/usb_descriptor.c ****     },
 707:tmk_core/protocol/usb_descriptor.c ****     .Audio_ControlInterface_SPC = {
 708:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 709:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Audio_Descriptor_Interface_AC_t),
 710:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 711:tmk_core/protocol/usb_descriptor.c ****         },
 712:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_Header,
 713:tmk_core/protocol/usb_descriptor.c ****         .ACSpecification        = VERSION_BCD(1, 0, 0),
 714:tmk_core/protocol/usb_descriptor.c ****         .TotalLength            = sizeof(USB_Audio_Descriptor_Interface_AC_t),
 715:tmk_core/protocol/usb_descriptor.c ****         .InCollection           = 1,
 716:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = AS_INTERFACE,
 717:tmk_core/protocol/usb_descriptor.c ****     },
 718:tmk_core/protocol/usb_descriptor.c ****     .Audio_StreamInterface = {
 719:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 720:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 721:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 722:tmk_core/protocol/usb_descriptor.c ****         },
 723:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = AS_INTERFACE,
 724:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0,
 725:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 2,
 726:tmk_core/protocol/usb_descriptor.c ****         .Class                  = AUDIO_CSCP_AudioClass,
 727:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = AUDIO_CSCP_MIDIStreamingSubclass,
 728:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = AUDIO_CSCP_StreamingProtocol,
 729:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 730:tmk_core/protocol/usb_descriptor.c ****     },
 731:tmk_core/protocol/usb_descriptor.c ****     .Audio_StreamInterface_SPC = {
 732:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 733:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_AudioInterface_AS_t),
 734:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 735:tmk_core/protocol/usb_descriptor.c ****         },
 736:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_General,
 737:tmk_core/protocol/usb_descriptor.c ****         .AudioSpecification     = VERSION_BCD(1, 0, 0),
 738:tmk_core/protocol/usb_descriptor.c ****         .TotalLength            = offsetof(USB_Descriptor_Configuration_t, MIDI_Out_Jack_Endpoint_S
 739:tmk_core/protocol/usb_descriptor.c ****     },
 740:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Emb = {
 741:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 742:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_InputJack_t),
 743:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 744:tmk_core/protocol/usb_descriptor.c ****         },
 745:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_InputTerminal,
 746:tmk_core/protocol/usb_descriptor.c ****         .JackType               = MIDI_JACKTYPE_Embedded,
 747:tmk_core/protocol/usb_descriptor.c ****         .JackID = 0x01,
 748:tmk_core/protocol/usb_descriptor.c ****         .JackStrIndex           = NO_DESCRIPTOR
 749:tmk_core/protocol/usb_descriptor.c ****     },
 750:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Ext = {
 751:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 752:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_InputJack_t),
 753:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 754:tmk_core/protocol/usb_descriptor.c ****         },
 755:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_InputTerminal,
 756:tmk_core/protocol/usb_descriptor.c ****         .JackType               = MIDI_JACKTYPE_External,
 757:tmk_core/protocol/usb_descriptor.c ****         .JackID                 = 0x02,
 758:tmk_core/protocol/usb_descriptor.c ****         .JackStrIndex           = NO_DESCRIPTOR
 759:tmk_core/protocol/usb_descriptor.c ****     },
 760:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Emb = {
 761:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 762:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_OutputJack_t),
 763:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 764:tmk_core/protocol/usb_descriptor.c ****         },
 765:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_OutputTerminal,
 766:tmk_core/protocol/usb_descriptor.c ****         .JackType               = MIDI_JACKTYPE_Embedded,
 767:tmk_core/protocol/usb_descriptor.c ****         .JackID                 = 0x03,
 768:tmk_core/protocol/usb_descriptor.c ****         .NumberOfPins           = 1,
 769:tmk_core/protocol/usb_descriptor.c ****         .SourceJackID           = {0x02},
 770:tmk_core/protocol/usb_descriptor.c ****         .SourcePinID            = {0x01},
 771:tmk_core/protocol/usb_descriptor.c ****         .JackStrIndex           = NO_DESCRIPTOR
 772:tmk_core/protocol/usb_descriptor.c ****     },
 773:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Ext = {
 774:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 775:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_OutputJack_t),
 776:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 777:tmk_core/protocol/usb_descriptor.c ****         },
 778:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_OutputTerminal,
 779:tmk_core/protocol/usb_descriptor.c ****         .JackType               = MIDI_JACKTYPE_External,
 780:tmk_core/protocol/usb_descriptor.c ****         .JackID                 = 0x04,
 781:tmk_core/protocol/usb_descriptor.c ****         .NumberOfPins           = 1,
 782:tmk_core/protocol/usb_descriptor.c ****         .SourceJackID           = {0x01},
 783:tmk_core/protocol/usb_descriptor.c ****         .SourcePinID            = {0x01},
 784:tmk_core/protocol/usb_descriptor.c ****         .JackStrIndex           = NO_DESCRIPTOR
 785:tmk_core/protocol/usb_descriptor.c ****     },
 786:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Endpoint = {
 787:tmk_core/protocol/usb_descriptor.c ****         .Endpoint = {
 788:tmk_core/protocol/usb_descriptor.c ****             .Header = {
 789:tmk_core/protocol/usb_descriptor.c ****                 .Size           = sizeof(USB_Audio_Descriptor_StreamEndpoint_Std_t),
 790:tmk_core/protocol/usb_descriptor.c ****                 .Type           = DTYPE_Endpoint
 791:tmk_core/protocol/usb_descriptor.c ****             },
 792:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress    = (ENDPOINT_DIR_OUT | MIDI_STREAM_OUT_EPNUM),
 793:tmk_core/protocol/usb_descriptor.c ****             .Attributes         = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 794:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize       = MIDI_STREAM_EPSIZE,
 795:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS  = 0x05
 796:tmk_core/protocol/usb_descriptor.c ****         },
 797:tmk_core/protocol/usb_descriptor.c ****         .Refresh                = 0,
 798:tmk_core/protocol/usb_descriptor.c ****         .SyncEndpointNumber     = 0
 799:tmk_core/protocol/usb_descriptor.c ****     },
 800:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Endpoint_SPC = {
 801:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 802:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_Jack_Endpoint_t),
 803:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSEndpoint
 804:tmk_core/protocol/usb_descriptor.c ****         },
 805:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSEndpoint_General,
 806:tmk_core/protocol/usb_descriptor.c ****         .TotalEmbeddedJacks     = 0x01,
 807:tmk_core/protocol/usb_descriptor.c ****         .AssociatedJackID       = {0x01}
 808:tmk_core/protocol/usb_descriptor.c ****     },
 809:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Endpoint = {
 810:tmk_core/protocol/usb_descriptor.c ****         .Endpoint = {
 811:tmk_core/protocol/usb_descriptor.c ****             .Header = {
 812:tmk_core/protocol/usb_descriptor.c ****                 .Size           = sizeof(USB_Audio_Descriptor_StreamEndpoint_Std_t),
 813:tmk_core/protocol/usb_descriptor.c ****                 .Type           = DTYPE_Endpoint
 814:tmk_core/protocol/usb_descriptor.c ****             },
 815:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress    = (ENDPOINT_DIR_IN | MIDI_STREAM_IN_EPNUM),
 816:tmk_core/protocol/usb_descriptor.c ****             .Attributes         = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 817:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize       = MIDI_STREAM_EPSIZE,
 818:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS  = 0x05
 819:tmk_core/protocol/usb_descriptor.c ****         },
 820:tmk_core/protocol/usb_descriptor.c ****         .Refresh                = 0,
 821:tmk_core/protocol/usb_descriptor.c ****         .SyncEndpointNumber     = 0
 822:tmk_core/protocol/usb_descriptor.c ****     },
 823:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Endpoint_SPC = {
 824:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 825:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_Jack_Endpoint_t),
 826:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSEndpoint
 827:tmk_core/protocol/usb_descriptor.c ****         },
 828:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSEndpoint_General,
 829:tmk_core/protocol/usb_descriptor.c ****         .TotalEmbeddedJacks     = 0x01,
 830:tmk_core/protocol/usb_descriptor.c ****         .AssociatedJackID       = {0x03}
 831:tmk_core/protocol/usb_descriptor.c ****     },
 832:tmk_core/protocol/usb_descriptor.c **** #endif
 833:tmk_core/protocol/usb_descriptor.c **** 
 834:tmk_core/protocol/usb_descriptor.c **** #ifdef VIRTSER_ENABLE
 835:tmk_core/protocol/usb_descriptor.c ****     /*
 836:tmk_core/protocol/usb_descriptor.c ****      * Virtual Serial
 837:tmk_core/protocol/usb_descriptor.c ****      */
 838:tmk_core/protocol/usb_descriptor.c ****     .CDC_Interface_Association = {
 839:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 840:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_Association_t),
 841:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_InterfaceAssociation
 842:tmk_core/protocol/usb_descriptor.c ****         },
 843:tmk_core/protocol/usb_descriptor.c ****         .FirstInterfaceIndex    = CCI_INTERFACE,
 844:tmk_core/protocol/usb_descriptor.c ****         .TotalInterfaces        = 2,
 845:tmk_core/protocol/usb_descriptor.c ****         .Class                  = CDC_CSCP_CDCClass,
 846:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = CDC_CSCP_ACMSubclass,
 847:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = CDC_CSCP_ATCommandProtocol,
 848:tmk_core/protocol/usb_descriptor.c ****         .IADStrIndex            = NO_DESCRIPTOR,
 849:tmk_core/protocol/usb_descriptor.c ****     },
 850:tmk_core/protocol/usb_descriptor.c ****     .CDC_CCI_Interface = {
 851:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 852:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 853:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 854:tmk_core/protocol/usb_descriptor.c ****         },
 855:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = CCI_INTERFACE,
 856:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0,
 857:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 1,
 858:tmk_core/protocol/usb_descriptor.c ****         .Class                  = CDC_CSCP_CDCClass,
 859:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = CDC_CSCP_ACMSubclass,
 860:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = CDC_CSCP_ATCommandProtocol,
 861:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 862:tmk_core/protocol/usb_descriptor.c ****     },
 863:tmk_core/protocol/usb_descriptor.c ****     .CDC_Functional_Header = {
 864:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 865:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_CDC_Descriptor_FunctionalHeader_t),
 866:tmk_core/protocol/usb_descriptor.c ****             .Type               = CDC_DTYPE_CSInterface
 867:tmk_core/protocol/usb_descriptor.c ****         },
 868:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = 0x00,
 869:tmk_core/protocol/usb_descriptor.c ****         .CDCSpecification       = VERSION_BCD(1, 1, 0),
 870:tmk_core/protocol/usb_descriptor.c ****     },
 871:tmk_core/protocol/usb_descriptor.c ****     .CDC_Functional_ACM = {
 872:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 873:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_CDC_Descriptor_FunctionalACM_t),
 874:tmk_core/protocol/usb_descriptor.c ****             .Type               = CDC_DTYPE_CSInterface
 875:tmk_core/protocol/usb_descriptor.c ****         },
 876:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = 0x02,
 877:tmk_core/protocol/usb_descriptor.c ****         .Capabilities           = 0x02,
 878:tmk_core/protocol/usb_descriptor.c ****     },
 879:tmk_core/protocol/usb_descriptor.c ****     .CDC_Functional_Union = {
 880:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 881:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_CDC_Descriptor_FunctionalUnion_t),
 882:tmk_core/protocol/usb_descriptor.c ****             .Type               = CDC_DTYPE_CSInterface
 883:tmk_core/protocol/usb_descriptor.c ****         },
 884:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = 0x06,
 885:tmk_core/protocol/usb_descriptor.c ****         .MasterInterfaceNumber  = CCI_INTERFACE,
 886:tmk_core/protocol/usb_descriptor.c ****         .SlaveInterfaceNumber   = CDI_INTERFACE,
 887:tmk_core/protocol/usb_descriptor.c ****     },
 888:tmk_core/protocol/usb_descriptor.c ****     .CDC_NotificationEndpoint = {
 889:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 890:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 891:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 892:tmk_core/protocol/usb_descriptor.c ****         },
 893:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM),
 894:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 895:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CDC_NOTIFICATION_EPSIZE,
 896:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0xFF
 897:tmk_core/protocol/usb_descriptor.c ****     },
 898:tmk_core/protocol/usb_descriptor.c ****     .CDC_DCI_Interface = {
 899:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 900:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 901:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 902:tmk_core/protocol/usb_descriptor.c ****         },
 903:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = CDI_INTERFACE,
 904:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0,
 905:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 2,
 906:tmk_core/protocol/usb_descriptor.c ****         .Class                  = CDC_CSCP_CDCDataClass,
 907:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = CDC_CSCP_NoDataSubclass,
 908:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = CDC_CSCP_NoDataProtocol,
 909:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 910:tmk_core/protocol/usb_descriptor.c ****     },
 911:tmk_core/protocol/usb_descriptor.c ****     .CDC_DataOutEndpoint = {
 912:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 913:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 914:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 915:tmk_core/protocol/usb_descriptor.c ****         },
 916:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_OUT | CDC_OUT_EPNUM),
 917:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 918:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CDC_EPSIZE,
 919:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x05
 920:tmk_core/protocol/usb_descriptor.c ****     },
 921:tmk_core/protocol/usb_descriptor.c ****     .CDC_DataInEndpoint = {
 922:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 923:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 924:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 925:tmk_core/protocol/usb_descriptor.c ****         },
 926:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | CDC_IN_EPNUM),
 927:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 928:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CDC_EPSIZE,
 929:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x05
 930:tmk_core/protocol/usb_descriptor.c ****     },
 931:tmk_core/protocol/usb_descriptor.c **** #endif
 932:tmk_core/protocol/usb_descriptor.c **** 
 933:tmk_core/protocol/usb_descriptor.c ****     /*
 934:tmk_core/protocol/usb_descriptor.c ****      * Joystick
 935:tmk_core/protocol/usb_descriptor.c ****      */
 936:tmk_core/protocol/usb_descriptor.c **** #ifdef JOYSTICK_ENABLE
 937:tmk_core/protocol/usb_descriptor.c ****     .Joystick_Interface = {
 938:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 939:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 940:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 941:tmk_core/protocol/usb_descriptor.c ****         },
 942:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = JOYSTICK_INTERFACE,
 943:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 944:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 1,
 945:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 946:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_NonBootSubclass,
 947:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_NonBootProtocol,
 948:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 949:tmk_core/protocol/usb_descriptor.c ****     },
 950:tmk_core/protocol/usb_descriptor.c ****     .Joystick_HID = {
 951:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 952:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 953:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 954:tmk_core/protocol/usb_descriptor.c ****         },
 955:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 956:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 957:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 958:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 959:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(JoystickReport)
 960:tmk_core/protocol/usb_descriptor.c ****     },
 961:tmk_core/protocol/usb_descriptor.c ****     .Joystick_INEndpoint = {
 962:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 963:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 964:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 965:tmk_core/protocol/usb_descriptor.c ****         },
 966:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | JOYSTICK_IN_EPNUM),
 967:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 968:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = JOYSTICK_EPSIZE,
 969:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = USB_POLLING_INTERVAL_MS
 970:tmk_core/protocol/usb_descriptor.c ****     }
 971:tmk_core/protocol/usb_descriptor.c **** #endif
 972:tmk_core/protocol/usb_descriptor.c **** 
 973:tmk_core/protocol/usb_descriptor.c **** #if defined(DIGITIZER_ENABLE) && !defined(DIGITIZER_SHARED_EP)
 974:tmk_core/protocol/usb_descriptor.c ****     /*
 975:tmk_core/protocol/usb_descriptor.c ****      * Digitizer
 976:tmk_core/protocol/usb_descriptor.c ****      */
 977:tmk_core/protocol/usb_descriptor.c ****     .Digitizer_Interface  = {
 978:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 979:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 980:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 981:tmk_core/protocol/usb_descriptor.c ****         },
 982:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = DIGITIZER_INTERFACE,
 983:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 984:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 1,
 985:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 986:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_NonBootSubclass,
 987:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_NonBootProtocol,
 988:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 989:tmk_core/protocol/usb_descriptor.c ****     },
 990:tmk_core/protocol/usb_descriptor.c ****     .Digitizer_HID = {
 991:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 992:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 993:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 994:tmk_core/protocol/usb_descriptor.c ****         },
 995:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 996:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 997:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 998:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 999:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(DigitizerReport)
1000:tmk_core/protocol/usb_descriptor.c ****     },
1001:tmk_core/protocol/usb_descriptor.c ****     .Digitizer_INEndpoint = {
1002:tmk_core/protocol/usb_descriptor.c ****         .Header = {
1003:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
1004:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
1005:tmk_core/protocol/usb_descriptor.c ****         },
1006:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | DIGITIZER_IN_EPNUM),
1007:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
1008:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = DIGITIZER_EPSIZE,
1009:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = USB_POLLING_INTERVAL_MS
1010:tmk_core/protocol/usb_descriptor.c ****     },
1011:tmk_core/protocol/usb_descriptor.c **** #endif
1012:tmk_core/protocol/usb_descriptor.c **** };
1013:tmk_core/protocol/usb_descriptor.c **** 
1014:tmk_core/protocol/usb_descriptor.c **** /*
1015:tmk_core/protocol/usb_descriptor.c ****  * String descriptors
1016:tmk_core/protocol/usb_descriptor.c ****  */
1017:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM LanguageString = {
1018:tmk_core/protocol/usb_descriptor.c ****     .Header = {
1019:tmk_core/protocol/usb_descriptor.c ****         .Size                   = USB_STRING_LEN(1),
1020:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_String
1021:tmk_core/protocol/usb_descriptor.c ****     },
1022:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString              = {LANGUAGE_ID_ENG}
1023:tmk_core/protocol/usb_descriptor.c **** };
1024:tmk_core/protocol/usb_descriptor.c **** 
1025:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString = {
1026:tmk_core/protocol/usb_descriptor.c ****     .Header = {
1027:tmk_core/protocol/usb_descriptor.c ****         .Size                   = USB_STRING_LEN(sizeof(STR(MANUFACTURER)) - 1), // Subtract 1 for 
1028:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_String
1029:tmk_core/protocol/usb_descriptor.c ****     },
1030:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString              = LSTR(MANUFACTURER)
1031:tmk_core/protocol/usb_descriptor.c **** };
1032:tmk_core/protocol/usb_descriptor.c **** 
1033:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM ProductString = {
1034:tmk_core/protocol/usb_descriptor.c ****     .Header = {
1035:tmk_core/protocol/usb_descriptor.c ****         .Size                   = USB_STRING_LEN(sizeof(STR(PRODUCT)) - 1), // Subtract 1 for null 
1036:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_String
1037:tmk_core/protocol/usb_descriptor.c ****     },
1038:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString              = LSTR(PRODUCT)
1039:tmk_core/protocol/usb_descriptor.c **** };
1040:tmk_core/protocol/usb_descriptor.c **** 
1041:tmk_core/protocol/usb_descriptor.c **** #if defined(SERIAL_NUMBER)
1042:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM SerialNumberString = {
1043:tmk_core/protocol/usb_descriptor.c ****     .Header = {
1044:tmk_core/protocol/usb_descriptor.c ****         .Size                   = USB_STRING_LEN(sizeof(SERIAL_NUMBER) - 1), // Subtract 1 for null
1045:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_String
1046:tmk_core/protocol/usb_descriptor.c ****     },
1047:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString              = USBSTR(SERIAL_NUMBER)
1048:tmk_core/protocol/usb_descriptor.c **** };
1049:tmk_core/protocol/usb_descriptor.c **** #endif
1050:tmk_core/protocol/usb_descriptor.c **** 
1051:tmk_core/protocol/usb_descriptor.c **** // clang-format on
1052:tmk_core/protocol/usb_descriptor.c **** 
1053:tmk_core/protocol/usb_descriptor.c **** /**
1054:tmk_core/protocol/usb_descriptor.c ****  * This function is called by the library when in device mode, and must be overridden (see library 
1055:tmk_core/protocol/usb_descriptor.c ****  * documentation) by the application code so that the address and size of a requested descriptor ca
1056:tmk_core/protocol/usb_descriptor.c ****  * to the USB library. When the device receives a Get Descriptor request on the control endpoint, t
1057:tmk_core/protocol/usb_descriptor.c ****  * is called so that the descriptor details can be passed back and the appropriate descriptor sent 
1058:tmk_core/protocol/usb_descriptor.c ****  * USB host.
1059:tmk_core/protocol/usb_descriptor.c ****  */
1060:tmk_core/protocol/usb_descriptor.c **** uint16_t get_usb_descriptor(const uint16_t wValue, const uint16_t wIndex, const void** const Descri
  17               		.loc 1 1060 113 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
1061:tmk_core/protocol/usb_descriptor.c ****     const uint8_t DescriptorType  = (wValue >> 8);
  23               		.loc 1 1061 5 view .LVU1
  24               		.loc 1 1061 45 is_stmt 0 view .LVU2
  25 0000 292F      		mov r18,r25
  26 0002 3327      		clr r19
  27               	.LVL1:
1062:tmk_core/protocol/usb_descriptor.c ****     const uint8_t DescriptorIndex = (wValue & 0xFF);
  28               		.loc 1 1062 5 is_stmt 1 view .LVU3
1063:tmk_core/protocol/usb_descriptor.c ****     const void*   Address         = NULL;
  29               		.loc 1 1063 5 view .LVU4
1064:tmk_core/protocol/usb_descriptor.c ****     uint16_t      Size            = NO_DESCRIPTOR;
  30               		.loc 1 1064 5 view .LVU5
1065:tmk_core/protocol/usb_descriptor.c **** 
1066:tmk_core/protocol/usb_descriptor.c ****     switch (DescriptorType) {
  31               		.loc 1 1066 5 view .LVU6
  32 0004 2330      		cpi r18,3
  33 0006 3105      		cpc r19,__zero_reg__
  34 0008 01F0      		breq .L2
  35 000a 00F4      		brsh .L3
  36 000c 2130      		cpi r18,1
  37 000e 3105      		cpc r19,__zero_reg__
  38 0010 01F4      		brne .+2
  39 0012 00C0      		rjmp .L10
  40 0014 2230      		cpi r18,2
  41 0016 3105      		cpc r19,__zero_reg__
  42 0018 01F4      		brne .+2
  43 001a 00C0      		rjmp .L11
  44               	.LVL2:
  45               	.L16:
1064:tmk_core/protocol/usb_descriptor.c ****     uint16_t      Size            = NO_DESCRIPTOR;
  46               		.loc 1 1064 19 is_stmt 0 view .LVU7
  47 001c 90E0      		ldi r25,0
  48 001e 80E0      		ldi r24,0
1063:tmk_core/protocol/usb_descriptor.c ****     uint16_t      Size            = NO_DESCRIPTOR;
  49               		.loc 1 1063 19 view .LVU8
  50 0020 30E0      		ldi r19,0
  51 0022 20E0      		ldi r18,0
  52 0024 00C0      		rjmp .L4
  53               	.LVL3:
  54               	.L3:
  55               		.loc 1 1066 5 view .LVU9
  56 0026 2132      		cpi r18,33
  57 0028 3105      		cpc r19,__zero_reg__
  58 002a 01F0      		breq .L5
  59 002c 2232      		cpi r18,34
  60 002e 3105      		cpc r19,__zero_reg__
  61 0030 01F4      		brne .L16
1067:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Device:
1068:tmk_core/protocol/usb_descriptor.c ****             Address = &DeviceDescriptor;
1069:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
1070:tmk_core/protocol/usb_descriptor.c **** 
1071:tmk_core/protocol/usb_descriptor.c ****             break;
1072:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Configuration:
1073:tmk_core/protocol/usb_descriptor.c ****             Address = &ConfigurationDescriptor;
1074:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
1075:tmk_core/protocol/usb_descriptor.c **** 
1076:tmk_core/protocol/usb_descriptor.c ****             break;
1077:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_String:
1078:tmk_core/protocol/usb_descriptor.c ****             switch (DescriptorIndex) {
1079:tmk_core/protocol/usb_descriptor.c ****                 case 0x00:
1080:tmk_core/protocol/usb_descriptor.c ****                     Address = &LanguageString;
1081:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&LanguageString.Header.Size);
1082:tmk_core/protocol/usb_descriptor.c **** 
1083:tmk_core/protocol/usb_descriptor.c ****                     break;
1084:tmk_core/protocol/usb_descriptor.c ****                 case 0x01:
1085:tmk_core/protocol/usb_descriptor.c ****                     Address = &ManufacturerString;
1086:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ManufacturerString.Header.Size);
1087:tmk_core/protocol/usb_descriptor.c **** 
1088:tmk_core/protocol/usb_descriptor.c ****                     break;
1089:tmk_core/protocol/usb_descriptor.c ****                 case 0x02:
1090:tmk_core/protocol/usb_descriptor.c ****                     Address = &ProductString;
1091:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ProductString.Header.Size);
1092:tmk_core/protocol/usb_descriptor.c **** 
1093:tmk_core/protocol/usb_descriptor.c ****                     break;
1094:tmk_core/protocol/usb_descriptor.c **** #if defined(SERIAL_NUMBER)
1095:tmk_core/protocol/usb_descriptor.c ****                 case 0x03:
1096:tmk_core/protocol/usb_descriptor.c ****                     Address = &SerialNumberString;
1097:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&SerialNumberString.Header.Size);
1098:tmk_core/protocol/usb_descriptor.c **** 
1099:tmk_core/protocol/usb_descriptor.c ****                     break;
1100:tmk_core/protocol/usb_descriptor.c **** #endif
1101:tmk_core/protocol/usb_descriptor.c ****             }
1102:tmk_core/protocol/usb_descriptor.c **** 
1103:tmk_core/protocol/usb_descriptor.c ****             break;
1104:tmk_core/protocol/usb_descriptor.c ****         case HID_DTYPE_HID:
1105:tmk_core/protocol/usb_descriptor.c ****             switch (wIndex) {
1106:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
1107:tmk_core/protocol/usb_descriptor.c ****                 case KEYBOARD_INTERFACE:
1108:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Keyboard_HID;
1109:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
1110:tmk_core/protocol/usb_descriptor.c ****                     break;
1111:tmk_core/protocol/usb_descriptor.c **** #endif
1112:tmk_core/protocol/usb_descriptor.c **** 
1113:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
1114:tmk_core/protocol/usb_descriptor.c ****                 case MOUSE_INTERFACE:
1115:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Mouse_HID;
1116:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
1117:tmk_core/protocol/usb_descriptor.c **** 
1118:tmk_core/protocol/usb_descriptor.c ****                     break;
1119:tmk_core/protocol/usb_descriptor.c **** #endif
1120:tmk_core/protocol/usb_descriptor.c **** 
1121:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
1122:tmk_core/protocol/usb_descriptor.c ****                 case SHARED_INTERFACE:
1123:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Shared_HID;
1124:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
1125:tmk_core/protocol/usb_descriptor.c **** 
1126:tmk_core/protocol/usb_descriptor.c ****                     break;
1127:tmk_core/protocol/usb_descriptor.c **** #endif
1128:tmk_core/protocol/usb_descriptor.c **** 
1129:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
1130:tmk_core/protocol/usb_descriptor.c ****                 case RAW_INTERFACE:
1131:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Raw_HID;
1132:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
1133:tmk_core/protocol/usb_descriptor.c **** 
1134:tmk_core/protocol/usb_descriptor.c ****                     break;
1135:tmk_core/protocol/usb_descriptor.c **** #endif
1136:tmk_core/protocol/usb_descriptor.c **** 
1137:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
1138:tmk_core/protocol/usb_descriptor.c ****                 case CONSOLE_INTERFACE:
1139:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Console_HID;
1140:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
1141:tmk_core/protocol/usb_descriptor.c **** 
1142:tmk_core/protocol/usb_descriptor.c ****                     break;
1143:tmk_core/protocol/usb_descriptor.c **** #endif
1144:tmk_core/protocol/usb_descriptor.c **** #ifdef JOYSTICK_ENABLE
1145:tmk_core/protocol/usb_descriptor.c ****                 case JOYSTICK_INTERFACE:
1146:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Joystick_HID;
1147:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
1148:tmk_core/protocol/usb_descriptor.c ****                     break;
1149:tmk_core/protocol/usb_descriptor.c **** #endif
1150:tmk_core/protocol/usb_descriptor.c **** #if defined(DIGITIZER_ENABLE) && !defined(DIGITIZER_SHARED_EP)
1151:tmk_core/protocol/usb_descriptor.c ****                 case DIGITIZER_INTERFACE:
1152:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Digitizer_HID;
1153:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
1154:tmk_core/protocol/usb_descriptor.c **** 
1155:tmk_core/protocol/usb_descriptor.c ****                     break;
1156:tmk_core/protocol/usb_descriptor.c **** #endif
1157:tmk_core/protocol/usb_descriptor.c ****             }
1158:tmk_core/protocol/usb_descriptor.c **** 
1159:tmk_core/protocol/usb_descriptor.c ****             break;
1160:tmk_core/protocol/usb_descriptor.c ****         case HID_DTYPE_Report:
1161:tmk_core/protocol/usb_descriptor.c ****             switch (wIndex) {
  62               		.loc 1 1161 13 is_stmt 1 view .LVU10
1162:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
1163:tmk_core/protocol/usb_descriptor.c ****                 case KEYBOARD_INTERFACE:
1164:tmk_core/protocol/usb_descriptor.c ****                     Address = &KeyboardReport;
1165:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(KeyboardReport);
  63               		.loc 1 1165 29 is_stmt 0 view .LVU11
  64 0032 80E4      		ldi r24,lo8(64)
  65 0034 90E0      		ldi r25,0
  66               	.LVL4:
1164:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(KeyboardReport);
  67               		.loc 1 1164 29 view .LVU12
  68 0036 20E0      		ldi r18,lo8(KeyboardReport)
  69 0038 30E0      		ldi r19,hi8(KeyboardReport)
  70               	.LVL5:
1164:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(KeyboardReport);
  71               		.loc 1 1164 29 view .LVU13
  72 003a 6115      		cp r22,__zero_reg__
  73 003c 7105      		cpc r23,__zero_reg__
  74 003e 01F0      		breq .L4
1166:tmk_core/protocol/usb_descriptor.c **** 
1167:tmk_core/protocol/usb_descriptor.c ****                     break;
1168:tmk_core/protocol/usb_descriptor.c **** #endif
1169:tmk_core/protocol/usb_descriptor.c **** 
1170:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
1171:tmk_core/protocol/usb_descriptor.c ****                 case MOUSE_INTERFACE:
1172:tmk_core/protocol/usb_descriptor.c ****                     Address = &MouseReport;
1173:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(MouseReport);
1174:tmk_core/protocol/usb_descriptor.c **** 
1175:tmk_core/protocol/usb_descriptor.c ****                     break;
1176:tmk_core/protocol/usb_descriptor.c **** #endif
1177:tmk_core/protocol/usb_descriptor.c **** 
1178:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
1179:tmk_core/protocol/usb_descriptor.c ****                 case SHARED_INTERFACE:
1180:tmk_core/protocol/usb_descriptor.c ****                     Address = &SharedReport;
1181:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(SharedReport);
  75               		.loc 1 1181 29 view .LVU14
  76 0040 82E3      		ldi r24,lo8(50)
  77 0042 90E0      		ldi r25,0
1180:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(SharedReport);
  78               		.loc 1 1180 29 view .LVU15
  79 0044 20E0      		ldi r18,lo8(SharedReport)
  80 0046 30E0      		ldi r19,hi8(SharedReport)
  81 0048 6130      		cpi r22,1
  82 004a 7105      		cpc r23,__zero_reg__
  83 004c 01F0      		breq .L4
  84 004e 00C0      		rjmp .L16
  85               	.LVL6:
  86               	.L2:
1078:tmk_core/protocol/usb_descriptor.c ****                 case 0x00:
  87               		.loc 1 1078 13 is_stmt 1 view .LVU16
  88 0050 9927      		clr r25
  89               	.LVL7:
1078:tmk_core/protocol/usb_descriptor.c ****                 case 0x00:
  90               		.loc 1 1078 13 is_stmt 0 view .LVU17
  91 0052 8130      		cpi r24,1
  92 0054 9105      		cpc r25,__zero_reg__
  93 0056 01F0      		breq .L7
  94 0058 0097      		sbiw r24,0
  95 005a 01F0      		breq .L8
  96 005c 0297      		sbiw r24,2
  97 005e 01F4      		brne .L16
1090:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ProductString.Header.Size);
  98               		.loc 1 1090 21 is_stmt 1 view .LVU18
  99               	.LVL8:
1091:tmk_core/protocol/usb_descriptor.c **** 
 100               		.loc 1 1091 21 view .LVU19
 101               	.LBB2:
1091:tmk_core/protocol/usb_descriptor.c **** 
 102               		.loc 1 1091 31 view .LVU20
1091:tmk_core/protocol/usb_descriptor.c **** 
 103               		.loc 1 1091 31 view .LVU21
1091:tmk_core/protocol/usb_descriptor.c **** 
 104               		.loc 1 1091 31 view .LVU22
 105 0060 E0E0      		ldi r30,lo8(ProductString)
 106 0062 F0E0      		ldi r31,hi8(ProductString)
 107 0064 00C0      		rjmp .L17
 108               	.LVL9:
 109               	.L8:
1091:tmk_core/protocol/usb_descriptor.c **** 
 110               		.loc 1 1091 31 is_stmt 0 view .LVU23
 111               	.LBE2:
1080:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&LanguageString.Header.Size);
 112               		.loc 1 1080 21 is_stmt 1 view .LVU24
1081:tmk_core/protocol/usb_descriptor.c **** 
 113               		.loc 1 1081 21 view .LVU25
 114               	.LBB3:
1081:tmk_core/protocol/usb_descriptor.c **** 
 115               		.loc 1 1081 31 view .LVU26
1081:tmk_core/protocol/usb_descriptor.c **** 
 116               		.loc 1 1081 31 view .LVU27
1081:tmk_core/protocol/usb_descriptor.c **** 
 117               		.loc 1 1081 31 view .LVU28
 118 0066 E0E0      		ldi r30,lo8(LanguageString)
 119 0068 F0E0      		ldi r31,hi8(LanguageString)
 120               	.LVL10:
 121               	.L17:
1081:tmk_core/protocol/usb_descriptor.c **** 
 122               		.loc 1 1081 31 is_stmt 0 view .LVU29
 123               	.LBE3:
 124               	.LBB4:
1091:tmk_core/protocol/usb_descriptor.c **** 
 125               		.loc 1 1091 31 view .LVU30
 126               	/* #APP */
 127               	 ;  1091 "tmk_core/protocol/usb_descriptor.c" 1
 128 006a 8491      		lpm r24, Z
 129               		
 130               	 ;  0 "" 2
 131               	.LVL11:
1091:tmk_core/protocol/usb_descriptor.c **** 
 132               		.loc 1 1091 31 is_stmt 1 view .LVU31
 133               	/* #NOAPP */
 134               	.LBE4:
1091:tmk_core/protocol/usb_descriptor.c **** 
 135               		.loc 1 1091 29 is_stmt 0 view .LVU32
 136 006c 90E0      		ldi r25,0
 137               	.LVL12:
1093:tmk_core/protocol/usb_descriptor.c **** #if defined(SERIAL_NUMBER)
 138               		.loc 1 1093 21 is_stmt 1 view .LVU33
1090:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ProductString.Header.Size);
 139               		.loc 1 1090 29 is_stmt 0 view .LVU34
 140 006e 9F01      		movw r18,r30
 141               	.LVL13:
 142               	.L4:
1182:tmk_core/protocol/usb_descriptor.c **** 
1183:tmk_core/protocol/usb_descriptor.c ****                     break;
1184:tmk_core/protocol/usb_descriptor.c **** #endif
1185:tmk_core/protocol/usb_descriptor.c **** 
1186:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
1187:tmk_core/protocol/usb_descriptor.c ****                 case RAW_INTERFACE:
1188:tmk_core/protocol/usb_descriptor.c ****                     Address = &RawReport;
1189:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(RawReport);
1190:tmk_core/protocol/usb_descriptor.c **** 
1191:tmk_core/protocol/usb_descriptor.c ****                     break;
1192:tmk_core/protocol/usb_descriptor.c **** #endif
1193:tmk_core/protocol/usb_descriptor.c **** 
1194:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
1195:tmk_core/protocol/usb_descriptor.c ****                 case CONSOLE_INTERFACE:
1196:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConsoleReport;
1197:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(ConsoleReport);
1198:tmk_core/protocol/usb_descriptor.c **** 
1199:tmk_core/protocol/usb_descriptor.c ****                     break;
1200:tmk_core/protocol/usb_descriptor.c **** #endif
1201:tmk_core/protocol/usb_descriptor.c **** #ifdef JOYSTICK_ENABLE
1202:tmk_core/protocol/usb_descriptor.c ****                 case JOYSTICK_INTERFACE:
1203:tmk_core/protocol/usb_descriptor.c ****                     Address = &JoystickReport;
1204:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(JoystickReport);
1205:tmk_core/protocol/usb_descriptor.c ****                     break;
1206:tmk_core/protocol/usb_descriptor.c **** #endif
1207:tmk_core/protocol/usb_descriptor.c **** #if defined(DIGITIZER_ENABLE) && !defined(DIGITIZER_SHARED_EP)
1208:tmk_core/protocol/usb_descriptor.c ****                 case DIGITIZER_INTERFACE:
1209:tmk_core/protocol/usb_descriptor.c ****                     Address = &DigitizerReport;
1210:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(DigitizerReport);
1211:tmk_core/protocol/usb_descriptor.c ****                     break;
1212:tmk_core/protocol/usb_descriptor.c **** #endif
1213:tmk_core/protocol/usb_descriptor.c ****             }
1214:tmk_core/protocol/usb_descriptor.c **** 
1215:tmk_core/protocol/usb_descriptor.c ****             break;
1216:tmk_core/protocol/usb_descriptor.c ****     }
1217:tmk_core/protocol/usb_descriptor.c **** 
1218:tmk_core/protocol/usb_descriptor.c ****     *DescriptorAddress = Address;
 143               		.loc 1 1218 5 is_stmt 1 view .LVU35
 144               		.loc 1 1218 24 is_stmt 0 view .LVU36
 145 0070 FA01      		movw r30,r20
 146 0072 3183      		std Z+1,r19
 147 0074 2083      		st Z,r18
1219:tmk_core/protocol/usb_descriptor.c **** 
1220:tmk_core/protocol/usb_descriptor.c ****     return Size;
 148               		.loc 1 1220 5 is_stmt 1 view .LVU37
 149               	/* epilogue start */
1221:tmk_core/protocol/usb_descriptor.c **** }
 150               		.loc 1 1221 1 is_stmt 0 view .LVU38
 151 0076 0895      		ret
 152               	.LVL14:
 153               	.L7:
1085:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 154               		.loc 1 1085 21 is_stmt 1 view .LVU39
1086:tmk_core/protocol/usb_descriptor.c **** 
 155               		.loc 1 1086 21 view .LVU40
 156               	.LBB5:
1086:tmk_core/protocol/usb_descriptor.c **** 
 157               		.loc 1 1086 31 view .LVU41
1086:tmk_core/protocol/usb_descriptor.c **** 
 158               		.loc 1 1086 31 view .LVU42
1086:tmk_core/protocol/usb_descriptor.c **** 
 159               		.loc 1 1086 31 view .LVU43
 160 0078 E0E0      		ldi r30,lo8(ManufacturerString)
 161 007a F0E0      		ldi r31,hi8(ManufacturerString)
 162 007c 00C0      		rjmp .L17
 163               	.LVL15:
 164               	.L5:
1086:tmk_core/protocol/usb_descriptor.c **** 
 165               		.loc 1 1086 31 is_stmt 0 view .LVU44
 166               	.LBE5:
1105:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 167               		.loc 1 1105 13 is_stmt 1 view .LVU45
1109:tmk_core/protocol/usb_descriptor.c ****                     break;
 168               		.loc 1 1109 29 is_stmt 0 view .LVU46
 169 007e 89E0      		ldi r24,lo8(9)
 170 0080 90E0      		ldi r25,0
 171               	.LVL16:
1108:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 172               		.loc 1 1108 29 view .LVU47
 173 0082 20E0      		ldi r18,lo8(ConfigurationDescriptor+18)
 174 0084 30E0      		ldi r19,hi8(ConfigurationDescriptor+18)
 175               	.LVL17:
1108:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 176               		.loc 1 1108 29 view .LVU48
 177 0086 6115      		cp r22,__zero_reg__
 178 0088 7105      		cpc r23,__zero_reg__
 179 008a 01F0      		breq .L4
1124:tmk_core/protocol/usb_descriptor.c **** 
 180               		.loc 1 1124 29 view .LVU49
 181 008c 89E0      		ldi r24,lo8(9)
 182 008e 90E0      		ldi r25,0
1123:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 183               		.loc 1 1123 29 view .LVU50
 184 0090 20E0      		ldi r18,lo8(ConfigurationDescriptor+43)
 185 0092 30E0      		ldi r19,hi8(ConfigurationDescriptor+43)
 186 0094 6130      		cpi r22,1
 187 0096 7105      		cpc r23,__zero_reg__
 188 0098 01F0      		breq .L4
 189 009a 00C0      		rjmp .L16
 190               	.LVL18:
 191               	.L10:
1069:tmk_core/protocol/usb_descriptor.c **** 
 192               		.loc 1 1069 21 view .LVU51
 193 009c 82E1      		ldi r24,lo8(18)
 194 009e 90E0      		ldi r25,0
 195               	.LVL19:
1068:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
 196               		.loc 1 1068 21 view .LVU52
 197 00a0 20E0      		ldi r18,lo8(DeviceDescriptor)
 198 00a2 30E0      		ldi r19,hi8(DeviceDescriptor)
 199               	.LVL20:
1068:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
 200               		.loc 1 1068 21 view .LVU53
 201 00a4 00C0      		rjmp .L4
 202               	.LVL21:
 203               	.L11:
1074:tmk_core/protocol/usb_descriptor.c **** 
 204               		.loc 1 1074 21 view .LVU54
 205 00a6 8BE3      		ldi r24,lo8(59)
 206 00a8 90E0      		ldi r25,0
 207               	.LVL22:
1073:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
 208               		.loc 1 1073 21 view .LVU55
 209 00aa 20E0      		ldi r18,lo8(ConfigurationDescriptor)
 210 00ac 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 211               	.LVL23:
1073:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
 212               		.loc 1 1073 21 view .LVU56
 213 00ae 00C0      		rjmp .L4
 214               		.cfi_endproc
 215               	.LFE102:
 217               	.global	ProductString
 218               		.section	.progmem.data.ProductString,"a"
 221               	ProductString:
 222 0000 0C        		.byte	12
 223 0001 03        		.byte	3
 224 0002 5300      		.string	"S"
 225 0004 6F00      		.string	"o"
 226 0006 6600      		.string	"f"
 227 0008 6C00      		.string	"l"
 228 000a 6500      		.string	"e"
 229 000c 00        		.string	""
 230 000d 00        		.string	""
 231               	.global	ManufacturerString
 232               		.section	.progmem.data.ManufacturerString,"a"
 235               	ManufacturerString:
 236 0000 1A        		.byte	26
 237 0001 03        		.byte	3
 238 0002 4A00      		.string	"J"
 239 0004 6F00      		.string	"o"
 240 0006 7300      		.string	"s"
 241 0008 6500      		.string	"e"
 242 000a 6600      		.string	"f"
 243 000c 4100      		.string	"A"
 244 000e 6400      		.string	"d"
 245 0010 6100      		.string	"a"
 246 0012 6D00      		.string	"m"
 247 0014 6300      		.string	"c"
 248 0016 6900      		.string	"i"
 249 0018 6B00      		.string	"k"
 250 001a 00        		.string	""
 251 001b 00        		.string	""
 252               	.global	LanguageString
 253               		.section	.progmem.data.LanguageString,"a"
 256               	LanguageString:
 257 0000 04        		.byte	4
 258 0001 03        		.byte	3
 259 0002 0904      		.word	1033
 260               	.global	ConfigurationDescriptor
 261               		.section	.progmem.data.ConfigurationDescriptor,"a"
 264               	ConfigurationDescriptor:
 265 0000 09        		.byte	9
 266 0001 02        		.byte	2
 267 0002 3B00      		.word	59
 268 0004 02        		.byte	2
 269 0005 01        		.byte	1
 270 0006 00        		.byte	0
 271 0007 A0        		.byte	-96
 272 0008 FA        		.byte	-6
 273 0009 09        		.byte	9
 274 000a 04        		.byte	4
 275 000b 00        		.byte	0
 276 000c 00        		.byte	0
 277 000d 01        		.byte	1
 278 000e 03        		.byte	3
 279 000f 01        		.byte	1
 280 0010 01        		.byte	1
 281 0011 00        		.byte	0
 282 0012 09        		.byte	9
 283 0013 21        		.byte	33
 284 0014 1101      		.word	273
 285 0016 00        		.byte	0
 286 0017 01        		.byte	1
 287 0018 22        		.byte	34
 288 0019 4000      		.word	64
 289 001b 07        		.byte	7
 290 001c 05        		.byte	5
 291 001d 81        		.byte	-127
 292 001e 03        		.byte	3
 293 001f 0800      		.word	8
 294 0021 0A        		.byte	10
 295 0022 09        		.byte	9
 296 0023 04        		.byte	4
 297 0024 01        		.byte	1
 298 0025 00        		.byte	0
 299 0026 01        		.byte	1
 300 0027 03        		.byte	3
 301 0028 00        		.byte	0
 302 0029 00        		.byte	0
 303 002a 00        		.byte	0
 304 002b 09        		.byte	9
 305 002c 21        		.byte	33
 306 002d 1101      		.word	273
 307 002f 00        		.byte	0
 308 0030 01        		.byte	1
 309 0031 22        		.byte	34
 310 0032 3200      		.word	50
 311 0034 07        		.byte	7
 312 0035 05        		.byte	5
 313 0036 82        		.byte	-126
 314 0037 03        		.byte	3
 315 0038 2000      		.word	32
 316 003a 0A        		.byte	10
 317               	.global	DeviceDescriptor
 318               		.section	.progmem.data.DeviceDescriptor,"a"
 321               	DeviceDescriptor:
 322 0000 12        		.byte	18
 323 0001 01        		.byte	1
 324 0002 0002      		.word	512
 325 0004 00        		.byte	0
 326 0005 00        		.byte	0
 327 0006 00        		.byte	0
 328 0007 08        		.byte	8
 329 0008 32FC      		.word	-974
 330 000a 8702      		.word	647
 331 000c 0100      		.word	1
 332 000e 01        		.byte	1
 333 000f 02        		.byte	2
 334 0010 00        		.byte	0
 335 0011 01        		.byte	1
 336               	.global	SharedReport
 337               		.section	.progmem.data.SharedReport,"a"
 340               	SharedReport:
 341 0000 05        		.byte	5
 342 0001 01        		.byte	1
 343 0002 09        		.byte	9
 344 0003 80        		.byte	-128
 345 0004 A1        		.byte	-95
 346 0005 01        		.byte	1
 347 0006 85        		.byte	-123
 348 0007 03        		.byte	3
 349 0008 19        		.byte	25
 350 0009 01        		.byte	1
 351 000a 2A        		.byte	42
 352 000b B7        		.byte	-73
 353 000c 00        		.byte	0
 354 000d 15        		.byte	21
 355 000e 01        		.byte	1
 356 000f 26        		.byte	38
 357 0010 B7        		.byte	-73
 358 0011 00        		.byte	0
 359 0012 95        		.byte	-107
 360 0013 01        		.byte	1
 361 0014 75        		.byte	117
 362 0015 10        		.byte	16
 363 0016 81        		.byte	-127
 364 0017 00        		.byte	0
 365 0018 C0        		.byte	-64
 366 0019 05        		.byte	5
 367 001a 0C        		.byte	12
 368 001b 09        		.byte	9
 369 001c 01        		.byte	1
 370 001d A1        		.byte	-95
 371 001e 01        		.byte	1
 372 001f 85        		.byte	-123
 373 0020 04        		.byte	4
 374 0021 19        		.byte	25
 375 0022 01        		.byte	1
 376 0023 2A        		.byte	42
 377 0024 A0        		.byte	-96
 378 0025 02        		.byte	2
 379 0026 15        		.byte	21
 380 0027 01        		.byte	1
 381 0028 26        		.byte	38
 382 0029 A0        		.byte	-96
 383 002a 02        		.byte	2
 384 002b 95        		.byte	-107
 385 002c 01        		.byte	1
 386 002d 75        		.byte	117
 387 002e 10        		.byte	16
 388 002f 81        		.byte	-127
 389 0030 00        		.byte	0
 390 0031 C0        		.byte	-64
 391               	.global	KeyboardReport
 392               		.section	.progmem.data.KeyboardReport,"a"
 395               	KeyboardReport:
 396 0000 05        		.byte	5
 397 0001 01        		.byte	1
 398 0002 09        		.byte	9
 399 0003 06        		.byte	6
 400 0004 A1        		.byte	-95
 401 0005 01        		.byte	1
 402 0006 05        		.byte	5
 403 0007 07        		.byte	7
 404 0008 19        		.byte	25
 405 0009 E0        		.byte	-32
 406 000a 29        		.byte	41
 407 000b E7        		.byte	-25
 408 000c 15        		.byte	21
 409 000d 00        		.byte	0
 410 000e 25        		.byte	37
 411 000f 01        		.byte	1
 412 0010 95        		.byte	-107
 413 0011 08        		.byte	8
 414 0012 75        		.byte	117
 415 0013 01        		.byte	1
 416 0014 81        		.byte	-127
 417 0015 02        		.byte	2
 418 0016 95        		.byte	-107
 419 0017 01        		.byte	1
 420 0018 75        		.byte	117
 421 0019 08        		.byte	8
 422 001a 81        		.byte	-127
 423 001b 01        		.byte	1
 424 001c 05        		.byte	5
 425 001d 07        		.byte	7
 426 001e 19        		.byte	25
 427 001f 00        		.byte	0
 428 0020 29        		.byte	41
 429 0021 FF        		.byte	-1
 430 0022 15        		.byte	21
 431 0023 00        		.byte	0
 432 0024 26        		.byte	38
 433 0025 FF        		.byte	-1
 434 0026 00        		.byte	0
 435 0027 95        		.byte	-107
 436 0028 06        		.byte	6
 437 0029 75        		.byte	117
 438 002a 08        		.byte	8
 439 002b 81        		.byte	-127
 440 002c 00        		.byte	0
 441 002d 05        		.byte	5
 442 002e 08        		.byte	8
 443 002f 19        		.byte	25
 444 0030 01        		.byte	1
 445 0031 29        		.byte	41
 446 0032 05        		.byte	5
 447 0033 95        		.byte	-107
 448 0034 05        		.byte	5
 449 0035 75        		.byte	117
 450 0036 01        		.byte	1
 451 0037 91        		.byte	-111
 452 0038 02        		.byte	2
 453 0039 95        		.byte	-107
 454 003a 01        		.byte	1
 455 003b 75        		.byte	117
 456 003c 03        		.byte	3
 457 003d 91        		.byte	-111
 458 003e 01        		.byte	1
 459 003f C0        		.byte	-64
 460               		.text
 461               	.Letext0:
 462               		.file 2 "/usr/avr/include/stdint.h"
 463               		.file 3 "/usr/lib/gcc/avr/8.3.0/include/stddef.h"
 464               		.file 4 "tmk_core/common/report.h"
 465               		.file 5 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdDescriptors.h"
 466               		.file 6 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 467               		.file 7 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 468               		.file 8 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 469               		.file 9 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 470               		.file 10 "/usr/avr/include/stdio.h"
 471               		.file 11 "lib/lufa/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h"
 472               		.file 12 "tmk_core/protocol/usb_descriptor.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_descriptor.c
     /tmp/ccV9VI6X.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccV9VI6X.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccV9VI6X.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccV9VI6X.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccV9VI6X.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccV9VI6X.s:13     .text.get_usb_descriptor:0000000000000000 get_usb_descriptor
     /tmp/ccV9VI6X.s:395    .progmem.data.KeyboardReport:0000000000000000 KeyboardReport
     /tmp/ccV9VI6X.s:340    .progmem.data.SharedReport:0000000000000000 SharedReport
     /tmp/ccV9VI6X.s:221    .progmem.data.ProductString:0000000000000000 ProductString
     /tmp/ccV9VI6X.s:256    .progmem.data.LanguageString:0000000000000000 LanguageString
     /tmp/ccV9VI6X.s:235    .progmem.data.ManufacturerString:0000000000000000 ManufacturerString
     /tmp/ccV9VI6X.s:264    .progmem.data.ConfigurationDescriptor:0000000000000000 ConfigurationDescriptor
     /tmp/ccV9VI6X.s:321    .progmem.data.DeviceDescriptor:0000000000000000 DeviceDescriptor

NO UNDEFINED SYMBOLS
