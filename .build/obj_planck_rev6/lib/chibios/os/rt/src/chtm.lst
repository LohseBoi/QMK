   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"chtm.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.chTMObjectInit,"ax",%progbits
  18              		.align	1
  19              		.global	chTMObjectInit
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	chTMObjectInit:
  27              	.LVL0:
  28              	.LFB291:
  29              		.file 1 "lib/chibios/os/rt/src/chtm.c"
   1:lib/chibios/os/rt/src/chtm.c **** /*
   2:lib/chibios/os/rt/src/chtm.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:lib/chibios/os/rt/src/chtm.c **** 
   4:lib/chibios/os/rt/src/chtm.c ****     This file is part of ChibiOS.
   5:lib/chibios/os/rt/src/chtm.c **** 
   6:lib/chibios/os/rt/src/chtm.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:lib/chibios/os/rt/src/chtm.c ****     it under the terms of the GNU General Public License as published by
   8:lib/chibios/os/rt/src/chtm.c ****     the Free Software Foundation; either version 3 of the License, or
   9:lib/chibios/os/rt/src/chtm.c ****     (at your option) any later version.
  10:lib/chibios/os/rt/src/chtm.c **** 
  11:lib/chibios/os/rt/src/chtm.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:lib/chibios/os/rt/src/chtm.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:lib/chibios/os/rt/src/chtm.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:lib/chibios/os/rt/src/chtm.c ****     GNU General Public License for more details.
  15:lib/chibios/os/rt/src/chtm.c **** 
  16:lib/chibios/os/rt/src/chtm.c ****     You should have received a copy of the GNU General Public License
  17:lib/chibios/os/rt/src/chtm.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:lib/chibios/os/rt/src/chtm.c **** */
  19:lib/chibios/os/rt/src/chtm.c **** 
  20:lib/chibios/os/rt/src/chtm.c **** /**
  21:lib/chibios/os/rt/src/chtm.c ****  * @file    rt/src/chtm.c
  22:lib/chibios/os/rt/src/chtm.c ****  * @brief   Time Measurement module code.
  23:lib/chibios/os/rt/src/chtm.c ****  *
  24:lib/chibios/os/rt/src/chtm.c ****  * @addtogroup time_measurement
  25:lib/chibios/os/rt/src/chtm.c ****  * @details Time Measurement APIs and services.
  26:lib/chibios/os/rt/src/chtm.c ****  * @{
  27:lib/chibios/os/rt/src/chtm.c ****  */
  28:lib/chibios/os/rt/src/chtm.c **** 
  29:lib/chibios/os/rt/src/chtm.c **** #include "ch.h"
  30:lib/chibios/os/rt/src/chtm.c **** 
  31:lib/chibios/os/rt/src/chtm.c **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
  32:lib/chibios/os/rt/src/chtm.c **** 
  33:lib/chibios/os/rt/src/chtm.c **** /*===========================================================================*/
  34:lib/chibios/os/rt/src/chtm.c **** /* Module local definitions.                                                 */
  35:lib/chibios/os/rt/src/chtm.c **** /*===========================================================================*/
  36:lib/chibios/os/rt/src/chtm.c **** 
  37:lib/chibios/os/rt/src/chtm.c **** /**
  38:lib/chibios/os/rt/src/chtm.c ****  * @brief   Number of iterations in the calibration loop.
  39:lib/chibios/os/rt/src/chtm.c ****  * @note    This is required in order to assess the best result in
  40:lib/chibios/os/rt/src/chtm.c ****  *          architectures with instruction cache.
  41:lib/chibios/os/rt/src/chtm.c ****  */
  42:lib/chibios/os/rt/src/chtm.c **** #define TM_CALIBRATION_LOOP             4U
  43:lib/chibios/os/rt/src/chtm.c **** 
  44:lib/chibios/os/rt/src/chtm.c **** /*===========================================================================*/
  45:lib/chibios/os/rt/src/chtm.c **** /* Module exported variables.                                                */
  46:lib/chibios/os/rt/src/chtm.c **** /*===========================================================================*/
  47:lib/chibios/os/rt/src/chtm.c **** 
  48:lib/chibios/os/rt/src/chtm.c **** /*===========================================================================*/
  49:lib/chibios/os/rt/src/chtm.c **** /* Module local types.                                                       */
  50:lib/chibios/os/rt/src/chtm.c **** /*===========================================================================*/
  51:lib/chibios/os/rt/src/chtm.c **** 
  52:lib/chibios/os/rt/src/chtm.c **** /*===========================================================================*/
  53:lib/chibios/os/rt/src/chtm.c **** /* Module local variables.                                                   */
  54:lib/chibios/os/rt/src/chtm.c **** /*===========================================================================*/
  55:lib/chibios/os/rt/src/chtm.c **** 
  56:lib/chibios/os/rt/src/chtm.c **** /*===========================================================================*/
  57:lib/chibios/os/rt/src/chtm.c **** /* Module local functions.                                                   */
  58:lib/chibios/os/rt/src/chtm.c **** /*===========================================================================*/
  59:lib/chibios/os/rt/src/chtm.c **** 
  60:lib/chibios/os/rt/src/chtm.c **** static inline void tm_stop(time_measurement_t *tmp,
  61:lib/chibios/os/rt/src/chtm.c ****                            rtcnt_t now,
  62:lib/chibios/os/rt/src/chtm.c ****                            rtcnt_t offset) {
  63:lib/chibios/os/rt/src/chtm.c **** 
  64:lib/chibios/os/rt/src/chtm.c ****   tmp->n++;
  65:lib/chibios/os/rt/src/chtm.c ****   tmp->last = (now - tmp->last) - offset;
  66:lib/chibios/os/rt/src/chtm.c ****   tmp->cumulative += (rttime_t)tmp->last;
  67:lib/chibios/os/rt/src/chtm.c ****   if (tmp->last > tmp->worst) {
  68:lib/chibios/os/rt/src/chtm.c ****     tmp->worst = tmp->last;
  69:lib/chibios/os/rt/src/chtm.c ****   }
  70:lib/chibios/os/rt/src/chtm.c ****   if (tmp->last < tmp->best) {
  71:lib/chibios/os/rt/src/chtm.c ****     tmp->best = tmp->last;
  72:lib/chibios/os/rt/src/chtm.c ****   }
  73:lib/chibios/os/rt/src/chtm.c **** }
  74:lib/chibios/os/rt/src/chtm.c **** 
  75:lib/chibios/os/rt/src/chtm.c **** /*===========================================================================*/
  76:lib/chibios/os/rt/src/chtm.c **** /* Module exported functions.                                                */
  77:lib/chibios/os/rt/src/chtm.c **** /*===========================================================================*/
  78:lib/chibios/os/rt/src/chtm.c **** 
  79:lib/chibios/os/rt/src/chtm.c **** /**
  80:lib/chibios/os/rt/src/chtm.c ****  * @brief   Initializes the time measurement unit.
  81:lib/chibios/os/rt/src/chtm.c ****  *
  82:lib/chibios/os/rt/src/chtm.c ****  * @init
  83:lib/chibios/os/rt/src/chtm.c ****  */
  84:lib/chibios/os/rt/src/chtm.c **** void _tm_init(void) {
  85:lib/chibios/os/rt/src/chtm.c ****   time_measurement_t tm;
  86:lib/chibios/os/rt/src/chtm.c ****   unsigned i;
  87:lib/chibios/os/rt/src/chtm.c **** 
  88:lib/chibios/os/rt/src/chtm.c ****   /* Time Measurement subsystem calibration, it does a null measurement
  89:lib/chibios/os/rt/src/chtm.c ****      and calculates the call overhead which is subtracted to real
  90:lib/chibios/os/rt/src/chtm.c ****      measurements.*/
  91:lib/chibios/os/rt/src/chtm.c ****   ch.tm.offset = (rtcnt_t)0;
  92:lib/chibios/os/rt/src/chtm.c ****   chTMObjectInit(&tm);
  93:lib/chibios/os/rt/src/chtm.c ****   i = TM_CALIBRATION_LOOP;
  94:lib/chibios/os/rt/src/chtm.c ****   do {
  95:lib/chibios/os/rt/src/chtm.c ****     chTMStartMeasurementX(&tm);
  96:lib/chibios/os/rt/src/chtm.c ****     chTMStopMeasurementX(&tm);
  97:lib/chibios/os/rt/src/chtm.c ****     i--;
  98:lib/chibios/os/rt/src/chtm.c ****   } while (i > 0U);
  99:lib/chibios/os/rt/src/chtm.c ****   ch.tm.offset = tm.best;
 100:lib/chibios/os/rt/src/chtm.c **** }
 101:lib/chibios/os/rt/src/chtm.c **** 
 102:lib/chibios/os/rt/src/chtm.c **** /**
 103:lib/chibios/os/rt/src/chtm.c ****  * @brief   Initializes a @p TimeMeasurement object.
 104:lib/chibios/os/rt/src/chtm.c ****  *
 105:lib/chibios/os/rt/src/chtm.c ****  * @param[out] tmp      pointer to a @p TimeMeasurement structure
 106:lib/chibios/os/rt/src/chtm.c ****  *
 107:lib/chibios/os/rt/src/chtm.c ****  * @init
 108:lib/chibios/os/rt/src/chtm.c ****  */
 109:lib/chibios/os/rt/src/chtm.c **** void chTMObjectInit(time_measurement_t *tmp) {
  30              		.loc 1 109 46 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 110:lib/chibios/os/rt/src/chtm.c **** 
 111:lib/chibios/os/rt/src/chtm.c ****   tmp->best       = (rtcnt_t)-1;
  35              		.loc 1 111 3 view .LVU1
 112:lib/chibios/os/rt/src/chtm.c ****   tmp->worst      = (rtcnt_t)0;
  36              		.loc 1 112 19 is_stmt 0 view .LVU2
  37 0000 0023     		movs	r3, #0
  38 0002 4FF0FF32 		mov	r2, #-1
  39 0006 C0E90023 		strd	r2, r3, [r0]
 113:lib/chibios/os/rt/src/chtm.c ****   tmp->last       = (rtcnt_t)0;
  40              		.loc 1 113 3 is_stmt 1 view .LVU3
 114:lib/chibios/os/rt/src/chtm.c ****   tmp->n          = (ucnt_t)0;
  41              		.loc 1 114 19 is_stmt 0 view .LVU4
  42 000a C0E90233 		strd	r3, r3, [r0, #8]
 115:lib/chibios/os/rt/src/chtm.c ****   tmp->cumulative = (rttime_t)0;
  43              		.loc 1 115 3 is_stmt 1 view .LVU5
  44              		.loc 1 115 19 is_stmt 0 view .LVU6
  45 000e 0022     		movs	r2, #0
  46 0010 0023     		movs	r3, #0
  47 0012 C0E90423 		strd	r2, [r0, #16]
 116:lib/chibios/os/rt/src/chtm.c **** }
  48              		.loc 1 116 1 view .LVU7
  49 0016 7047     		bx	lr
  50              		.cfi_endproc
  51              	.LFE291:
  53              		.section	.text.chTMStartMeasurementX,"ax",%progbits
  54              		.align	1
  55              		.global	chTMStartMeasurementX
  56              		.syntax unified
  57              		.thumb
  58              		.thumb_func
  59              		.fpu fpv4-sp-d16
  61              	chTMStartMeasurementX:
  62              	.LVL1:
  63              	.LFB292:
 117:lib/chibios/os/rt/src/chtm.c **** 
 118:lib/chibios/os/rt/src/chtm.c **** /**
 119:lib/chibios/os/rt/src/chtm.c ****  * @brief   Starts a measurement.
 120:lib/chibios/os/rt/src/chtm.c ****  * @pre     The @p time_measurement_t structure must be initialized.
 121:lib/chibios/os/rt/src/chtm.c ****  *
 122:lib/chibios/os/rt/src/chtm.c ****  * @param[in,out] tmp   pointer to a @p TimeMeasurement structure
 123:lib/chibios/os/rt/src/chtm.c ****  *
 124:lib/chibios/os/rt/src/chtm.c ****  * @xclass
 125:lib/chibios/os/rt/src/chtm.c ****  */
 126:lib/chibios/os/rt/src/chtm.c **** NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {
  64              		.loc 1 126 62 is_stmt 1 view -0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 0
  67              		@ frame_needed = 0, uses_anonymous_args = 0
  68              		@ link register save eliminated.
 127:lib/chibios/os/rt/src/chtm.c **** 
 128:lib/chibios/os/rt/src/chtm.c ****   tmp->last = chSysGetRealtimeCounterX();
  69              		.loc 1 128 3 view .LVU9
  70              	.LBB8:
  71              	.LBI8:
  72              		.file 2 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
   1:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*
   2:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
   4:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
   6:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     (at your option) any later version.
  10:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  11:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  16:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** */
  19:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  20:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  21:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @file    chcore_v7m.h
  22:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   ARMv7-M architecture port macros and structures.
  23:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
  24:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @addtogroup ARMCMx_V7M_CORE
  25:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
  26:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  27:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  28:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifndef CHCORE_V7M_H
  29:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CHCORE_V7M_H
  30:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  31:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  32:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  34:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  35:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  36:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @name    Port Capabilities and Constants
  37:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
  38:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  39:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  40:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   This port supports a realtime counter.
  41:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  42:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SUPPORTS_RT                TRUE
  43:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  44:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  45:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Natural alignment constant.
  46:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the minimum alignment for pointer-size variables.
  47:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  48:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_NATURAL_ALIGN              sizeof (void *)
  49:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  50:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  51:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Stack alignment constant.
  52:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the alignment required for the stack pointer.
  53:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  54:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_STACK_ALIGN                sizeof (stkalign_t)
  55:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  56:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  57:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Working Areas alignment constant.
  58:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the alignment to be enforced for thread working areas.
  59:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  60:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA_ALIGN         ((PORT_ENABLE_GUARD_PAGES == TRUE) ?\
  61:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                          32U : PORT_STACK_ALIGN)
  62:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /** @} */
  63:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  64:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  65:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Disabled value for BASEPRI register.
  66:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  67:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_BASEPRI_DISABLED         0U
  68:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  69:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  70:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module pre-compile time settings.                                         */
  71:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  72:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  73:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  74:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Implements a syscall interface on SVC.
  75:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  76:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_USE_SYSCALL) || defined(__DOXYGEN__)
  77:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_USE_SYSCALL                FALSE
  78:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
  79:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  80:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  81:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Number of MPU regions to be saved/restored during context switch.
  82:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The first region is always region zero.
  83:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The use of this option has an overhead of 8 bytes for each
  84:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          region for each thread.
  85:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Allowed values are 0..4, zero means none.
  86:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  87:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_SWITCHED_REGIONS_NUMBER) || defined(__DOXYGEN__)
  88:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SWITCHED_REGIONS_NUMBER    0
  89:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
  90:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  91:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  92:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Enables stack overflow guard pages using MPU.
  93:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    This option can only be enabled if also option
  94:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CH_DBG_ENABLE_STACK_CHECK is enabled.
  95:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The use of this option has an overhead of 32 bytes for each
  96:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          thread.
  97:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  98:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_ENABLE_GUARD_PAGES) || defined(__DOXYGEN__)
  99:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ENABLE_GUARD_PAGES         FALSE
 100:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 101:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 102:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 103:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   MPU region to be used to stack guards.
 104:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Make sure this region is not included in the
 105:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p PORT_SWITCHED_REGIONS_NUMBER regions range.
 106:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 107:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_USE_GUARD_MPU_REGION) || defined(__DOXYGEN__)
 108:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_USE_GUARD_MPU_REGION       MPU_REGION_7
 109:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 110:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 111:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 112:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Stack size for the system idle thread.
 113:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This size depends on the idle thread implementation, usually
 114:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          the idle thread should take no more space than those reserved
 115:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 116:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    In this port it is set to 16 because the idle thread does have
 117:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          a stack frame when compiling without optimizations. You may
 118:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          reduce this value to zero when compiling with optimizations.
 119:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 120:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 121:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IDLE_THREAD_STACK_SIZE     16
 122:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 123:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 124:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 125:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 126:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This constant is used in the calculation of the correct working
 127:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          area size.
 128:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    In this port this value is conservatively set to 64 because the
 129:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          function @p chSchDoReschedule() can have a stack frame, especially
 130:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          with compiler optimizations disabled. The value can be reduced
 131:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          when compiler optimizations are enabled.
 132:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 133:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 134:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INT_REQUIRED_STACK         64
 135:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 136:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 137:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 138:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Enables the use of the WFI instruction in the idle thread loop.
 139:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 140:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_ENABLE_WFI_IDLE)
 141:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_ENABLE_WFI_IDLE          FALSE
 142:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 143:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 144:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 145:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   FPU support in context switch.
 146:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details Activating this option activates the FPU support in the kernel.
 147:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 148:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_USE_FPU)
 149:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_USE_FPU                  CORTEX_HAS_FPU
 150:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_USE_FPU == TRUE) && (CORTEX_HAS_FPU == FALSE)
 151:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* This setting requires an FPU presence check in case it is externally
 152:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    redefined.*/
 153:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "the selected core does not have an FPU"
 154:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 155:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 156:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 157:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Simplified priority handling flag.
 158:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details Activating this option makes the Kernel work in compact mode.
 159:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          In compact mode interrupts are disabled globally instead of
 160:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          raising the priority mask to some intermediate level.
 161:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 162:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_SIMPLIFIED_PRIORITY)
 163:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_SIMPLIFIED_PRIORITY      FALSE
 164:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 165:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 166:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 167:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   SVCALL handler priority.
 168:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The default SVCALL handler priority is defaulted to
 169:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAXIMUM_PRIORITY+1, this reserves the
 170:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAXIMUM_PRIORITY priority level as fast interrupts
 171:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          priority level.
 172:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 173:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_PRIORITY_SVCALL)
 174:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIORITY_SVCALL          (CORTEX_MAXIMUM_PRIORITY + 1U)
 175:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif !PORT_IRQ_IS_VALID_PRIORITY(CORTEX_PRIORITY_SVCALL)
 176:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* If it is externally redefined then better perform a validity check on it.*/
 177:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "invalid priority level specified for CORTEX_PRIORITY_SVCALL"
 178:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 179:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 180:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 181:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   NVIC PRIGROUP initialization expression.
 182:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details The default assigns all available priority bits as preemption
 183:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          priority with no sub-priority.
 184:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 185:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_PRIGROUP_INIT) || defined(__DOXYGEN__)
 186:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIGROUP_INIT            (7 - CORTEX_PRIORITY_BITS)
 187:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 188:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 189:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 190:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Derived constants and error checks.                                       */
 191:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 192:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 193:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER < 0) || (PORT_SWITCHED_REGIONS_NUMBER > 4)
 194:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "invalid PORT_SWITCHED_REGIONS_NUMBER value"
 195:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 196:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 197:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(_FROM_ASM_)
 198:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 199:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   MPU guard page size.
 200:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 201:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == TRUE) || defined(__DOXYGEN__)
 202:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_DBG_ENABLE_STACK_CHECK == FALSE
 203:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "PORT_ENABLE_GUARD_PAGES requires CH_DBG_ENABLE_STACK_CHECK"
 204:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 205:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if __MPU_PRESENT == 0
 206:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "MPU not present in current device"
 207:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 208:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_GUARD_PAGE_SIZE          32U
 209:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 210:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_GUARD_PAGE_SIZE          0U
 211:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 212:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* !defined(_FROM_ASM_) */
 213:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 214:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 215:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @name    Architecture and Compiler
 216:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
 217:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 218:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_MODEL == 3) || defined(__DOXYGEN__)
 219:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 220:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM3)
 221:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM3 not defined"
 222:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 223:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 224:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM3 == FALSE
 225:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "ChibiOS Cortex-M3 port not licensed"
 226:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 227:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 228:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 229:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Macro defining the specific ARM architecture.
 230:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 231:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_ARM_v7M
 232:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 233:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 234:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Name of the implemented architecture.
 235:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 236:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_NAME          "ARMv7-M"
 237:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 238:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 239:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Name of the architecture variant.
 240:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 241:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == FALSE) || defined(__DOXYGEN__)
 242:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_CORE_VARIANT_NAME        "Cortex-M3"
 243:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 244:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_CORE_VARIANT_NAME        "Cortex-M3 (MPU)"
 245:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 246:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 247:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_MODEL == 4)
 248:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 249:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM4)
 250:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM4 not defined"
 251:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 252:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 253:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM4 == FALSE
 254:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #error "ChibiOS Cortex-M4 port not licensed"
 255:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 256:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 257:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_ARM_v7ME
 258:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_NAME        "ARMv7E-M"
 259:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CORTEX_USE_FPU
 260:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 261:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4F"
 262:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 263:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4F (MPU)"
 264:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 265:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #else
 266:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 267:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4"
 268:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 269:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4 (MPU)"
 270:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 271:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 272:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 273:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_MODEL == 7)
 274:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 275:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM7)
 276:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM7 not defined"
 277:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 278:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 279:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM7 == FALSE
 280:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "ChibiOS Cortex-M7 port not licensed"
 281:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 282:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 283:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_ARM_v7ME
 284:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_NAME        "ARMv7E-M"
 285:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CORTEX_USE_FPU
 286:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 287:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7F"
 288:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 289:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7F (MPU)"
 290:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 291:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #else
 292:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 293:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7"
 294:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 295:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7 (MPU)"
 296:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 297:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 298:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 299:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 300:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 301:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Port-specific information string.
 302:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 303:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
 304:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INFO                       "Advanced kernel mode"
 305:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 306:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INFO                       "Compact kernel mode"
 307:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 308:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /** @} */
 309:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 310:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
 311:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 312:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Maximum usable priority for normal ISRs.
 313:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 314:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_MAX_KERNEL_PRIORITY      (CORTEX_PRIORITY_SVCALL + 1U)
 315:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 316:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 317:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   BASEPRI level within kernel lock.
 318:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 319:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_BASEPRI_KERNEL                                               \
 320:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   CORTEX_PRIO_MASK(CORTEX_MAX_KERNEL_PRIORITY)
 321:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 322:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 323:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_MAX_KERNEL_PRIORITY      0U
 324:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 325:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 326:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 327:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   PendSV priority level.
 328:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    This priority is enforced to be equal to
 329:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAX_KERNEL_PRIORITY, this handler always have the
 330:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          highest priority that cannot preempt the kernel.
 331:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 332:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIORITY_PENDSV          CORTEX_MAX_KERNEL_PRIORITY
 333:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 334:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 335:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module data structures and types.                                         */
 336:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 337:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 338:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* The following code is not processed when the file is included from an
 339:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    asm module.*/
 340:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(_FROM_ASM_)
 341:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 342:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* The documentation of the following declarations is in chconf.h in order
 343:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    to not have duplicated structure names into the documentation.*/
 344:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(__DOXYGEN__)
 345:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_extctx {
 346:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r0;
 347:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r1;
 348:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r2;
 349:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r3;
 350:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r12;
 351:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      lr_thd;
 352:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      pc;
 353:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      xpsr;
 354:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_USE_FPU
 355:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s0;
 356:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s1;
 357:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s2;
 358:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s3;
 359:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s4;
 360:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s5;
 361:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s6;
 362:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s7;
 363:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s8;
 364:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s9;
 365:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s10;
 366:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s11;
 367:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s12;
 368:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s13;
 369:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s14;
 370:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s15;
 371:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      fpscr;
 372:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      reserved;
 373:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_USE_FPU */
 374:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 375:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 376:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 377:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 378:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Link context structure.
 379:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This structure is used when there is the need to save extra
 380:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          context information that is not part of the registers stacked
 381:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          in HW.
 382:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 383:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_linkctx {
 384:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t              control;
 385:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_extctx    *ectxp;
 386:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 387:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 388:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 389:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_intctx {
 390:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER > 0) || defined(__DOXYGEN__)
 391:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct {
 392:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t    rbar;
 393:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t    rasr;
 394:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   } regions[PORT_SWITCHED_REGIONS_NUMBER];
 395:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 396:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_USE_FPU
 397:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s16;
 398:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s17;
 399:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s18;
 400:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s19;
 401:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s20;
 402:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s21;
 403:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s22;
 404:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s23;
 405:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s24;
 406:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s25;
 407:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s26;
 408:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s27;
 409:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s28;
 410:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s29;
 411:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s30;
 412:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s31;
 413:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_USE_FPU */
 414:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r4;
 415:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r5;
 416:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r6;
 417:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r7;
 418:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r8;
 419:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r9;
 420:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r10;
 421:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r11;
 422:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      lr;
 423:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 424:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 425:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_context {
 426:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_intctx    *sp;
 427:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 428:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct {
 429:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t            psp;
 430:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     const void          *p;
 431:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   } syscall;
 432:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 433:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 434:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* !defined(__DOXYGEN__) */
 435:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 436:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 437:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module macros.                                                            */
 438:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 439:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 440:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* By default threads have no syscall context information.*/
 441:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 442:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop)                              \
 443:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.syscall.psp = (uint32_t)(wtop);                                 \
 444:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.syscall.p   = NULL;
 445:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 446:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop)
 447:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 448:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 449:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* By default threads have all regions disabled.*/
 450:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER == 0) || defined(__DOXYGEN__)
 451:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)
 452:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 1) || defined(__DOXYGEN__)
 453:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 454:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 455:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U
 456:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 2) || defined(__DOXYGEN__)
 457:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 458:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 459:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 460:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 461:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U
 462:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 3) || defined(__DOXYGEN__)
 463:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 464:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 465:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 466:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 467:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U;                                      \
 468:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rbar  = 0U;                                      \
 469:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rasr  = 0U
 470:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 4) || defined(__DOXYGEN__)
 471:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 472:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 473:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 474:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 475:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U;                                      \
 476:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rbar  = 0U;                                      \
 477:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rasr  = 0U;                                      \
 478:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[3].rbar  = 0U;                                      \
 479:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[3].rasr  = 0U
 480:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 481:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 482:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 483:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 484:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 485:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This code usually setup the context switching frame represented
 486:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          by an @p port_intctx structure.
 487:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 488:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 489:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                 \
 490:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                         sizeof (struct port_intctx));       \
 491:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->r4 = (uint32_t)(pf);                                        \
 492:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->r5 = (uint32_t)(arg);                                       \
 493:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->lr = (uint32_t)_port_thread_start;                          \
 494:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __PORT_SETUP_CONTEXT_MPU(tp);                                             \
 495:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop);                                   \
 496:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 497:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 498:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** //  __PORT_SETUP_CONTEXT_MPU(tp)
 499:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 500:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 501:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Computes the thread working area global size.
 502:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    There is no need to perform alignments in this macro.
 503:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 504:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WA_SIZE(n) ((size_t)PORT_GUARD_PAGE_SIZE +                     \
 505:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          sizeof (struct port_intctx) +                      \
 506:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          sizeof (struct port_extctx) +                      \
 507:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          (size_t)(n) +                                      \
 508:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          (size_t)PORT_INT_REQUIRED_STACK)
 509:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 510:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 511:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Static working area allocation.
 512:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro is used to allocate a static thread working area
 513:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          aligned as both position and size.
 514:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 515:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] s         the name to be assigned to the stack array
 516:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] n         the stack size to be assigned to the thread
 517:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 518:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == FALSE) || defined(__DOXYGEN__)
 519:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA(s, n)                                             \
 520:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 521:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 522:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA(s, n)                                             \
 523:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   ALIGNED_VAR(32) stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 524:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 525:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 526:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 527:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ prologue code.
 528:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 529:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          enabled to invoke system APIs.
 530:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 531:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_PROLOGUE()
 532:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 533:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 534:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ epilogue code.
 535:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 536:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          enabled to invoke system APIs.
 537:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 538:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_EPILOGUE() _port_irq_epilogue()
 539:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 540:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 541:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ handler function declaration.
 542:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    @p id can be a function name or a vector number depending on the
 543:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          port implementation.
 544:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 545:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 546:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_HANDLER(id) extern "C" void id(void)
 547:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 548:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_HANDLER(id) void id(void)
 549:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 550:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 551:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 552:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Fast IRQ handler function declaration.
 553:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    @p id can be a function name or a vector number depending on the
 554:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          port implementation.
 555:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 556:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 557:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_FAST_IRQ_HANDLER(id) extern "C" void id(void)
 558:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 559:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_FAST_IRQ_HANDLER(id) void id(void)
 560:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 561:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 562:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 563:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Performs a context switch between two threads.
 564:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This is the most critical code in any port, this function
 565:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          is responsible for the context switch between 2 threads.
 566:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 567:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          switch performance so optimize here as much as you can.
 568:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 569:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] ntp       the thread to be switched in
 570:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] otp       the thread to be switched out
 571:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 572:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CH_DBG_ENABLE_STACK_CHECK == FALSE) || defined(__DOXYGEN__)
 573:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) _port_switch(ntp, otp)
 574:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 575:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if PORT_ENABLE_GUARD_PAGES == FALSE
 576:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) {                                             \
 577:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_intctx *r13 = (struct port_intctx *)__get_PSP();              \
 578:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   if ((stkalign_t *)(r13 - 1) < (otp)->wabase) {                            \
 579:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     chSysHalt("stack overflow");                                            \
 580:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   }                                                                         \
 581:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   _port_switch(ntp, otp);                                                   \
 582:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 583:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 584:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) {                                             \
 585:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   _port_switch(ntp, otp);                                                   \
 586:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                                                             \
 587:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   /* Setting up the guard page for the switched-in thread.*/                \
 588:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   mpuSetRegionAddress(PORT_USE_GUARD_MPU_REGION,                            \
 589:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                       chThdGetSelfX()->wabase);                             \
 590:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 591:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 592:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 593:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 594:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 595:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* External declarations.                                                    */
 596:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 597:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 598:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 599:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** extern "C" {
 600:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 601:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void port_init(void);
 602:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_irq_epilogue(void);
 603:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 604:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_thread_start(void);
 605:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_switch_from_isr(void);
 606:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_exit_from_isr(void);
 607:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if PORT_USE_SYSCALL == TRUE
 608:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void port_unprivileged_jump(uint32_t pc, uint32_t psp);
 609:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 610:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 611:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 612:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 613:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 614:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 615:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module inline functions.                                                  */
 616:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 617:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 618:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 619:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Returns a word encoding the current interrupts status.
 620:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 621:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The interrupts status.
 622:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 623:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE syssts_t port_get_irq_status(void) {
 624:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   syssts_t sts;
 625:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 626:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 627:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   sts = (syssts_t)__get_BASEPRI();
 628:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 629:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   sts = (syssts_t)__get_PRIMASK();
 630:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 631:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return sts;
 632:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 633:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 634:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 635:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Checks the interrupt status.
 636:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 637:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] sts       the interrupt status word
 638:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 639:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The interrupt status.
 640:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval false        the word specified a disabled interrupts status.
 641:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval true         the word specified an enabled interrupts status.
 642:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 643:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE bool port_irq_enabled(syssts_t sts) {
 644:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 645:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 646:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return sts == (syssts_t)CORTEX_BASEPRI_DISABLED;
 647:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 648:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return (sts & (syssts_t)1) == (syssts_t)0;
 649:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 650:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 651:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 652:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 653:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Determines the current execution context.
 654:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 655:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The execution context.
 656:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval false        not running in ISR mode.
 657:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval true         running in ISR mode.
 658:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 659:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE bool port_is_isr_context(void) {
 660:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 661:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 662:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 663:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 664:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 665:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-lock action.
 666:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function raises the base priority to kernel
 667:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 668:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_lock(void) {
 670:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 671:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 672:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 673:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if __CM7_REV <= 1
 674:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __disable_irq();
 675:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 676:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
 678:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 679:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if __CM7_REV <= 1
 680:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __enable_irq();
 681:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 682:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 683:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 684:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __disable_irq();
 685:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 686:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 687:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 688:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 689:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-unlock action.
 690:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function lowers the base priority to user
 691:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 692:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_unlock(void) {
 694:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 695:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 696:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
 697:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 698:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __enable_irq();
 699:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 700:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 701:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 702:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 703:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-lock action from an interrupt handler.
 704:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function raises the base priority to kernel
 705:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 706:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Same as @p port_lock() in this port.
 707:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 708:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_lock_from_isr(void) {
 709:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 710:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   port_lock();
 711:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 712:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 713:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 714:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-unlock action from an interrupt handler.
 715:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function lowers the base priority to user
 716:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 717:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Same as @p port_unlock() in this port.
 718:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 719:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_unlock_from_isr(void) {
 720:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 721:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   port_unlock();
 722:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 723:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 724:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 725:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Disables all the interrupt sources.
 726:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    In this port it disables all the interrupt sources by raising
 727:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          the priority mask to level 0.
 728:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 729:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_disable(void) {
 730:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 731:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __disable_irq();
 732:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 733:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 734:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 735:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Disables the interrupt sources below kernel-level priority.
 736:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Interrupt sources above kernel level remains enabled.
 737:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    In this port it raises/lowers the base priority to kernel level.
 738:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 739:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_suspend(void) {
 740:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 741:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
 742:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
 743:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __enable_irq();
 744:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 745:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __disable_irq();
 746:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 747:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 748:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 749:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 750:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Enables all the interrupt sources.
 751:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    In this port it lowers the base priority to user level.
 752:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 753:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_enable(void) {
 754:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 755:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
 756:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
 757:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 758:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __enable_irq();
 759:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 760:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 761:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 762:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Enters an architecture-dependent IRQ-waiting mode.
 763:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details The function is meant to return when an interrupt becomes pending.
 764:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          The simplest implementation is an empty function or macro but this
 765:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          would not take advantage of architecture-specific power saving
 766:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          modes.
 767:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Implemented as an inlined @p WFI instruction.
 768:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 769:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_wait_for_interrupt(void) {
 770:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 771:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_ENABLE_WFI_IDLE == TRUE
 772:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __WFI();
 773:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 774:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 775:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 776:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 777:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Returns the current value of the realtime counter.
 778:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 779:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The realtime counter value.
 780:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 781:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {
  73              		.loc 2 781 30 view .LVU10
  74              	.LBB9:
 782:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 783:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return DWT->CYCCNT;
  75              		.loc 2 783 3 view .LVU11
  76              		.loc 2 783 13 is_stmt 0 view .LVU12
  77 0000 014B     		ldr	r3, .L3
  78 0002 5B68     		ldr	r3, [r3, #4]
  79              	.LBE9:
  80              	.LBE8:
  81              		.loc 1 128 13 view .LVU13
  82 0004 8360     		str	r3, [r0, #8]
 129:lib/chibios/os/rt/src/chtm.c **** }
  83              		.loc 1 129 1 view .LVU14
  84 0006 7047     		bx	lr
  85              	.L4:
  86              		.align	2
  87              	.L3:
  88 0008 001000E0 		.word	-536866816
  89              		.cfi_endproc
  90              	.LFE292:
  92              		.section	.text.chTMStopMeasurementX,"ax",%progbits
  93              		.align	1
  94              		.global	chTMStopMeasurementX
  95              		.syntax unified
  96              		.thumb
  97              		.thumb_func
  98              		.fpu fpv4-sp-d16
 100              	chTMStopMeasurementX:
 101              	.LVL2:
 102              	.LFB293:
 130:lib/chibios/os/rt/src/chtm.c **** 
 131:lib/chibios/os/rt/src/chtm.c **** /**
 132:lib/chibios/os/rt/src/chtm.c ****  * @brief   Stops a measurement.
 133:lib/chibios/os/rt/src/chtm.c ****  * @pre     The @p time_measurement_t structure must be initialized.
 134:lib/chibios/os/rt/src/chtm.c ****  *
 135:lib/chibios/os/rt/src/chtm.c ****  * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 136:lib/chibios/os/rt/src/chtm.c ****  *
 137:lib/chibios/os/rt/src/chtm.c ****  * @xclass
 138:lib/chibios/os/rt/src/chtm.c ****  */
 139:lib/chibios/os/rt/src/chtm.c **** NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 103              		.loc 1 139 61 is_stmt 1 view -0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 0
 106              		@ frame_needed = 0, uses_anonymous_args = 0
 107              		@ link register save eliminated.
 140:lib/chibios/os/rt/src/chtm.c **** 
 141:lib/chibios/os/rt/src/chtm.c ****   tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 108              		.loc 1 141 3 view .LVU16
 109              	.LBB14:
 110              	.LBI14:
 781:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 111              		.loc 2 781 30 view .LVU17
 112              	.LBB15:
 113              		.loc 2 783 3 view .LVU18
 114              	.LBE15:
 115              	.LBE14:
 116              		.loc 1 141 3 is_stmt 0 view .LVU19
 117 0000 0D4A     		ldr	r2, .L8
 118              	.LBB18:
 119              	.LBB16:
 120              		.loc 2 783 13 view .LVU20
 121 0002 0E4B     		ldr	r3, .L8+4
 122              	.LBE16:
 123              	.LBE18:
 124              		.loc 1 141 3 view .LVU21
 125 0004 516F     		ldr	r1, [r2, #116]
 126              	.LVL3:
 127              	.LBB19:
 128              	.LBB20:
  64:lib/chibios/os/rt/src/chtm.c ****   tmp->last = (now - tmp->last) - offset;
 129              		.loc 1 64 9 view .LVU22
 130 0006 C268     		ldr	r2, [r0, #12]
 131              	.LBE20:
 132              	.LBE19:
 133              	.LBB22:
 134              	.LBB17:
 135              		.loc 2 783 13 view .LVU23
 136 0008 5B68     		ldr	r3, [r3, #4]
 137              	.LVL4:
 138              		.loc 2 783 13 view .LVU24
 139              	.LBE17:
 140              	.LBE22:
 141              	.LBB23:
 142              	.LBI19:
  60:lib/chibios/os/rt/src/chtm.c ****                            rtcnt_t now,
 143              		.loc 1 60 20 is_stmt 1 view .LVU25
 144              	.LBB21:
  64:lib/chibios/os/rt/src/chtm.c ****   tmp->last = (now - tmp->last) - offset;
 145              		.loc 1 64 3 view .LVU26
  64:lib/chibios/os/rt/src/chtm.c ****   tmp->last = (now - tmp->last) - offset;
 146              		.loc 1 64 9 is_stmt 0 view .LVU27
 147 000a 0132     		adds	r2, r2, #1
 148 000c C260     		str	r2, [r0, #12]
  65:lib/chibios/os/rt/src/chtm.c ****   tmp->cumulative += (rttime_t)tmp->last;
 149              		.loc 1 65 3 is_stmt 1 view .LVU28
  65:lib/chibios/os/rt/src/chtm.c ****   tmp->cumulative += (rttime_t)tmp->last;
 150              		.loc 1 65 33 is_stmt 0 view .LVU29
 151 000e 8268     		ldr	r2, [r0, #8]
 152 0010 5B1A     		subs	r3, r3, r1
 153              	.LVL5:
  65:lib/chibios/os/rt/src/chtm.c ****   tmp->cumulative += (rttime_t)tmp->last;
 154              		.loc 1 65 33 view .LVU30
 155 0012 9B1A     		subs	r3, r3, r2
  66:lib/chibios/os/rt/src/chtm.c ****   if (tmp->last > tmp->worst) {
 156              		.loc 1 66 19 view .LVU31
 157 0014 D0E90421 		ldrd	r2, r1, [r0, #16]
 158              	.LVL6:
  66:lib/chibios/os/rt/src/chtm.c ****   if (tmp->last > tmp->worst) {
 159              		.loc 1 66 19 view .LVU32
 160 0018 D218     		adds	r2, r2, r3
 161 001a 41F10001 		adc	r1, r1, #0
 162 001e C0E90421 		strd	r2, r1, [r0, #16]
  67:lib/chibios/os/rt/src/chtm.c ****     tmp->worst = tmp->last;
 163              		.loc 1 67 6 view .LVU33
 164 0022 4268     		ldr	r2, [r0, #4]
  65:lib/chibios/os/rt/src/chtm.c ****   tmp->cumulative += (rttime_t)tmp->last;
 165              		.loc 1 65 13 view .LVU34
 166 0024 8360     		str	r3, [r0, #8]
  66:lib/chibios/os/rt/src/chtm.c ****   if (tmp->last > tmp->worst) {
 167              		.loc 1 66 3 is_stmt 1 view .LVU35
  67:lib/chibios/os/rt/src/chtm.c ****     tmp->worst = tmp->last;
 168              		.loc 1 67 3 view .LVU36
  67:lib/chibios/os/rt/src/chtm.c ****     tmp->worst = tmp->last;
 169              		.loc 1 67 6 is_stmt 0 view .LVU37
 170 0026 9342     		cmp	r3, r2
  68:lib/chibios/os/rt/src/chtm.c ****   }
 171              		.loc 1 68 5 is_stmt 1 view .LVU38
  70:lib/chibios/os/rt/src/chtm.c ****     tmp->best = tmp->last;
 172              		.loc 1 70 6 is_stmt 0 view .LVU39
 173 0028 0268     		ldr	r2, [r0]
  68:lib/chibios/os/rt/src/chtm.c ****   }
 174              		.loc 1 68 16 view .LVU40
 175 002a 88BF     		it	hi
 176 002c 4360     		strhi	r3, [r0, #4]
  70:lib/chibios/os/rt/src/chtm.c ****     tmp->best = tmp->last;
 177              		.loc 1 70 3 is_stmt 1 view .LVU41
  70:lib/chibios/os/rt/src/chtm.c ****     tmp->best = tmp->last;
 178              		.loc 1 70 6 is_stmt 0 view .LVU42
 179 002e 9342     		cmp	r3, r2
  71:lib/chibios/os/rt/src/chtm.c ****   }
 180              		.loc 1 71 5 is_stmt 1 view .LVU43
  71:lib/chibios/os/rt/src/chtm.c ****   }
 181              		.loc 1 71 15 is_stmt 0 view .LVU44
 182 0030 38BF     		it	cc
 183 0032 0360     		strcc	r3, [r0]
 184              	.LVL7:
  71:lib/chibios/os/rt/src/chtm.c ****   }
 185              		.loc 1 71 15 view .LVU45
 186              	.LBE21:
 187              	.LBE23:
 142:lib/chibios/os/rt/src/chtm.c **** }
 188              		.loc 1 142 1 view .LVU46
 189 0034 7047     		bx	lr
 190              	.L9:
 191 0036 00BF     		.align	2
 192              	.L8:
 193 0038 00000000 		.word	ch
 194 003c 001000E0 		.word	-536866816
 195              		.cfi_endproc
 196              	.LFE293:
 198              		.section	.text._tm_init,"ax",%progbits
 199              		.align	1
 200              		.global	_tm_init
 201              		.syntax unified
 202              		.thumb
 203              		.thumb_func
 204              		.fpu fpv4-sp-d16
 206              	_tm_init:
 207              	.LFB290:
  84:lib/chibios/os/rt/src/chtm.c ****   time_measurement_t tm;
 208              		.loc 1 84 21 is_stmt 1 view -0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 24
 211              		@ frame_needed = 0, uses_anonymous_args = 0
  85:lib/chibios/os/rt/src/chtm.c ****   unsigned i;
 212              		.loc 1 85 3 view .LVU48
  86:lib/chibios/os/rt/src/chtm.c **** 
 213              		.loc 1 86 3 view .LVU49
  91:lib/chibios/os/rt/src/chtm.c ****   chTMObjectInit(&tm);
 214              		.loc 1 91 3 view .LVU50
  84:lib/chibios/os/rt/src/chtm.c ****   time_measurement_t tm;
 215              		.loc 1 84 21 is_stmt 0 view .LVU51
 216 0000 30B5     		push	{r4, r5, lr}
 217              		.cfi_def_cfa_offset 12
 218              		.cfi_offset 4, -12
 219              		.cfi_offset 5, -8
 220              		.cfi_offset 14, -4
  91:lib/chibios/os/rt/src/chtm.c ****   chTMObjectInit(&tm);
 221              		.loc 1 91 16 view .LVU52
 222 0002 094D     		ldr	r5, .L13
  84:lib/chibios/os/rt/src/chtm.c ****   time_measurement_t tm;
 223              		.loc 1 84 21 view .LVU53
 224 0004 87B0     		sub	sp, sp, #28
 225              		.cfi_def_cfa_offset 40
  91:lib/chibios/os/rt/src/chtm.c ****   chTMObjectInit(&tm);
 226              		.loc 1 91 16 view .LVU54
 227 0006 0023     		movs	r3, #0
  92:lib/chibios/os/rt/src/chtm.c ****   i = TM_CALIBRATION_LOOP;
 228              		.loc 1 92 3 view .LVU55
 229 0008 6846     		mov	r0, sp
  91:lib/chibios/os/rt/src/chtm.c ****   chTMObjectInit(&tm);
 230              		.loc 1 91 16 view .LVU56
 231 000a 6B67     		str	r3, [r5, #116]
  92:lib/chibios/os/rt/src/chtm.c ****   i = TM_CALIBRATION_LOOP;
 232              		.loc 1 92 3 is_stmt 1 view .LVU57
 233 000c FFF7FEFF 		bl	chTMObjectInit
 234              	.LVL8:
  93:lib/chibios/os/rt/src/chtm.c ****   do {
 235              		.loc 1 93 3 view .LVU58
  92:lib/chibios/os/rt/src/chtm.c ****   i = TM_CALIBRATION_LOOP;
 236              		.loc 1 92 3 is_stmt 0 view .LVU59
 237 0010 0424     		movs	r4, #4
 238              	.LVL9:
 239              	.L11:
  94:lib/chibios/os/rt/src/chtm.c ****     chTMStartMeasurementX(&tm);
 240              		.loc 1 94 3 is_stmt 1 discriminator 1 view .LVU60
  95:lib/chibios/os/rt/src/chtm.c ****     chTMStopMeasurementX(&tm);
 241              		.loc 1 95 5 discriminator 1 view .LVU61
 242 0012 6846     		mov	r0, sp
 243 0014 FFF7FEFF 		bl	chTMStartMeasurementX
 244              	.LVL10:
  96:lib/chibios/os/rt/src/chtm.c ****     i--;
 245              		.loc 1 96 5 discriminator 1 view .LVU62
 246 0018 FFF7FEFF 		bl	chTMStopMeasurementX
 247              	.LVL11:
  97:lib/chibios/os/rt/src/chtm.c ****   } while (i > 0U);
 248              		.loc 1 97 5 discriminator 1 view .LVU63
  98:lib/chibios/os/rt/src/chtm.c ****   ch.tm.offset = tm.best;
 249              		.loc 1 98 14 discriminator 1 view .LVU64
 250 001c 013C     		subs	r4, r4, #1
 251              	.LVL12:
  98:lib/chibios/os/rt/src/chtm.c ****   ch.tm.offset = tm.best;
 252              		.loc 1 98 14 is_stmt 0 discriminator 1 view .LVU65
 253 001e F8D1     		bne	.L11
  99:lib/chibios/os/rt/src/chtm.c **** }
 254              		.loc 1 99 3 is_stmt 1 view .LVU66
  99:lib/chibios/os/rt/src/chtm.c **** }
 255              		.loc 1 99 16 is_stmt 0 view .LVU67
 256 0020 009B     		ldr	r3, [sp]
 257 0022 6B67     		str	r3, [r5, #116]
 100:lib/chibios/os/rt/src/chtm.c **** 
 258              		.loc 1 100 1 view .LVU68
 259 0024 07B0     		add	sp, sp, #28
 260              		.cfi_def_cfa_offset 12
 261              		@ sp needed
 262 0026 30BD     		pop	{r4, r5, pc}
 263              	.LVL13:
 264              	.L14:
 100:lib/chibios/os/rt/src/chtm.c **** 
 265              		.loc 1 100 1 view .LVU69
 266              		.align	2
 267              	.L13:
 268 0028 00000000 		.word	ch
 269              		.cfi_endproc
 270              	.LFE290:
 272              		.section	.text.chTMChainMeasurementToX,"ax",%progbits
 273              		.align	1
 274              		.global	chTMChainMeasurementToX
 275              		.syntax unified
 276              		.thumb
 277              		.thumb_func
 278              		.fpu fpv4-sp-d16
 280              	chTMChainMeasurementToX:
 281              	.LVL14:
 282              	.LFB294:
 143:lib/chibios/os/rt/src/chtm.c **** 
 144:lib/chibios/os/rt/src/chtm.c **** /**
 145:lib/chibios/os/rt/src/chtm.c ****  * @brief   Stops a measurement and chains to the next one using the same time
 146:lib/chibios/os/rt/src/chtm.c ****  *          stamp.
 147:lib/chibios/os/rt/src/chtm.c ****  *
 148:lib/chibios/os/rt/src/chtm.c ****  * @param[in,out] tmp1  pointer to the @p time_measurement_t structure to be
 149:lib/chibios/os/rt/src/chtm.c ****  *                      stopped
 150:lib/chibios/os/rt/src/chtm.c ****  * @param[in,out] tmp2  pointer to the @p time_measurement_t structure to be
 151:lib/chibios/os/rt/src/chtm.c ****  *                      started
 152:lib/chibios/os/rt/src/chtm.c ****  *
 153:lib/chibios/os/rt/src/chtm.c ****  *
 154:lib/chibios/os/rt/src/chtm.c ****  * @xclass
 155:lib/chibios/os/rt/src/chtm.c ****  */
 156:lib/chibios/os/rt/src/chtm.c **** NOINLINE void chTMChainMeasurementToX(time_measurement_t *tmp1,
 157:lib/chibios/os/rt/src/chtm.c ****                                       time_measurement_t *tmp2) {
 283              		.loc 1 157 65 is_stmt 1 view -0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 0
 286              		@ frame_needed = 0, uses_anonymous_args = 0
 287              		@ link register save eliminated.
 158:lib/chibios/os/rt/src/chtm.c **** 
 159:lib/chibios/os/rt/src/chtm.c ****   /* Starts new measurement.*/
 160:lib/chibios/os/rt/src/chtm.c ****   tmp2->last = chSysGetRealtimeCounterX();
 288              		.loc 1 160 3 view .LVU71
 289              	.LBB28:
 290              	.LBI28:
 781:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 291              		.loc 2 781 30 view .LVU72
 292              	.LBB29:
 293              		.loc 2 783 3 view .LVU73
 294              		.loc 2 783 13 is_stmt 0 view .LVU74
 295 0000 0C4B     		ldr	r3, .L18
 296              	.LBE29:
 297              	.LBE28:
 298              	.LBB31:
 299              	.LBB32:
  64:lib/chibios/os/rt/src/chtm.c ****   tmp->last = (now - tmp->last) - offset;
 300              		.loc 1 64 9 view .LVU75
 301 0002 C268     		ldr	r2, [r0, #12]
 302              	.LBE32:
 303              	.LBE31:
 304              	.LBB34:
 305              	.LBB30:
 306              		.loc 2 783 13 view .LVU76
 307 0004 5B68     		ldr	r3, [r3, #4]
 308              	.LBE30:
 309              	.LBE34:
 310              		.loc 1 160 14 view .LVU77
 311 0006 8B60     		str	r3, [r1, #8]
 161:lib/chibios/os/rt/src/chtm.c **** 
 162:lib/chibios/os/rt/src/chtm.c ****   /* Stops previous measurement using the same time stamp.*/
 163:lib/chibios/os/rt/src/chtm.c ****   tm_stop(tmp1, tmp2->last, (rtcnt_t)0);
 312              		.loc 1 163 3 is_stmt 1 view .LVU78
 313              	.LVL15:
 314              	.LBB35:
 315              	.LBI31:
  60:lib/chibios/os/rt/src/chtm.c ****                            rtcnt_t now,
 316              		.loc 1 60 20 view .LVU79
 317              	.LBB33:
  64:lib/chibios/os/rt/src/chtm.c ****   tmp->last = (now - tmp->last) - offset;
 318              		.loc 1 64 3 view .LVU80
  64:lib/chibios/os/rt/src/chtm.c ****   tmp->last = (now - tmp->last) - offset;
 319              		.loc 1 64 9 is_stmt 0 view .LVU81
 320 0008 0132     		adds	r2, r2, #1
 321 000a C260     		str	r2, [r0, #12]
  65:lib/chibios/os/rt/src/chtm.c ****   tmp->cumulative += (rttime_t)tmp->last;
 322              		.loc 1 65 3 is_stmt 1 view .LVU82
  65:lib/chibios/os/rt/src/chtm.c ****   tmp->cumulative += (rttime_t)tmp->last;
 323              		.loc 1 65 20 is_stmt 0 view .LVU83
 324 000c 8268     		ldr	r2, [r0, #8]
 325 000e 9B1A     		subs	r3, r3, r2
 326              	.LVL16:
  66:lib/chibios/os/rt/src/chtm.c ****   if (tmp->last > tmp->worst) {
 327              		.loc 1 66 19 view .LVU84
 328 0010 D0E90421 		ldrd	r2, r1, [r0, #16]
 329              	.LVL17:
  66:lib/chibios/os/rt/src/chtm.c ****   if (tmp->last > tmp->worst) {
 330              		.loc 1 66 19 view .LVU85
 331 0014 D218     		adds	r2, r2, r3
 332 0016 41F10001 		adc	r1, r1, #0
 333 001a C0E90421 		strd	r2, r1, [r0, #16]
  67:lib/chibios/os/rt/src/chtm.c ****     tmp->worst = tmp->last;
 334              		.loc 1 67 6 view .LVU86
 335 001e 4268     		ldr	r2, [r0, #4]
  65:lib/chibios/os/rt/src/chtm.c ****   tmp->cumulative += (rttime_t)tmp->last;
 336              		.loc 1 65 13 view .LVU87
 337 0020 8360     		str	r3, [r0, #8]
 338              	.LVL18:
  66:lib/chibios/os/rt/src/chtm.c ****   if (tmp->last > tmp->worst) {
 339              		.loc 1 66 3 is_stmt 1 view .LVU88
  67:lib/chibios/os/rt/src/chtm.c ****     tmp->worst = tmp->last;
 340              		.loc 1 67 3 view .LVU89
  67:lib/chibios/os/rt/src/chtm.c ****     tmp->worst = tmp->last;
 341              		.loc 1 67 6 is_stmt 0 view .LVU90
 342 0022 9342     		cmp	r3, r2
  68:lib/chibios/os/rt/src/chtm.c ****   }
 343              		.loc 1 68 5 is_stmt 1 view .LVU91
  70:lib/chibios/os/rt/src/chtm.c ****     tmp->best = tmp->last;
 344              		.loc 1 70 6 is_stmt 0 view .LVU92
 345 0024 0268     		ldr	r2, [r0]
  68:lib/chibios/os/rt/src/chtm.c ****   }
 346              		.loc 1 68 16 view .LVU93
 347 0026 88BF     		it	hi
 348 0028 4360     		strhi	r3, [r0, #4]
  70:lib/chibios/os/rt/src/chtm.c ****     tmp->best = tmp->last;
 349              		.loc 1 70 3 is_stmt 1 view .LVU94
  70:lib/chibios/os/rt/src/chtm.c ****     tmp->best = tmp->last;
 350              		.loc 1 70 6 is_stmt 0 view .LVU95
 351 002a 9342     		cmp	r3, r2
  71:lib/chibios/os/rt/src/chtm.c ****   }
 352              		.loc 1 71 5 is_stmt 1 view .LVU96
  71:lib/chibios/os/rt/src/chtm.c ****   }
 353              		.loc 1 71 15 is_stmt 0 view .LVU97
 354 002c 38BF     		it	cc
 355 002e 0360     		strcc	r3, [r0]
 356              	.LVL19:
  71:lib/chibios/os/rt/src/chtm.c ****   }
 357              		.loc 1 71 15 view .LVU98
 358              	.LBE33:
 359              	.LBE35:
 164:lib/chibios/os/rt/src/chtm.c **** }
 360              		.loc 1 164 1 view .LVU99
 361 0030 7047     		bx	lr
 362              	.L19:
 363 0032 00BF     		.align	2
 364              	.L18:
 365 0034 001000E0 		.word	-536866816
 366              		.cfi_endproc
 367              	.LFE294:
 369              		.text
 370              	.Letext0:
 371              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 372              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 373              		.file 5 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 374              		.file 6 "./lib/chibios/os/rt/include/chsystypes.h"
 375              		.file 7 "./lib/chibios/os/rt/include/chschd.h"
 376              		.file 8 "./lib/chibios/os/rt/include/chlists.h"
 377              		.file 9 "./lib/chibios/os/rt/include/chtime.h"
 378              		.file 10 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm4.h"
 379              		.file 11 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 380              		.file 12 "./lib/chibios/os/rt/include/chtm.h"
 381              		.file 13 "./lib/chibios/os/rt/include/chsem.h"
 382              		.file 14 "./lib/chibios/os/rt/include/chmtx.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chtm.c
     /tmp/ccZ1C9q9.s:18     .text.chTMObjectInit:0000000000000000 $t
     /tmp/ccZ1C9q9.s:26     .text.chTMObjectInit:0000000000000000 chTMObjectInit
     /tmp/ccZ1C9q9.s:54     .text.chTMStartMeasurementX:0000000000000000 $t
     /tmp/ccZ1C9q9.s:61     .text.chTMStartMeasurementX:0000000000000000 chTMStartMeasurementX
     /tmp/ccZ1C9q9.s:88     .text.chTMStartMeasurementX:0000000000000008 $d
     /tmp/ccZ1C9q9.s:93     .text.chTMStopMeasurementX:0000000000000000 $t
     /tmp/ccZ1C9q9.s:100    .text.chTMStopMeasurementX:0000000000000000 chTMStopMeasurementX
     /tmp/ccZ1C9q9.s:193    .text.chTMStopMeasurementX:0000000000000038 $d
     /tmp/ccZ1C9q9.s:199    .text._tm_init:0000000000000000 $t
     /tmp/ccZ1C9q9.s:206    .text._tm_init:0000000000000000 _tm_init
     /tmp/ccZ1C9q9.s:268    .text._tm_init:0000000000000028 $d
     /tmp/ccZ1C9q9.s:273    .text.chTMChainMeasurementToX:0000000000000000 $t
     /tmp/ccZ1C9q9.s:280    .text.chTMChainMeasurementToX:0000000000000000 chTMChainMeasurementToX
     /tmp/ccZ1C9q9.s:365    .text.chTMChainMeasurementToX:0000000000000034 $d

UNDEFINED SYMBOLS
ch
