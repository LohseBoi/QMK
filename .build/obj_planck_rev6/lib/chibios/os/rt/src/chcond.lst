   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"chcond.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.ch_sch_prio_insert,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	ch_sch_prio_insert:
  26              	.LVL0:
  27              	.LFB172:
  28              		.file 1 "./lib/chibios/os/rt/include/chschd.h"
   1:./lib/chibios/os/rt/include/chschd.h **** /*
   2:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chschd.h **** 
   4:./lib/chibios/os/rt/include/chschd.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chschd.h **** 
   6:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chschd.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chschd.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chschd.h **** 
  11:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chschd.h **** 
  16:./lib/chibios/os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chschd.h **** */
  19:./lib/chibios/os/rt/include/chschd.h **** 
  20:./lib/chibios/os/rt/include/chschd.h **** /**
  21:./lib/chibios/os/rt/include/chschd.h ****  * @file    rt/include/chschd.h
  22:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:./lib/chibios/os/rt/include/chschd.h ****  *
  24:./lib/chibios/os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:./lib/chibios/os/rt/include/chschd.h ****  * @{
  26:./lib/chibios/os/rt/include/chschd.h ****  */
  27:./lib/chibios/os/rt/include/chschd.h **** 
  28:./lib/chibios/os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:./lib/chibios/os/rt/include/chschd.h **** #define CHSCHD_H
  30:./lib/chibios/os/rt/include/chschd.h **** 
  31:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
  32:./lib/chibios/os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chschd.h **** 
  35:./lib/chibios/os/rt/include/chschd.h **** /**
  36:./lib/chibios/os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:./lib/chibios/os/rt/include/chschd.h ****  * @{
  38:./lib/chibios/os/rt/include/chschd.h ****  */
  39:./lib/chibios/os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:./lib/chibios/os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:./lib/chibios/os/rt/include/chschd.h ****                                              condition.                     */
  42:./lib/chibios/os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:./lib/chibios/os/rt/include/chschd.h ****                                              condition.                     */
  44:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  45:./lib/chibios/os/rt/include/chschd.h **** 
  46:./lib/chibios/os/rt/include/chschd.h **** /**
  47:./lib/chibios/os/rt/include/chschd.h ****  * @name    Priority constants
  48:./lib/chibios/os/rt/include/chschd.h ****  * @{
  49:./lib/chibios/os/rt/include/chschd.h ****  */
  50:./lib/chibios/os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:./lib/chibios/os/rt/include/chschd.h ****                                                  priority.                  */
  52:./lib/chibios/os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:./lib/chibios/os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:./lib/chibios/os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:./lib/chibios/os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  57:./lib/chibios/os/rt/include/chschd.h **** 
  58:./lib/chibios/os/rt/include/chschd.h **** /**
  59:./lib/chibios/os/rt/include/chschd.h ****  * @name    Thread states
  60:./lib/chibios/os/rt/include/chschd.h ****  * @{
  61:./lib/chibios/os/rt/include/chschd.h ****  */
  62:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:./lib/chibios/os/rt/include/chschd.h ****                                                   ready list.               */
  64:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On a queue.        */
  68:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:./lib/chibios/os/rt/include/chschd.h ****                                                   in queue.                 */
  77:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:./lib/chibios/os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:./lib/chibios/os/rt/include/chschd.h ****                                                   message.                  */
  81:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:./lib/chibios/os/rt/include/chschd.h **** 
  83:./lib/chibios/os/rt/include/chschd.h **** /**
  84:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:./lib/chibios/os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:./lib/chibios/os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:./lib/chibios/os/rt/include/chschd.h ****  */
  88:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:./lib/chibios/os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:./lib/chibios/os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:./lib/chibios/os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  93:./lib/chibios/os/rt/include/chschd.h **** 
  94:./lib/chibios/os/rt/include/chschd.h **** /**
  95:./lib/chibios/os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:./lib/chibios/os/rt/include/chschd.h ****  * @{
  97:./lib/chibios/os/rt/include/chschd.h ****  */
  98:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:./lib/chibios/os/rt/include/chschd.h ****                                                  mask.                      */
 100:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:./lib/chibios/os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:./lib/chibios/os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:./lib/chibios/os/rt/include/chschd.h ****                                                  flag.                      */
 107:./lib/chibios/os/rt/include/chschd.h **** /** @} */
 108:./lib/chibios/os/rt/include/chschd.h **** 
 109:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 110:./lib/chibios/os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 112:./lib/chibios/os/rt/include/chschd.h **** 
 113:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 114:./lib/chibios/os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 116:./lib/chibios/os/rt/include/chschd.h **** 
 117:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 118:./lib/chibios/os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 119:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 120:./lib/chibios/os/rt/include/chschd.h **** 
 121:./lib/chibios/os/rt/include/chschd.h **** /**
 122:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Structure representing a threads queue.
 123:./lib/chibios/os/rt/include/chschd.h ****  */
 124:./lib/chibios/os/rt/include/chschd.h **** struct ch_threads_queue {
 125:./lib/chibios/os/rt/include/chschd.h ****   ch_queue_t            queue;      /**< @brief Threads queue header.       */
 126:./lib/chibios/os/rt/include/chschd.h **** };
 127:./lib/chibios/os/rt/include/chschd.h **** 
 128:./lib/chibios/os/rt/include/chschd.h **** /**
 129:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Structure representing a thread.
 130:./lib/chibios/os/rt/include/chschd.h ****  * @note    Not all the listed fields are always needed, by switching off some
 131:./lib/chibios/os/rt/include/chschd.h ****  *          not needed ChibiOS/RT subsystems it is possible to save RAM space
 132:./lib/chibios/os/rt/include/chschd.h ****  *          by shrinking this structure.
 133:./lib/chibios/os/rt/include/chschd.h ****  */
 134:./lib/chibios/os/rt/include/chschd.h **** struct ch_thread {
 135:./lib/chibios/os/rt/include/chschd.h ****   union {
 136:./lib/chibios/os/rt/include/chschd.h ****     ch_list_t           list;       /**< @brief Threads lists element.      */
 137:./lib/chibios/os/rt/include/chschd.h ****     ch_queue_t          queue;      /**< @brief Threads queues element.     */
 138:./lib/chibios/os/rt/include/chschd.h ****     ch_priority_queue_t pqueue;     /**< @brief Threads ordered queues
 139:./lib/chibios/os/rt/include/chschd.h ****                                          element.                           */
 140:./lib/chibios/os/rt/include/chschd.h ****   } hdr;
 141:./lib/chibios/os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Processor context.          */
 142:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 143:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 144:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 145:./lib/chibios/os/rt/include/chschd.h **** #endif
 146:./lib/chibios/os/rt/include/chschd.h ****   /* End of the fields shared with the ReadyList structure. */
 147:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 148:./lib/chibios/os/rt/include/chschd.h ****   /**
 149:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread name or @p NULL.
 150:./lib/chibios/os/rt/include/chschd.h ****    */
 151:./lib/chibios/os/rt/include/chschd.h ****   const char            *name;
 152:./lib/chibios/os/rt/include/chschd.h **** #endif
 153:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 154:./lib/chibios/os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 155:./lib/chibios/os/rt/include/chschd.h ****   /**
 156:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Working area base address.
 157:./lib/chibios/os/rt/include/chschd.h ****    * @note    This pointer is used for stack overflow checks and for
 158:./lib/chibios/os/rt/include/chschd.h ****    *          dynamic threading.
 159:./lib/chibios/os/rt/include/chschd.h ****    */
 160:./lib/chibios/os/rt/include/chschd.h ****   stkalign_t            *wabase;
 161:./lib/chibios/os/rt/include/chschd.h **** #endif
 162:./lib/chibios/os/rt/include/chschd.h ****   /**
 163:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Current thread state.
 164:./lib/chibios/os/rt/include/chschd.h ****    */
 165:./lib/chibios/os/rt/include/chschd.h ****   tstate_t              state;
 166:./lib/chibios/os/rt/include/chschd.h ****   /**
 167:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Various thread flags.
 168:./lib/chibios/os/rt/include/chschd.h ****    */
 169:./lib/chibios/os/rt/include/chschd.h ****   tmode_t               flags;
 170:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 171:./lib/chibios/os/rt/include/chschd.h ****   /**
 172:./lib/chibios/os/rt/include/chschd.h ****    * @brief   References to this thread.
 173:./lib/chibios/os/rt/include/chschd.h ****    */
 174:./lib/chibios/os/rt/include/chschd.h ****   trefs_t               refs;
 175:./lib/chibios/os/rt/include/chschd.h **** #endif
 176:./lib/chibios/os/rt/include/chschd.h ****   /**
 177:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Number of ticks remaining to this thread.
 178:./lib/chibios/os/rt/include/chschd.h ****    */
 179:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_TIME_QUANTUM > 0) || defined(__DOXYGEN__)
 180:./lib/chibios/os/rt/include/chschd.h ****   tslices_t             ticks;
 181:./lib/chibios/os/rt/include/chschd.h **** #endif
 182:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 183:./lib/chibios/os/rt/include/chschd.h ****   /**
 184:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread consumed time in ticks.
 185:./lib/chibios/os/rt/include/chschd.h ****    * @note    This field can overflow.
 186:./lib/chibios/os/rt/include/chschd.h ****    */
 187:./lib/chibios/os/rt/include/chschd.h ****   volatile systime_t    time;
 188:./lib/chibios/os/rt/include/chschd.h **** #endif
 189:./lib/chibios/os/rt/include/chschd.h ****   /**
 190:./lib/chibios/os/rt/include/chschd.h ****    * @brief   State-specific fields.
 191:./lib/chibios/os/rt/include/chschd.h ****    * @note    All the fields declared in this union are only valid in the
 192:./lib/chibios/os/rt/include/chschd.h ****    *          specified state or condition and are thus volatile.
 193:./lib/chibios/os/rt/include/chschd.h ****    */
 194:./lib/chibios/os/rt/include/chschd.h ****   union {
 195:./lib/chibios/os/rt/include/chschd.h ****     /**
 196:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread wakeup code.
 197:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field contains the low level message sent to the thread
 198:./lib/chibios/os/rt/include/chschd.h ****      *          by the waking thread or interrupt handler. The value is valid
 199:./lib/chibios/os/rt/include/chschd.h ****      *          after exiting the @p chSchWakeupS() function.
 200:./lib/chibios/os/rt/include/chschd.h ****      */
 201:./lib/chibios/os/rt/include/chschd.h ****     msg_t               rdymsg;
 202:./lib/chibios/os/rt/include/chschd.h ****     /**
 203:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread exit code.
 204:./lib/chibios/os/rt/include/chschd.h ****      * @note    The thread termination code is stored in this field in order
 205:./lib/chibios/os/rt/include/chschd.h ****      *          to be retrieved by the thread performing a @p chThdWait() on
 206:./lib/chibios/os/rt/include/chschd.h ****      *          this thread.
 207:./lib/chibios/os/rt/include/chschd.h ****      */
 208:./lib/chibios/os/rt/include/chschd.h ****     msg_t               exitcode;
 209:./lib/chibios/os/rt/include/chschd.h ****     /**
 210:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic "wait" object.
 211:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a generic pointer to a synchronization
 212:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in one of the wait
 213:./lib/chibios/os/rt/include/chschd.h ****      *          states.
 214:./lib/chibios/os/rt/include/chschd.h ****      */
 215:./lib/chibios/os/rt/include/chschd.h ****     void                *wtobjp;
 216:./lib/chibios/os/rt/include/chschd.h ****     /**
 217:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic thread reference object.
 218:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 219:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_SUSPENDED
 220:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 221:./lib/chibios/os/rt/include/chschd.h ****      */
 222:./lib/chibios/os/rt/include/chschd.h ****     thread_reference_t  *wttrp;
 223:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 224:./lib/chibios/os/rt/include/chschd.h ****     /**
 225:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread sent message.
 226:./lib/chibios/os/rt/include/chschd.h ****      */
 227:./lib/chibios/os/rt/include/chschd.h ****     msg_t               sentmsg;
 228:./lib/chibios/os/rt/include/chschd.h **** #endif
 229:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 230:./lib/chibios/os/rt/include/chschd.h ****     /**
 231:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic semaphore object.
 232:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 233:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTSEM
 234:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 235:./lib/chibios/os/rt/include/chschd.h ****      */
 236:./lib/chibios/os/rt/include/chschd.h ****     struct ch_semaphore *wtsemp;
 237:./lib/chibios/os/rt/include/chschd.h **** #endif
 238:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 239:./lib/chibios/os/rt/include/chschd.h ****     /**
 240:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic mutex object.
 241:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 242:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTMTX
 243:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 244:./lib/chibios/os/rt/include/chschd.h ****      */
 245:./lib/chibios/os/rt/include/chschd.h ****     struct ch_mutex     *wtmtxp;
 246:./lib/chibios/os/rt/include/chschd.h **** #endif
 247:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 248:./lib/chibios/os/rt/include/chschd.h ****     /**
 249:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Enabled events mask.
 250:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is only valid while the thread is in the
 251:./lib/chibios/os/rt/include/chschd.h ****      *          @p CH_STATE_WTOREVT or @p CH_STATE_WTANDEVT states.
 252:./lib/chibios/os/rt/include/chschd.h ****      */
 253:./lib/chibios/os/rt/include/chschd.h ****     eventmask_t         ewmask;
 254:./lib/chibios/os/rt/include/chschd.h **** #endif
 255:./lib/chibios/os/rt/include/chschd.h ****   }                     u;
 256:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 257:./lib/chibios/os/rt/include/chschd.h ****   /**
 258:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Termination waiting list.
 259:./lib/chibios/os/rt/include/chschd.h ****    */
 260:./lib/chibios/os/rt/include/chschd.h ****   ch_list_t             waiting;
 261:./lib/chibios/os/rt/include/chschd.h **** #endif
 262:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 263:./lib/chibios/os/rt/include/chschd.h ****   /**
 264:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Messages queue.
 265:./lib/chibios/os/rt/include/chschd.h ****    */
 266:./lib/chibios/os/rt/include/chschd.h ****   ch_queue_t            msgqueue;
 267:./lib/chibios/os/rt/include/chschd.h **** #endif
 268:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 269:./lib/chibios/os/rt/include/chschd.h ****   /**
 270:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Pending events mask.
 271:./lib/chibios/os/rt/include/chschd.h ****    */
 272:./lib/chibios/os/rt/include/chschd.h ****   eventmask_t           epending;
 273:./lib/chibios/os/rt/include/chschd.h **** #endif
 274:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 275:./lib/chibios/os/rt/include/chschd.h ****   /**
 276:./lib/chibios/os/rt/include/chschd.h ****    * @brief   List of the mutexes owned by this thread.
 277:./lib/chibios/os/rt/include/chschd.h ****    * @note    The list is terminated by a @p NULL in this field.
 278:./lib/chibios/os/rt/include/chschd.h ****    */
 279:./lib/chibios/os/rt/include/chschd.h ****   struct ch_mutex       *mtxlist;
 280:./lib/chibios/os/rt/include/chschd.h ****   /**
 281:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread's own, non-inherited, priority.
 282:./lib/chibios/os/rt/include/chschd.h ****    */
 283:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               realprio;
 284:./lib/chibios/os/rt/include/chschd.h **** #endif
 285:./lib/chibios/os/rt/include/chschd.h **** #if ((CH_CFG_USE_DYNAMIC == TRUE) && (CH_CFG_USE_MEMPOOLS == TRUE)) ||      \
 286:./lib/chibios/os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 287:./lib/chibios/os/rt/include/chschd.h ****   /**
 288:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Memory Pool where the thread workspace is returned.
 289:./lib/chibios/os/rt/include/chschd.h ****    */
 290:./lib/chibios/os/rt/include/chschd.h ****   void                  *mpool;
 291:./lib/chibios/os/rt/include/chschd.h **** #endif
 292:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 293:./lib/chibios/os/rt/include/chschd.h ****   /**
 294:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread statistics.
 295:./lib/chibios/os/rt/include/chschd.h ****    */
 296:./lib/chibios/os/rt/include/chschd.h ****   time_measurement_t    stats;
 297:./lib/chibios/os/rt/include/chschd.h **** #endif
 298:./lib/chibios/os/rt/include/chschd.h **** #if defined(CH_CFG_THREAD_EXTRA_FIELDS)
 299:./lib/chibios/os/rt/include/chschd.h ****   /* Extra fields defined in chconf.h.*/
 300:./lib/chibios/os/rt/include/chschd.h ****   CH_CFG_THREAD_EXTRA_FIELDS
 301:./lib/chibios/os/rt/include/chschd.h **** #endif
 302:./lib/chibios/os/rt/include/chschd.h **** };
 303:./lib/chibios/os/rt/include/chschd.h **** 
 304:./lib/chibios/os/rt/include/chschd.h **** /**
 305:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Type of a Virtual Timer structure.
 306:./lib/chibios/os/rt/include/chschd.h ****  */
 307:./lib/chibios/os/rt/include/chschd.h **** typedef struct ch_delta_list delta_list_t;
 308:./lib/chibios/os/rt/include/chschd.h **** 
 309:./lib/chibios/os/rt/include/chschd.h **** /**
 310:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Virtual Timer delta list element and header structure.
 311:./lib/chibios/os/rt/include/chschd.h ****  */
 312:./lib/chibios/os/rt/include/chschd.h **** struct ch_delta_list {
 313:./lib/chibios/os/rt/include/chschd.h ****   delta_list_t          *next;      /**< @brief Next timer in the list.     */
 314:./lib/chibios/os/rt/include/chschd.h ****   delta_list_t          *prev;      /**< @brief Previous timer in the list. */
 315:./lib/chibios/os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Time delta before timeout.  */
 316:./lib/chibios/os/rt/include/chschd.h **** };
 317:./lib/chibios/os/rt/include/chschd.h **** 
 318:./lib/chibios/os/rt/include/chschd.h **** /**
 319:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Structure representing a Virtual Timer.
 320:./lib/chibios/os/rt/include/chschd.h ****  */
 321:./lib/chibios/os/rt/include/chschd.h **** struct ch_virtual_timer {
 322:./lib/chibios/os/rt/include/chschd.h ****   delta_list_t          dlist;      /**< @brief Delta list element.         */
 323:./lib/chibios/os/rt/include/chschd.h ****   vtfunc_t              func;       /**< @brief Timer callback function
 324:./lib/chibios/os/rt/include/chschd.h ****                                                 pointer.                    */
 325:./lib/chibios/os/rt/include/chschd.h ****   void                  *par;       /**< @brief Timer callback function
 326:./lib/chibios/os/rt/include/chschd.h ****                                                 parameter.                  */
 327:./lib/chibios/os/rt/include/chschd.h **** };
 328:./lib/chibios/os/rt/include/chschd.h **** 
 329:./lib/chibios/os/rt/include/chschd.h **** /**
 330:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Structure representing a virtual timers list header.
 331:./lib/chibios/os/rt/include/chschd.h ****  * @note    The timers list is implemented as a double link bidirectional list
 332:./lib/chibios/os/rt/include/chschd.h ****  *          in order to make the unlink time constant, the reset of a virtual
 333:./lib/chibios/os/rt/include/chschd.h ****  *          timer is often used in the code.
 334:./lib/chibios/os/rt/include/chschd.h ****  */
 335:./lib/chibios/os/rt/include/chschd.h **** struct ch_virtual_timers_list {
 336:./lib/chibios/os/rt/include/chschd.h ****   delta_list_t          dlist;      /**< @brief Delta list header.          */
 337:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 338:./lib/chibios/os/rt/include/chschd.h ****   volatile systime_t    systime;    /**< @brief System Time counter.        */
 339:./lib/chibios/os/rt/include/chschd.h **** #endif
 340:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
 341:./lib/chibios/os/rt/include/chschd.h ****   /**
 342:./lib/chibios/os/rt/include/chschd.h ****    * @brief   System time of the last tick event.
 343:./lib/chibios/os/rt/include/chschd.h ****    */
 344:./lib/chibios/os/rt/include/chschd.h ****   systime_t             lasttime;   /**< @brief System time of the last
 345:./lib/chibios/os/rt/include/chschd.h ****                                                 tick event.                 */
 346:./lib/chibios/os/rt/include/chschd.h **** #endif
 347:./lib/chibios/os/rt/include/chschd.h **** };
 348:./lib/chibios/os/rt/include/chschd.h **** 
 349:./lib/chibios/os/rt/include/chschd.h **** /**
 350:./lib/chibios/os/rt/include/chschd.h ****  * @extends threads_queue_t
 351:./lib/chibios/os/rt/include/chschd.h ****  */
 352:./lib/chibios/os/rt/include/chschd.h **** struct ch_ready_list {
 353:./lib/chibios/os/rt/include/chschd.h ****   /**
 354:./lib/chibios/os/rt/include/chschd.h ****    * @brief     Threads ordered queues header.
 355:./lib/chibios/os/rt/include/chschd.h ****    * @note      The priority field must be initialized to zero.
 356:./lib/chibios/os/rt/include/chschd.h ****    */
 357:./lib/chibios/os/rt/include/chschd.h ****   ch_priority_queue_t   pqueue;
 358:./lib/chibios/os/rt/include/chschd.h ****   /**
 359:./lib/chibios/os/rt/include/chschd.h ****    * @brief Not used, present because offsets.
 360:./lib/chibios/os/rt/include/chschd.h ****    */
 361:./lib/chibios/os/rt/include/chschd.h ****   struct port_context   ctx;
 362:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 363:./lib/chibios/os/rt/include/chschd.h ****   /**
 364:./lib/chibios/os/rt/include/chschd.h ****    * @brief     Newer registry element.
 365:./lib/chibios/os/rt/include/chschd.h ****    */
 366:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *newer;
 367:./lib/chibios/os/rt/include/chschd.h ****   /**
 368:./lib/chibios/os/rt/include/chschd.h ****    *  @brief    Older registry element.
 369:./lib/chibios/os/rt/include/chschd.h ****    */
 370:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *older;
 371:./lib/chibios/os/rt/include/chschd.h **** #endif
 372:./lib/chibios/os/rt/include/chschd.h ****   /* End of the fields shared with the thread_t structure.*/
 373:./lib/chibios/os/rt/include/chschd.h ****   /**
 374:./lib/chibios/os/rt/include/chschd.h ****    * @brief     The currently running thread.
 375:./lib/chibios/os/rt/include/chschd.h ****    */
 376:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *current;
 377:./lib/chibios/os/rt/include/chschd.h **** };
 378:./lib/chibios/os/rt/include/chschd.h **** 
 379:./lib/chibios/os/rt/include/chschd.h **** /**
 380:./lib/chibios/os/rt/include/chschd.h ****  * @brief   System debug data structure.
 381:./lib/chibios/os/rt/include/chschd.h ****  */
 382:./lib/chibios/os/rt/include/chschd.h **** struct ch_system_debug {
 383:./lib/chibios/os/rt/include/chschd.h ****   /**
 384:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Pointer to the panic message.
 385:./lib/chibios/os/rt/include/chschd.h ****    * @details This pointer is meant to be accessed through the debugger, it is
 386:./lib/chibios/os/rt/include/chschd.h ****    *          written once and then the system is halted.
 387:./lib/chibios/os/rt/include/chschd.h ****    * @note    Accesses to this pointer must never be optimized out so the
 388:./lib/chibios/os/rt/include/chschd.h ****    *          field itself is declared volatile.
 389:./lib/chibios/os/rt/include/chschd.h ****    */
 390:./lib/chibios/os/rt/include/chschd.h ****   const char            * volatile panic_msg;
 391:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 392:./lib/chibios/os/rt/include/chschd.h ****   /**
 393:./lib/chibios/os/rt/include/chschd.h ****    * @brief   ISR nesting level.
 394:./lib/chibios/os/rt/include/chschd.h ****    */
 395:./lib/chibios/os/rt/include/chschd.h ****   cnt_t                 isr_cnt;
 396:./lib/chibios/os/rt/include/chschd.h ****   /**
 397:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Lock nesting level.
 398:./lib/chibios/os/rt/include/chschd.h ****    */
 399:./lib/chibios/os/rt/include/chschd.h ****   cnt_t                 lock_cnt;
 400:./lib/chibios/os/rt/include/chschd.h **** #endif
 401:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED) || defined(__DOXYGEN__)
 402:./lib/chibios/os/rt/include/chschd.h ****   /**
 403:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Public trace buffer.
 404:./lib/chibios/os/rt/include/chschd.h ****    */
 405:./lib/chibios/os/rt/include/chschd.h ****   ch_trace_buffer_t     trace_buffer;
 406:./lib/chibios/os/rt/include/chschd.h **** #endif
 407:./lib/chibios/os/rt/include/chschd.h **** };
 408:./lib/chibios/os/rt/include/chschd.h **** 
 409:./lib/chibios/os/rt/include/chschd.h **** /**
 410:./lib/chibios/os/rt/include/chschd.h ****  * @brief   System data structure.
 411:./lib/chibios/os/rt/include/chschd.h ****  * @note    This structure contain all the data areas used by the OS except
 412:./lib/chibios/os/rt/include/chschd.h ****  *          stacks.
 413:./lib/chibios/os/rt/include/chschd.h ****  */
 414:./lib/chibios/os/rt/include/chschd.h **** struct ch_system {
 415:./lib/chibios/os/rt/include/chschd.h ****   /**
 416:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Ready list header.
 417:./lib/chibios/os/rt/include/chschd.h ****    */
 418:./lib/chibios/os/rt/include/chschd.h ****   ready_list_t          rlist;
 419:./lib/chibios/os/rt/include/chschd.h ****   /**
 420:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Virtual timers delta list header.
 421:./lib/chibios/os/rt/include/chschd.h ****    */
 422:./lib/chibios/os/rt/include/chschd.h ****   virtual_timers_list_t vtlist;
 423:./lib/chibios/os/rt/include/chschd.h ****   /**
 424:./lib/chibios/os/rt/include/chschd.h ****    * @brief   System debug.
 425:./lib/chibios/os/rt/include/chschd.h ****    */
 426:./lib/chibios/os/rt/include/chschd.h ****   system_debug_t        dbg;
 427:./lib/chibios/os/rt/include/chschd.h ****   /**
 428:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Main thread descriptor.
 429:./lib/chibios/os/rt/include/chschd.h ****    */
 430:./lib/chibios/os/rt/include/chschd.h ****   thread_t              mainthread;
 431:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
 432:./lib/chibios/os/rt/include/chschd.h ****   /**
 433:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Time measurement calibration data.
 434:./lib/chibios/os/rt/include/chschd.h ****    */
 435:./lib/chibios/os/rt/include/chschd.h ****   tm_calibration_t      tm;
 436:./lib/chibios/os/rt/include/chschd.h **** #endif
 437:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 438:./lib/chibios/os/rt/include/chschd.h ****   /**
 439:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Global kernel statistics.
 440:./lib/chibios/os/rt/include/chschd.h ****    */
 441:./lib/chibios/os/rt/include/chschd.h ****   kernel_stats_t        kernel_stats;
 442:./lib/chibios/os/rt/include/chschd.h **** #endif
 443:./lib/chibios/os/rt/include/chschd.h ****   CH_CFG_SYSTEM_EXTRA_FIELDS
 444:./lib/chibios/os/rt/include/chschd.h **** };
 445:./lib/chibios/os/rt/include/chschd.h **** 
 446:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 447:./lib/chibios/os/rt/include/chschd.h **** /* Module macros.                                                            */
 448:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 449:./lib/chibios/os/rt/include/chschd.h **** 
 450:./lib/chibios/os/rt/include/chschd.h **** /**
 451:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 452:./lib/chibios/os/rt/include/chschd.h ****  *
 453:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 454:./lib/chibios/os/rt/include/chschd.h ****  */
 455:./lib/chibios/os/rt/include/chschd.h **** #define firstprio(rlp)  ((rlp)->next->prio)
 456:./lib/chibios/os/rt/include/chschd.h **** 
 457:./lib/chibios/os/rt/include/chschd.h **** /**
 458:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Current thread pointer access macro.
 459:./lib/chibios/os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 460:./lib/chibios/os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 461:./lib/chibios/os/rt/include/chschd.h ****  */
 462:./lib/chibios/os/rt/include/chschd.h **** #define currp ch.rlist.current
 463:./lib/chibios/os/rt/include/chschd.h **** 
 464:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 465:./lib/chibios/os/rt/include/chschd.h **** /* External declarations.                                                    */
 466:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 467:./lib/chibios/os/rt/include/chschd.h **** 
 468:./lib/chibios/os/rt/include/chschd.h **** #if !defined(__DOXYGEN__)
 469:./lib/chibios/os/rt/include/chschd.h **** extern ch_system_t ch;
 470:./lib/chibios/os/rt/include/chschd.h **** #endif
 471:./lib/chibios/os/rt/include/chschd.h **** 
 472:./lib/chibios/os/rt/include/chschd.h **** /*
 473:./lib/chibios/os/rt/include/chschd.h ****  * Scheduler APIs.
 474:./lib/chibios/os/rt/include/chschd.h ****  */
 475:./lib/chibios/os/rt/include/chschd.h **** #ifdef __cplusplus
 476:./lib/chibios/os/rt/include/chschd.h **** extern "C" {
 477:./lib/chibios/os/rt/include/chschd.h **** #endif
 478:./lib/chibios/os/rt/include/chschd.h ****   void _scheduler_init(void);
 479:./lib/chibios/os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 480:./lib/chibios/os/rt/include/chschd.h ****   thread_t *chSchReadyAheadI(thread_t *tp);
 481:./lib/chibios/os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 482:./lib/chibios/os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout);
 483:./lib/chibios/os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 484:./lib/chibios/os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 485:./lib/chibios/os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 486:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoRescheduleBehind(void);
 487:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoRescheduleAhead(void);
 488:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoReschedule(void);
 489:./lib/chibios/os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 490:./lib/chibios/os/rt/include/chschd.h ****   void ch_sch_prio_insert(ch_queue_t *tp, ch_queue_t *qp);
 491:./lib/chibios/os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 492:./lib/chibios/os/rt/include/chschd.h **** #ifdef __cplusplus
 493:./lib/chibios/os/rt/include/chschd.h **** }
 494:./lib/chibios/os/rt/include/chschd.h **** #endif
 495:./lib/chibios/os/rt/include/chschd.h **** 
 496:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 497:./lib/chibios/os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 498:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 499:./lib/chibios/os/rt/include/chschd.h **** 
 500:./lib/chibios/os/rt/include/chschd.h **** /* If the performance code path has been chosen then all the following
 501:./lib/chibios/os/rt/include/chschd.h ****    functions are inlined into the various kernel modules.*/
 502:./lib/chibios/os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == TRUE
 503:./lib/chibios/os/rt/include/chschd.h **** static inline void ch_sch_prio_insert(ch_queue_t *tp, ch_queue_t *qp) {
  29              		.loc 1 503 71 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
 504:./lib/chibios/os/rt/include/chschd.h **** 
 505:./lib/chibios/os/rt/include/chschd.h ****   ch_queue_t *cp = qp;
  33              		.loc 1 505 3 view .LVU1
 503:./lib/chibios/os/rt/include/chschd.h **** 
  34              		.loc 1 503 71 is_stmt 0 view .LVU2
  35 0000 10B5     		push	{r4, lr}
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 4, -8
  38              		.cfi_offset 14, -4
  39              		.loc 1 505 15 view .LVU3
  40 0002 0B46     		mov	r3, r1
  41              	.LVL1:
  42              	.L3:
 506:./lib/chibios/os/rt/include/chschd.h ****   do {
  43              		.loc 1 506 3 is_stmt 1 discriminator 2 view .LVU4
 507:./lib/chibios/os/rt/include/chschd.h ****     cp = cp->next;
  44              		.loc 1 507 5 discriminator 2 view .LVU5
  45              		.loc 1 507 8 is_stmt 0 discriminator 2 view .LVU6
  46 0004 1B68     		ldr	r3, [r3]
  47              	.LVL2:
 508:./lib/chibios/os/rt/include/chschd.h ****   } while ((cp != qp) &&
  48              		.loc 1 508 23 is_stmt 1 discriminator 2 view .LVU7
  49 0006 9942     		cmp	r1, r3
  50 0008 03D0     		beq	.L2
  51              		.loc 1 508 23 is_stmt 0 discriminator 1 view .LVU8
  52 000a 9C68     		ldr	r4, [r3, #8]
  53 000c 8268     		ldr	r2, [r0, #8]
  54 000e 9442     		cmp	r4, r2
  55 0010 F8D2     		bcs	.L3
  56              	.L2:
 509:./lib/chibios/os/rt/include/chschd.h ****            (((thread_t *)cp)->hdr.pqueue.prio >= ((thread_t *)tp)->hdr.pqueue.prio));
 510:./lib/chibios/os/rt/include/chschd.h ****   tp->next       = cp;
  57              		.loc 1 510 3 is_stmt 1 view .LVU9
 511:./lib/chibios/os/rt/include/chschd.h ****   tp->prev       = cp->prev;
  58              		.loc 1 511 22 is_stmt 0 view .LVU10
  59 0012 5A68     		ldr	r2, [r3, #4]
 510:./lib/chibios/os/rt/include/chschd.h ****   tp->prev       = cp->prev;
  60              		.loc 1 510 18 view .LVU11
  61 0014 0360     		str	r3, [r0]
  62              		.loc 1 511 3 is_stmt 1 view .LVU12
  63              		.loc 1 511 18 is_stmt 0 view .LVU13
  64 0016 4260     		str	r2, [r0, #4]
 512:./lib/chibios/os/rt/include/chschd.h ****   tp->prev->next = tp;
  65              		.loc 1 512 3 is_stmt 1 view .LVU14
  66              		.loc 1 512 18 is_stmt 0 view .LVU15
  67 0018 1060     		str	r0, [r2]
 513:./lib/chibios/os/rt/include/chschd.h ****   cp->prev       = tp;
  68              		.loc 1 513 3 is_stmt 1 view .LVU16
  69              		.loc 1 513 18 is_stmt 0 view .LVU17
  70 001a 5860     		str	r0, [r3, #4]
 514:./lib/chibios/os/rt/include/chschd.h **** }
  71              		.loc 1 514 1 view .LVU18
  72 001c 10BD     		pop	{r4, pc}
  73              		.cfi_endproc
  74              	.LFE172:
  76              		.section	.text.chCondObjectInit,"ax",%progbits
  77              		.align	1
  78              		.global	chCondObjectInit
  79              		.syntax unified
  80              		.thumb
  81              		.thumb_func
  82              		.fpu fpv4-sp-d16
  84              	chCondObjectInit:
  85              	.LVL3:
  86              	.LFB289:
  87              		.file 2 "lib/chibios/os/rt/src/chcond.c"
   1:lib/chibios/os/rt/src/chcond.c **** /*
   2:lib/chibios/os/rt/src/chcond.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:lib/chibios/os/rt/src/chcond.c **** 
   4:lib/chibios/os/rt/src/chcond.c ****     This file is part of ChibiOS.
   5:lib/chibios/os/rt/src/chcond.c **** 
   6:lib/chibios/os/rt/src/chcond.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:lib/chibios/os/rt/src/chcond.c ****     it under the terms of the GNU General Public License as published by
   8:lib/chibios/os/rt/src/chcond.c ****     the Free Software Foundation; either version 3 of the License, or
   9:lib/chibios/os/rt/src/chcond.c ****     (at your option) any later version.
  10:lib/chibios/os/rt/src/chcond.c **** 
  11:lib/chibios/os/rt/src/chcond.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:lib/chibios/os/rt/src/chcond.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:lib/chibios/os/rt/src/chcond.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:lib/chibios/os/rt/src/chcond.c ****     GNU General Public License for more details.
  15:lib/chibios/os/rt/src/chcond.c **** 
  16:lib/chibios/os/rt/src/chcond.c ****     You should have received a copy of the GNU General Public License
  17:lib/chibios/os/rt/src/chcond.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:lib/chibios/os/rt/src/chcond.c **** */
  19:lib/chibios/os/rt/src/chcond.c **** /*
  20:lib/chibios/os/rt/src/chcond.c ****    Concepts and parts of this file have been contributed by Leon Woestenberg.
  21:lib/chibios/os/rt/src/chcond.c ****  */
  22:lib/chibios/os/rt/src/chcond.c **** 
  23:lib/chibios/os/rt/src/chcond.c **** /**
  24:lib/chibios/os/rt/src/chcond.c ****  * @file    rt/src/chcond.c
  25:lib/chibios/os/rt/src/chcond.c ****  * @brief   Condition Variables code.
  26:lib/chibios/os/rt/src/chcond.c ****  *
  27:lib/chibios/os/rt/src/chcond.c ****  * @addtogroup condvars
  28:lib/chibios/os/rt/src/chcond.c ****  * @details This module implements the Condition Variables mechanism. Condition
  29:lib/chibios/os/rt/src/chcond.c ****  *          variables are an extensions to the mutex subsystem and cannot
  30:lib/chibios/os/rt/src/chcond.c ****  *          work alone.
  31:lib/chibios/os/rt/src/chcond.c ****  *          <h2>Operation mode</h2>
  32:lib/chibios/os/rt/src/chcond.c ****  *          The condition variable is a synchronization object meant to be
  33:lib/chibios/os/rt/src/chcond.c ****  *          used inside a zone protected by a mutex. Mutexes and condition
  34:lib/chibios/os/rt/src/chcond.c ****  *          variables together can implement a Monitor construct.
  35:lib/chibios/os/rt/src/chcond.c ****  * @pre     In order to use the condition variable APIs the @p CH_CFG_USE_CONDVARS
  36:lib/chibios/os/rt/src/chcond.c ****  *          option must be enabled in @p chconf.h.
  37:lib/chibios/os/rt/src/chcond.c ****  * @{
  38:lib/chibios/os/rt/src/chcond.c ****  */
  39:lib/chibios/os/rt/src/chcond.c **** 
  40:lib/chibios/os/rt/src/chcond.c **** #include "ch.h"
  41:lib/chibios/os/rt/src/chcond.c **** 
  42:lib/chibios/os/rt/src/chcond.c **** #if (CH_CFG_USE_CONDVARS == TRUE) || defined(__DOXYGEN__)
  43:lib/chibios/os/rt/src/chcond.c **** 
  44:lib/chibios/os/rt/src/chcond.c **** /*===========================================================================*/
  45:lib/chibios/os/rt/src/chcond.c **** /* Module local definitions.                                                 */
  46:lib/chibios/os/rt/src/chcond.c **** /*===========================================================================*/
  47:lib/chibios/os/rt/src/chcond.c **** 
  48:lib/chibios/os/rt/src/chcond.c **** /*===========================================================================*/
  49:lib/chibios/os/rt/src/chcond.c **** /* Module exported variables.                                                */
  50:lib/chibios/os/rt/src/chcond.c **** /*===========================================================================*/
  51:lib/chibios/os/rt/src/chcond.c **** 
  52:lib/chibios/os/rt/src/chcond.c **** /*===========================================================================*/
  53:lib/chibios/os/rt/src/chcond.c **** /* Module local types.                                                       */
  54:lib/chibios/os/rt/src/chcond.c **** /*===========================================================================*/
  55:lib/chibios/os/rt/src/chcond.c **** 
  56:lib/chibios/os/rt/src/chcond.c **** /*===========================================================================*/
  57:lib/chibios/os/rt/src/chcond.c **** /* Module local variables.                                                   */
  58:lib/chibios/os/rt/src/chcond.c **** /*===========================================================================*/
  59:lib/chibios/os/rt/src/chcond.c **** 
  60:lib/chibios/os/rt/src/chcond.c **** /*===========================================================================*/
  61:lib/chibios/os/rt/src/chcond.c **** /* Module local functions.                                                   */
  62:lib/chibios/os/rt/src/chcond.c **** /*===========================================================================*/
  63:lib/chibios/os/rt/src/chcond.c **** 
  64:lib/chibios/os/rt/src/chcond.c **** /*===========================================================================*/
  65:lib/chibios/os/rt/src/chcond.c **** /* Module exported functions.                                                */
  66:lib/chibios/os/rt/src/chcond.c **** /*===========================================================================*/
  67:lib/chibios/os/rt/src/chcond.c **** 
  68:lib/chibios/os/rt/src/chcond.c **** /**
  69:lib/chibios/os/rt/src/chcond.c ****  * @brief   Initializes s @p condition_variable_t structure.
  70:lib/chibios/os/rt/src/chcond.c ****  *
  71:lib/chibios/os/rt/src/chcond.c ****  * @param[out] cp       pointer to a @p condition_variable_t structure
  72:lib/chibios/os/rt/src/chcond.c ****  *
  73:lib/chibios/os/rt/src/chcond.c ****  * @init
  74:lib/chibios/os/rt/src/chcond.c ****  */
  75:lib/chibios/os/rt/src/chcond.c **** void chCondObjectInit(condition_variable_t *cp) {
  88              		.loc 2 75 49 is_stmt 1 view -0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92              		@ link register save eliminated.
  76:lib/chibios/os/rt/src/chcond.c **** 
  77:lib/chibios/os/rt/src/chcond.c ****   chDbgCheck(cp != NULL);
  93              		.loc 2 77 3 view .LVU20
  94              		.loc 2 77 3 view .LVU21
  95              		.loc 2 77 3 view .LVU22
  78:lib/chibios/os/rt/src/chcond.c **** 
  79:lib/chibios/os/rt/src/chcond.c ****   ch_queue_init(&cp->queue);
  96              		.loc 2 79 3 view .LVU23
  97              	.LBB79:
  98              	.LBI79:
  99              		.file 3 "./lib/chibios/os/rt/include/chlists.h"
   1:./lib/chibios/os/rt/include/chlists.h **** /*
   2:./lib/chibios/os/rt/include/chlists.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chlists.h **** 
   4:./lib/chibios/os/rt/include/chlists.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chlists.h **** 
   6:./lib/chibios/os/rt/include/chlists.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chlists.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chlists.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chlists.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chlists.h **** 
  11:./lib/chibios/os/rt/include/chlists.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chlists.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chlists.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chlists.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chlists.h **** 
  16:./lib/chibios/os/rt/include/chlists.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chlists.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chlists.h **** */
  19:./lib/chibios/os/rt/include/chlists.h **** 
  20:./lib/chibios/os/rt/include/chlists.h **** /**
  21:./lib/chibios/os/rt/include/chlists.h ****  * @file    chlists.h
  22:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Lists and Queues header.
  23:./lib/chibios/os/rt/include/chlists.h ****  *
  24:./lib/chibios/os/rt/include/chlists.h ****  * @addtogroup os_lists
  25:./lib/chibios/os/rt/include/chlists.h ****  * @{
  26:./lib/chibios/os/rt/include/chlists.h ****  */
  27:./lib/chibios/os/rt/include/chlists.h **** 
  28:./lib/chibios/os/rt/include/chlists.h **** #ifndef CHLISTS_H
  29:./lib/chibios/os/rt/include/chlists.h **** #define CHLISTS_H
  30:./lib/chibios/os/rt/include/chlists.h **** 
  31:./lib/chibios/os/rt/include/chlists.h **** /*===========================================================================*/
  32:./lib/chibios/os/rt/include/chlists.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/rt/include/chlists.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chlists.h **** 
  35:./lib/chibios/os/rt/include/chlists.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chlists.h **** /* Module pre-compile time settings.                                         */
  37:./lib/chibios/os/rt/include/chlists.h **** /*===========================================================================*/
  38:./lib/chibios/os/rt/include/chlists.h **** 
  39:./lib/chibios/os/rt/include/chlists.h **** /*===========================================================================*/
  40:./lib/chibios/os/rt/include/chlists.h **** /* Derived constants and error checks.                                       */
  41:./lib/chibios/os/rt/include/chlists.h **** /*===========================================================================*/
  42:./lib/chibios/os/rt/include/chlists.h **** 
  43:./lib/chibios/os/rt/include/chlists.h **** /*===========================================================================*/
  44:./lib/chibios/os/rt/include/chlists.h **** /* Module data structures and types.                                         */
  45:./lib/chibios/os/rt/include/chlists.h **** /*===========================================================================*/
  46:./lib/chibios/os/rt/include/chlists.h **** 
  47:./lib/chibios/os/rt/include/chlists.h **** /**
  48:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Type of a generic single link list header and element.
  49:./lib/chibios/os/rt/include/chlists.h ****  */
  50:./lib/chibios/os/rt/include/chlists.h **** typedef struct ch_list ch_list_t;
  51:./lib/chibios/os/rt/include/chlists.h **** 
  52:./lib/chibios/os/rt/include/chlists.h **** /**
  53:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Structure representing a generic single link list header
  54:./lib/chibios/os/rt/include/chlists.h ****  *          and element.
  55:./lib/chibios/os/rt/include/chlists.h ****  */
  56:./lib/chibios/os/rt/include/chlists.h **** struct ch_list {
  57:./lib/chibios/os/rt/include/chlists.h ****   ch_list_t             *next;      /**< @brief Next in the list/queue.     */
  58:./lib/chibios/os/rt/include/chlists.h **** };
  59:./lib/chibios/os/rt/include/chlists.h **** 
  60:./lib/chibios/os/rt/include/chlists.h **** /**
  61:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked list header and element.
  62:./lib/chibios/os/rt/include/chlists.h ****  */
  63:./lib/chibios/os/rt/include/chlists.h **** typedef struct ch_queue ch_queue_t;
  64:./lib/chibios/os/rt/include/chlists.h **** 
  65:./lib/chibios/os/rt/include/chlists.h **** /**
  66:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Structure representing a generic bidirectional linked list header
  67:./lib/chibios/os/rt/include/chlists.h ****  *          and element.
  68:./lib/chibios/os/rt/include/chlists.h ****  */
  69:./lib/chibios/os/rt/include/chlists.h **** struct ch_queue {
  70:./lib/chibios/os/rt/include/chlists.h ****   ch_queue_t            *next;      /**< @brief Next in the list/queue.     */
  71:./lib/chibios/os/rt/include/chlists.h ****   ch_queue_t            *prev;      /**< @brief Previous in the queue.      */
  72:./lib/chibios/os/rt/include/chlists.h **** };
  73:./lib/chibios/os/rt/include/chlists.h **** 
  74:./lib/chibios/os/rt/include/chlists.h **** /**
  75:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Type of a generic priority-ordered bidirectional linked list
  76:./lib/chibios/os/rt/include/chlists.h ****  *          header and element.
  77:./lib/chibios/os/rt/include/chlists.h ****  */
  78:./lib/chibios/os/rt/include/chlists.h **** typedef struct ch_priority_queue ch_priority_queue_t;
  79:./lib/chibios/os/rt/include/chlists.h **** 
  80:./lib/chibios/os/rt/include/chlists.h **** /**
  81:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Structure representing a generic priority-ordered bidirectional
  82:./lib/chibios/os/rt/include/chlists.h ****  *          linked list header and element.
  83:./lib/chibios/os/rt/include/chlists.h ****  * @note    Link fields are void pointers in order to avoid aliasing issues.
  84:./lib/chibios/os/rt/include/chlists.h ****  */
  85:./lib/chibios/os/rt/include/chlists.h **** struct ch_priority_queue {
  86:./lib/chibios/os/rt/include/chlists.h ****   ch_priority_queue_t   *next;      /**< @brief Next in the list/queue.     */
  87:./lib/chibios/os/rt/include/chlists.h ****   ch_priority_queue_t   *prev;      /**< @brief Previous in the queue.      */
  88:./lib/chibios/os/rt/include/chlists.h ****   tprio_t               prio;
  89:./lib/chibios/os/rt/include/chlists.h **** };
  90:./lib/chibios/os/rt/include/chlists.h **** 
  91:./lib/chibios/os/rt/include/chlists.h **** /*===========================================================================*/
  92:./lib/chibios/os/rt/include/chlists.h **** /* Module macros.                                                            */
  93:./lib/chibios/os/rt/include/chlists.h **** /*===========================================================================*/
  94:./lib/chibios/os/rt/include/chlists.h **** 
  95:./lib/chibios/os/rt/include/chlists.h **** /**
  96:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Data part of a static queue object initializer.
  97:./lib/chibios/os/rt/include/chlists.h ****  * @details This macro should be used when statically initializing a
  98:./lib/chibios/os/rt/include/chlists.h ****  *          queue that is part of a bigger structure.
  99:./lib/chibios/os/rt/include/chlists.h ****  *
 100:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 101:./lib/chibios/os/rt/include/chlists.h ****  */
 102:./lib/chibios/os/rt/include/chlists.h **** #define _CH_QUEUE_DATA(name) {(ch_queue_t *)&name, (ch_queue_t *)&name}
 103:./lib/chibios/os/rt/include/chlists.h **** 
 104:./lib/chibios/os/rt/include/chlists.h **** /**
 105:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Static queue object initializer.
 106:./lib/chibios/os/rt/include/chlists.h ****  * @details Statically initialized queues require no explicit
 107:./lib/chibios/os/rt/include/chlists.h ****  *          initialization using @p queue_init().
 108:./lib/chibios/os/rt/include/chlists.h ****  *
 109:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 110:./lib/chibios/os/rt/include/chlists.h ****  */
 111:./lib/chibios/os/rt/include/chlists.h **** #define CH_QUEUE_DECL(name)                                                 \
 112:./lib/chibios/os/rt/include/chlists.h ****     ch_queue_t name = _CH_QUEUE_DATA(name)
 113:./lib/chibios/os/rt/include/chlists.h **** 
 114:./lib/chibios/os/rt/include/chlists.h **** /*===========================================================================*/
 115:./lib/chibios/os/rt/include/chlists.h **** /* External declarations.                                                    */
 116:./lib/chibios/os/rt/include/chlists.h **** /*===========================================================================*/
 117:./lib/chibios/os/rt/include/chlists.h **** 
 118:./lib/chibios/os/rt/include/chlists.h **** /* Early function prototypes required by the following headers.*/
 119:./lib/chibios/os/rt/include/chlists.h **** #ifdef __cplusplus
 120:./lib/chibios/os/rt/include/chlists.h **** extern "C" {
 121:./lib/chibios/os/rt/include/chlists.h **** #endif
 122:./lib/chibios/os/rt/include/chlists.h **** 
 123:./lib/chibios/os/rt/include/chlists.h **** #ifdef __cplusplus
 124:./lib/chibios/os/rt/include/chlists.h **** }
 125:./lib/chibios/os/rt/include/chlists.h **** #endif
 126:./lib/chibios/os/rt/include/chlists.h **** 
 127:./lib/chibios/os/rt/include/chlists.h **** /*===========================================================================*/
 128:./lib/chibios/os/rt/include/chlists.h **** /* Module inline functions.                                                  */
 129:./lib/chibios/os/rt/include/chlists.h **** /*===========================================================================*/
 130:./lib/chibios/os/rt/include/chlists.h **** 
 131:./lib/chibios/os/rt/include/chlists.h **** /**
 132:./lib/chibios/os/rt/include/chlists.h ****  * @brief   List initialization.
 133:./lib/chibios/os/rt/include/chlists.h ****  *
 134:./lib/chibios/os/rt/include/chlists.h ****  * @param[out] lp       pointer to the list header
 135:./lib/chibios/os/rt/include/chlists.h ****  *
 136:./lib/chibios/os/rt/include/chlists.h ****  * @notapi
 137:./lib/chibios/os/rt/include/chlists.h ****  */
 138:./lib/chibios/os/rt/include/chlists.h **** static inline void ch_list_init(ch_list_t *lp) {
 139:./lib/chibios/os/rt/include/chlists.h **** 
 140:./lib/chibios/os/rt/include/chlists.h ****   lp->next = lp;
 141:./lib/chibios/os/rt/include/chlists.h **** }
 142:./lib/chibios/os/rt/include/chlists.h **** 
 143:./lib/chibios/os/rt/include/chlists.h **** /**
 144:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is empty.
 145:./lib/chibios/os/rt/include/chlists.h ****  *
 146:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 147:./lib/chibios/os/rt/include/chlists.h ****  * @return              The status of the list.
 148:./lib/chibios/os/rt/include/chlists.h ****  *
 149:./lib/chibios/os/rt/include/chlists.h ****  * @notapi
 150:./lib/chibios/os/rt/include/chlists.h ****  */
 151:./lib/chibios/os/rt/include/chlists.h **** static inline bool ch_list_isempty(ch_list_t *lp) {
 152:./lib/chibios/os/rt/include/chlists.h **** 
 153:./lib/chibios/os/rt/include/chlists.h ****   return (bool)(lp->next == lp);
 154:./lib/chibios/os/rt/include/chlists.h **** }
 155:./lib/chibios/os/rt/include/chlists.h **** 
 156:./lib/chibios/os/rt/include/chlists.h **** /**
 157:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is not empty.
 158:./lib/chibios/os/rt/include/chlists.h ****  *
 159:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 160:./lib/chibios/os/rt/include/chlists.h ****  * @return              The status of the list.
 161:./lib/chibios/os/rt/include/chlists.h ****  *
 162:./lib/chibios/os/rt/include/chlists.h ****  * @notapi
 163:./lib/chibios/os/rt/include/chlists.h ****  */
 164:./lib/chibios/os/rt/include/chlists.h **** static inline bool ch_list_notempty(ch_list_t *lp) {
 165:./lib/chibios/os/rt/include/chlists.h **** 
 166:./lib/chibios/os/rt/include/chlists.h ****   return (bool)(lp->next != lp);
 167:./lib/chibios/os/rt/include/chlists.h **** }
 168:./lib/chibios/os/rt/include/chlists.h **** 
 169:./lib/chibios/os/rt/include/chlists.h **** /**
 170:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Pushes an element on top of a stack list.
 171:./lib/chibios/os/rt/include/chlists.h ****  *
 172:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] p     the pointer to the element to be inserted in the list
 173:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] lp    the pointer to the list header
 174:./lib/chibios/os/rt/include/chlists.h ****  *
 175:./lib/chibios/os/rt/include/chlists.h ****  * @notapi
 176:./lib/chibios/os/rt/include/chlists.h ****  */
 177:./lib/chibios/os/rt/include/chlists.h **** static inline void ch_list_push(ch_list_t *p, ch_list_t *lp) {
 178:./lib/chibios/os/rt/include/chlists.h **** 
 179:./lib/chibios/os/rt/include/chlists.h ****   p->next = lp->next;
 180:./lib/chibios/os/rt/include/chlists.h ****   lp->next = p;
 181:./lib/chibios/os/rt/include/chlists.h **** }
 182:./lib/chibios/os/rt/include/chlists.h **** 
 183:./lib/chibios/os/rt/include/chlists.h **** /**
 184:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Pops an element from the top of a stack list and returns it.
 185:./lib/chibios/os/rt/include/chlists.h ****  * @pre     The list must be non-empty before calling this function.
 186:./lib/chibios/os/rt/include/chlists.h ****  *
 187:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] lp        the pointer to the list header
 188:./lib/chibios/os/rt/include/chlists.h ****  * @return              The removed element pointer.
 189:./lib/chibios/os/rt/include/chlists.h ****  *
 190:./lib/chibios/os/rt/include/chlists.h ****  * @notapi
 191:./lib/chibios/os/rt/include/chlists.h ****  */
 192:./lib/chibios/os/rt/include/chlists.h **** static inline ch_list_t *ch_list_pop(ch_list_t *lp) {
 193:./lib/chibios/os/rt/include/chlists.h **** 
 194:./lib/chibios/os/rt/include/chlists.h ****   ch_list_t *p = lp->next;
 195:./lib/chibios/os/rt/include/chlists.h ****   lp->next = p->next;
 196:./lib/chibios/os/rt/include/chlists.h **** 
 197:./lib/chibios/os/rt/include/chlists.h ****   return p;
 198:./lib/chibios/os/rt/include/chlists.h **** }
 199:./lib/chibios/os/rt/include/chlists.h **** 
 200:./lib/chibios/os/rt/include/chlists.h **** /**
 201:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Queue initialization.
 202:./lib/chibios/os/rt/include/chlists.h ****  *
 203:./lib/chibios/os/rt/include/chlists.h ****  * @param[out] qp       pointer to the queue header
 204:./lib/chibios/os/rt/include/chlists.h ****  *
 205:./lib/chibios/os/rt/include/chlists.h ****  * @notapi
 206:./lib/chibios/os/rt/include/chlists.h ****  */
 207:./lib/chibios/os/rt/include/chlists.h **** static inline void ch_queue_init(ch_queue_t *qp) {
 100              		.loc 3 207 20 view .LVU24
 101              	.LBB80:
 208:./lib/chibios/os/rt/include/chlists.h **** 
 209:./lib/chibios/os/rt/include/chlists.h ****   qp->next = qp;
 102              		.loc 3 209 3 view .LVU25
 210:./lib/chibios/os/rt/include/chlists.h ****   qp->prev = qp;
 103              		.loc 3 210 12 is_stmt 0 view .LVU26
 104 0000 C0E90000 		strd	r0, r0, [r0]
 105              	.LVL4:
 106              		.loc 3 210 12 view .LVU27
 107              	.LBE80:
 108              	.LBE79:
  80:lib/chibios/os/rt/src/chcond.c **** }
 109              		.loc 2 80 1 view .LVU28
 110 0004 7047     		bx	lr
 111              		.cfi_endproc
 112              	.LFE289:
 114              		.section	.text.chCondSignal,"ax",%progbits
 115              		.align	1
 116              		.global	chCondSignal
 117              		.syntax unified
 118              		.thumb
 119              		.thumb_func
 120              		.fpu fpv4-sp-d16
 122              	chCondSignal:
 123              	.LVL5:
 124              	.LFB290:
  81:lib/chibios/os/rt/src/chcond.c **** 
  82:lib/chibios/os/rt/src/chcond.c **** /**
  83:lib/chibios/os/rt/src/chcond.c ****  * @brief   Signals one thread that is waiting on the condition variable.
  84:lib/chibios/os/rt/src/chcond.c ****  *
  85:lib/chibios/os/rt/src/chcond.c ****  * @param[in] cp        pointer to the @p condition_variable_t structure
  86:lib/chibios/os/rt/src/chcond.c ****  *
  87:lib/chibios/os/rt/src/chcond.c ****  * @api
  88:lib/chibios/os/rt/src/chcond.c ****  */
  89:lib/chibios/os/rt/src/chcond.c **** void chCondSignal(condition_variable_t *cp) {
 125              		.loc 2 89 45 is_stmt 1 view -0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 0, uses_anonymous_args = 0
  90:lib/chibios/os/rt/src/chcond.c **** 
  91:lib/chibios/os/rt/src/chcond.c ****   chDbgCheck(cp != NULL);
 129              		.loc 2 91 3 view .LVU30
 130              		.loc 2 91 3 view .LVU31
 131              		.loc 2 91 3 view .LVU32
  92:lib/chibios/os/rt/src/chcond.c **** 
  93:lib/chibios/os/rt/src/chcond.c ****   chSysLock();
 132              		.loc 2 93 3 view .LVU33
 133              	.LBB81:
 134              	.LBI81:
 135              		.file 4 "./lib/chibios/os/rt/include/chsys.h"
   1:./lib/chibios/os/rt/include/chsys.h **** /*
   2:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chsys.h **** 
   4:./lib/chibios/os/rt/include/chsys.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chsys.h **** 
   6:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chsys.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chsys.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chsys.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chsys.h **** 
  11:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chsys.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chsys.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chsys.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chsys.h **** 
  16:./lib/chibios/os/rt/include/chsys.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chsys.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chsys.h **** */
  19:./lib/chibios/os/rt/include/chsys.h **** 
  20:./lib/chibios/os/rt/include/chsys.h **** /**
  21:./lib/chibios/os/rt/include/chsys.h ****  * @file    rt/include/chsys.h
  22:./lib/chibios/os/rt/include/chsys.h ****  * @brief   System related macros and structures.
  23:./lib/chibios/os/rt/include/chsys.h ****  *
  24:./lib/chibios/os/rt/include/chsys.h ****  * @addtogroup system
  25:./lib/chibios/os/rt/include/chsys.h ****  * @{
  26:./lib/chibios/os/rt/include/chsys.h ****  */
  27:./lib/chibios/os/rt/include/chsys.h **** 
  28:./lib/chibios/os/rt/include/chsys.h **** #ifndef CHSYS_H
  29:./lib/chibios/os/rt/include/chsys.h **** #define CHSYS_H
  30:./lib/chibios/os/rt/include/chsys.h **** 
  31:./lib/chibios/os/rt/include/chsys.h **** /*lint -sem(chSysHalt, r_no)*/
  32:./lib/chibios/os/rt/include/chsys.h **** 
  33:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chsys.h **** /* Module constants.                                                         */
  35:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chsys.h **** 
  37:./lib/chibios/os/rt/include/chsys.h **** /**
  38:./lib/chibios/os/rt/include/chsys.h ****  * @name    Masks of executable integrity checks.
  39:./lib/chibios/os/rt/include/chsys.h ****  * @{
  40:./lib/chibios/os/rt/include/chsys.h ****  */
  41:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_RLIST                  1U
  42:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_VTLIST                 2U
  43:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_REGISTRY               4U
  44:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_PORT                   8U
  45:./lib/chibios/os/rt/include/chsys.h **** /** @} */
  46:./lib/chibios/os/rt/include/chsys.h **** 
  47:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  48:./lib/chibios/os/rt/include/chsys.h **** /* Module pre-compile time settings.                                         */
  49:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  50:./lib/chibios/os/rt/include/chsys.h **** 
  51:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  52:./lib/chibios/os/rt/include/chsys.h **** /* Derived constants and error checks.                                       */
  53:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  54:./lib/chibios/os/rt/include/chsys.h **** 
  55:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  56:./lib/chibios/os/rt/include/chsys.h **** /* Module data structures and types.                                         */
  57:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  58:./lib/chibios/os/rt/include/chsys.h **** 
  59:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  60:./lib/chibios/os/rt/include/chsys.h **** /* Module macros.                                                            */
  61:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  62:./lib/chibios/os/rt/include/chsys.h **** 
  63:./lib/chibios/os/rt/include/chsys.h **** /**
  64:./lib/chibios/os/rt/include/chsys.h ****  * @name    ISRs abstraction macros
  65:./lib/chibios/os/rt/include/chsys.h ****  * @{
  66:./lib/chibios/os/rt/include/chsys.h ****  */
  67:./lib/chibios/os/rt/include/chsys.h **** /**
  68:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  69:./lib/chibios/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  70:./lib/chibios/os/rt/include/chsys.h ****  *          level for the underlying architecture.
  71:./lib/chibios/os/rt/include/chsys.h ****  *
  72:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  73:./lib/chibios/os/rt/include/chsys.h ****  * @return              Priority range result.
  74:./lib/chibios/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  75:./lib/chibios/os/rt/include/chsys.h ****  *                      does not support priorities.
  76:./lib/chibios/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  77:./lib/chibios/os/rt/include/chsys.h ****  */
  78:./lib/chibios/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_PRIORITY) || defined(__DOXYGEN__)
  79:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio)                                      \
  80:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_PRIORITY(prio)
  81:./lib/chibios/os/rt/include/chsys.h **** #else
  82:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio) false
  83:./lib/chibios/os/rt/include/chsys.h **** #endif
  84:./lib/chibios/os/rt/include/chsys.h **** 
  85:./lib/chibios/os/rt/include/chsys.h **** /**
  86:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  87:./lib/chibios/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  88:./lib/chibios/os/rt/include/chsys.h ****  *          level that cannot preempt the kernel critical zone.
  89:./lib/chibios/os/rt/include/chsys.h ****  *
  90:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  91:./lib/chibios/os/rt/include/chsys.h ****  * @return              Priority range result.
  92:./lib/chibios/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  93:./lib/chibios/os/rt/include/chsys.h ****  *                      does not support priorities.
  94:./lib/chibios/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  95:./lib/chibios/os/rt/include/chsys.h ****  */
  96:./lib/chibios/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_KERNEL_PRIORITY) || defined(__DOXYGEN__)
  97:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio)                               \
  98:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_KERNEL_PRIORITY(prio)
  99:./lib/chibios/os/rt/include/chsys.h **** #else
 100:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio) false
 101:./lib/chibios/os/rt/include/chsys.h **** #endif
 102:./lib/chibios/os/rt/include/chsys.h **** 
 103:./lib/chibios/os/rt/include/chsys.h **** /**
 104:./lib/chibios/os/rt/include/chsys.h ****  * @brief   IRQ handler enter code.
 105:./lib/chibios/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers functions are also declared naked.
 106:./lib/chibios/os/rt/include/chsys.h ****  * @note    On some architectures this macro can be empty.
 107:./lib/chibios/os/rt/include/chsys.h ****  *
 108:./lib/chibios/os/rt/include/chsys.h ****  * @special
 109:./lib/chibios/os/rt/include/chsys.h ****  */
 110:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_PROLOGUE()                                                   \
 111:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_PROLOGUE();                                                      \
 112:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_IRQ_PROLOGUE_HOOK();                                               \
 113:./lib/chibios/os/rt/include/chsys.h ****   _stats_increase_irq();                                                    \
 114:./lib/chibios/os/rt/include/chsys.h ****   _trace_isr_enter(__func__);                                               \
 115:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_enter_isr()
 116:./lib/chibios/os/rt/include/chsys.h **** 
 117:./lib/chibios/os/rt/include/chsys.h **** /**
 118:./lib/chibios/os/rt/include/chsys.h ****  * @brief   IRQ handler exit code.
 119:./lib/chibios/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers function are also declared naked.
 120:./lib/chibios/os/rt/include/chsys.h ****  * @note    This macro usually performs the final reschedule by using
 121:./lib/chibios/os/rt/include/chsys.h ****  *          @p chSchIsPreemptionRequired() and @p chSchDoReschedule().
 122:./lib/chibios/os/rt/include/chsys.h ****  *
 123:./lib/chibios/os/rt/include/chsys.h ****  * @special
 124:./lib/chibios/os/rt/include/chsys.h ****  */
 125:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_EPILOGUE()                                                   \
 126:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_leave_isr();                                                   \
 127:./lib/chibios/os/rt/include/chsys.h ****   _trace_isr_leave(__func__);                                               \
 128:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_IRQ_EPILOGUE_HOOK();                                               \
 129:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_EPILOGUE()
 130:./lib/chibios/os/rt/include/chsys.h **** 
 131:./lib/chibios/os/rt/include/chsys.h **** /**
 132:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Standard normal IRQ handler declaration.
 133:./lib/chibios/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 134:./lib/chibios/os/rt/include/chsys.h ****  *          port implementation.
 135:./lib/chibios/os/rt/include/chsys.h ****  *
 136:./lib/chibios/os/rt/include/chsys.h ****  * @special
 137:./lib/chibios/os/rt/include/chsys.h ****  */
 138:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_HANDLER(id) PORT_IRQ_HANDLER(id)
 139:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 140:./lib/chibios/os/rt/include/chsys.h **** 
 141:./lib/chibios/os/rt/include/chsys.h **** /**
 142:./lib/chibios/os/rt/include/chsys.h ****  * @name    Fast ISRs abstraction macros
 143:./lib/chibios/os/rt/include/chsys.h ****  * @{
 144:./lib/chibios/os/rt/include/chsys.h ****  */
 145:./lib/chibios/os/rt/include/chsys.h **** /**
 146:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Standard fast IRQ handler declaration.
 147:./lib/chibios/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 148:./lib/chibios/os/rt/include/chsys.h ****  *          port implementation.
 149:./lib/chibios/os/rt/include/chsys.h ****  * @note    Not all architectures support fast interrupts.
 150:./lib/chibios/os/rt/include/chsys.h ****  *
 151:./lib/chibios/os/rt/include/chsys.h ****  * @special
 152:./lib/chibios/os/rt/include/chsys.h ****  */
 153:./lib/chibios/os/rt/include/chsys.h **** #define CH_FAST_IRQ_HANDLER(id) PORT_FAST_IRQ_HANDLER(id)
 154:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 155:./lib/chibios/os/rt/include/chsys.h **** 
 156:./lib/chibios/os/rt/include/chsys.h **** /**
 157:./lib/chibios/os/rt/include/chsys.h ****  * @name    Time conversion utilities for the realtime counter
 158:./lib/chibios/os/rt/include/chsys.h ****  * @{
 159:./lib/chibios/os/rt/include/chsys.h ****  */
 160:./lib/chibios/os/rt/include/chsys.h **** /**
 161:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Seconds to realtime counter.
 162:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from seconds to realtime counter cycles.
 163:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 164:./lib/chibios/os/rt/include/chsys.h ****  *
 165:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 166:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] sec       number of seconds
 167:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 168:./lib/chibios/os/rt/include/chsys.h ****  *
 169:./lib/chibios/os/rt/include/chsys.h ****  * @api
 170:./lib/chibios/os/rt/include/chsys.h ****  */
 171:./lib/chibios/os/rt/include/chsys.h **** #define S2RTC(freq, sec) ((freq) * (sec))
 172:./lib/chibios/os/rt/include/chsys.h **** 
 173:./lib/chibios/os/rt/include/chsys.h **** /**
 174:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Milliseconds to realtime counter.
 175:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from milliseconds to realtime counter cycles.
 176:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 177:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 178:./lib/chibios/os/rt/include/chsys.h ****  *
 179:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 180:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] msec      number of milliseconds
 181:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 182:./lib/chibios/os/rt/include/chsys.h ****  *
 183:./lib/chibios/os/rt/include/chsys.h ****  * @api
 184:./lib/chibios/os/rt/include/chsys.h ****  */
 185:./lib/chibios/os/rt/include/chsys.h **** #define MS2RTC(freq, msec) (rtcnt_t)((((freq) + 999UL) / 1000UL) * (msec))
 186:./lib/chibios/os/rt/include/chsys.h **** 
 187:./lib/chibios/os/rt/include/chsys.h **** /**
 188:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Microseconds to realtime counter.
 189:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from microseconds to realtime counter cycles.
 190:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 191:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 192:./lib/chibios/os/rt/include/chsys.h ****  *
 193:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 194:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] usec      number of microseconds
 195:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 196:./lib/chibios/os/rt/include/chsys.h ****  *
 197:./lib/chibios/os/rt/include/chsys.h ****  * @api
 198:./lib/chibios/os/rt/include/chsys.h ****  */
 199:./lib/chibios/os/rt/include/chsys.h **** #define US2RTC(freq, usec) (rtcnt_t)((((freq) + 999999UL) / 1000000UL) * (usec))
 200:./lib/chibios/os/rt/include/chsys.h **** 
 201:./lib/chibios/os/rt/include/chsys.h **** /**
 202:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to seconds.
 203:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to seconds.
 204:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next second boundary.
 205:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 206:./lib/chibios/os/rt/include/chsys.h ****  *
 207:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 208:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 209:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of seconds.
 210:./lib/chibios/os/rt/include/chsys.h ****  *
 211:./lib/chibios/os/rt/include/chsys.h ****  * @api
 212:./lib/chibios/os/rt/include/chsys.h ****  */
 213:./lib/chibios/os/rt/include/chsys.h **** #define RTC2S(freq, n) ((((n) - 1UL) / (freq)) + 1UL)
 214:./lib/chibios/os/rt/include/chsys.h **** 
 215:./lib/chibios/os/rt/include/chsys.h **** /**
 216:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to milliseconds.
 217:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to milliseconds.
 218:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next millisecond boundary.
 219:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 220:./lib/chibios/os/rt/include/chsys.h ****  *
 221:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 222:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 223:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of milliseconds.
 224:./lib/chibios/os/rt/include/chsys.h ****  *
 225:./lib/chibios/os/rt/include/chsys.h ****  * @api
 226:./lib/chibios/os/rt/include/chsys.h ****  */
 227:./lib/chibios/os/rt/include/chsys.h **** #define RTC2MS(freq, n) ((((n) - 1UL) / ((freq) / 1000UL)) + 1UL)
 228:./lib/chibios/os/rt/include/chsys.h **** 
 229:./lib/chibios/os/rt/include/chsys.h **** /**
 230:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to microseconds.
 231:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to microseconds.
 232:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next microsecond boundary.
 233:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 234:./lib/chibios/os/rt/include/chsys.h ****  *
 235:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 236:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 237:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of microseconds.
 238:./lib/chibios/os/rt/include/chsys.h ****  *
 239:./lib/chibios/os/rt/include/chsys.h ****  * @api
 240:./lib/chibios/os/rt/include/chsys.h ****  */
 241:./lib/chibios/os/rt/include/chsys.h **** #define RTC2US(freq, n) ((((n) - 1UL) / ((freq) / 1000000UL)) + 1UL)
 242:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 243:./lib/chibios/os/rt/include/chsys.h **** 
 244:./lib/chibios/os/rt/include/chsys.h **** /**
 245:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Returns the current value of the system real time counter.
 246:./lib/chibios/os/rt/include/chsys.h ****  * @note    This function is only available if the port layer supports the
 247:./lib/chibios/os/rt/include/chsys.h ****  *          option @p PORT_SUPPORTS_RT.
 248:./lib/chibios/os/rt/include/chsys.h ****  *
 249:./lib/chibios/os/rt/include/chsys.h ****  * @return              The value of the system realtime counter of
 250:./lib/chibios/os/rt/include/chsys.h ****  *                      type rtcnt_t.
 251:./lib/chibios/os/rt/include/chsys.h ****  *
 252:./lib/chibios/os/rt/include/chsys.h ****  * @xclass
 253:./lib/chibios/os/rt/include/chsys.h ****  */
 254:./lib/chibios/os/rt/include/chsys.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 255:./lib/chibios/os/rt/include/chsys.h **** #define chSysGetRealtimeCounterX() (rtcnt_t)port_rt_get_counter_value()
 256:./lib/chibios/os/rt/include/chsys.h **** #endif
 257:./lib/chibios/os/rt/include/chsys.h **** 
 258:./lib/chibios/os/rt/include/chsys.h **** /**
 259:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Performs a context switch.
 260:./lib/chibios/os/rt/include/chsys.h ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 261:./lib/chibios/os/rt/include/chsys.h ****  *          itself or from within the port layer.
 262:./lib/chibios/os/rt/include/chsys.h ****  *
 263:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] ntp       the thread to be switched in
 264:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] otp       the thread to be switched out
 265:./lib/chibios/os/rt/include/chsys.h ****  *
 266:./lib/chibios/os/rt/include/chsys.h ****  * @special
 267:./lib/chibios/os/rt/include/chsys.h ****  */
 268:./lib/chibios/os/rt/include/chsys.h **** #define chSysSwitch(ntp, otp) {                                             \
 269:./lib/chibios/os/rt/include/chsys.h ****                                                                             \
 270:./lib/chibios/os/rt/include/chsys.h ****   _trace_switch(ntp, otp);                                                  \
 271:./lib/chibios/os/rt/include/chsys.h ****   _stats_ctxswc(ntp, otp);                                                  \
 272:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_CONTEXT_SWITCH_HOOK(ntp, otp);                                     \
 273:./lib/chibios/os/rt/include/chsys.h ****   port_switch(ntp, otp);                                                    \
 274:./lib/chibios/os/rt/include/chsys.h **** }
 275:./lib/chibios/os/rt/include/chsys.h **** 
 276:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 277:./lib/chibios/os/rt/include/chsys.h **** /* External declarations.                                                    */
 278:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 279:./lib/chibios/os/rt/include/chsys.h **** 
 280:./lib/chibios/os/rt/include/chsys.h **** #if !defined(__DOXYGEN__)
 281:./lib/chibios/os/rt/include/chsys.h **** extern stkalign_t ch_idle_thread_wa[];
 282:./lib/chibios/os/rt/include/chsys.h **** #endif
 283:./lib/chibios/os/rt/include/chsys.h **** 
 284:./lib/chibios/os/rt/include/chsys.h **** #ifdef __cplusplus
 285:./lib/chibios/os/rt/include/chsys.h **** extern "C" {
 286:./lib/chibios/os/rt/include/chsys.h **** #endif
 287:./lib/chibios/os/rt/include/chsys.h ****   void chSysInit(void);
 288:./lib/chibios/os/rt/include/chsys.h ****   bool chSysIntegrityCheckI(unsigned testmask);
 289:./lib/chibios/os/rt/include/chsys.h ****   void chSysTimerHandlerI(void);
 290:./lib/chibios/os/rt/include/chsys.h ****   syssts_t chSysGetStatusAndLockX(void);
 291:./lib/chibios/os/rt/include/chsys.h ****   void chSysRestoreStatusX(syssts_t sts);
 292:./lib/chibios/os/rt/include/chsys.h **** #if PORT_SUPPORTS_RT == TRUE
 293:./lib/chibios/os/rt/include/chsys.h ****   bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end);
 294:./lib/chibios/os/rt/include/chsys.h ****   void chSysPolledDelayX(rtcnt_t cycles);
 295:./lib/chibios/os/rt/include/chsys.h **** #endif
 296:./lib/chibios/os/rt/include/chsys.h **** #ifdef __cplusplus
 297:./lib/chibios/os/rt/include/chsys.h **** }
 298:./lib/chibios/os/rt/include/chsys.h **** #endif
 299:./lib/chibios/os/rt/include/chsys.h **** 
 300:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 301:./lib/chibios/os/rt/include/chsys.h **** /* Module inline functions.                                                  */
 302:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 303:./lib/chibios/os/rt/include/chsys.h **** 
 304:./lib/chibios/os/rt/include/chsys.h **** /**
 305:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to the maximum level.
 306:./lib/chibios/os/rt/include/chsys.h ****  * @details All the maskable interrupt sources are disabled regardless their
 307:./lib/chibios/os/rt/include/chsys.h ****  *          hardware priority.
 308:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 309:./lib/chibios/os/rt/include/chsys.h ****  *
 310:./lib/chibios/os/rt/include/chsys.h ****  * @special
 311:./lib/chibios/os/rt/include/chsys.h ****  */
 312:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysDisable(void) {
 313:./lib/chibios/os/rt/include/chsys.h **** 
 314:./lib/chibios/os/rt/include/chsys.h ****   port_disable();
 315:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_disable();
 316:./lib/chibios/os/rt/include/chsys.h **** }
 317:./lib/chibios/os/rt/include/chsys.h **** 
 318:./lib/chibios/os/rt/include/chsys.h **** /**
 319:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to system level.
 320:./lib/chibios/os/rt/include/chsys.h ****  * @details The interrupt sources that should not be able to preempt the kernel
 321:./lib/chibios/os/rt/include/chsys.h ****  *          are disabled, interrupt sources with higher priority are still
 322:./lib/chibios/os/rt/include/chsys.h ****  *          enabled.
 323:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 324:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysLock(), the @p chSysLock()
 325:./lib/chibios/os/rt/include/chsys.h ****  *          could do more than just disable the interrupts.
 326:./lib/chibios/os/rt/include/chsys.h ****  *
 327:./lib/chibios/os/rt/include/chsys.h ****  * @special
 328:./lib/chibios/os/rt/include/chsys.h ****  */
 329:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysSuspend(void) {
 330:./lib/chibios/os/rt/include/chsys.h **** 
 331:./lib/chibios/os/rt/include/chsys.h ****   port_suspend();
 332:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_suspend();
 333:./lib/chibios/os/rt/include/chsys.h **** }
 334:./lib/chibios/os/rt/include/chsys.h **** 
 335:./lib/chibios/os/rt/include/chsys.h **** /**
 336:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Lowers the system interrupt priority mask to user level.
 337:./lib/chibios/os/rt/include/chsys.h ****  * @details All the interrupt sources are enabled.
 338:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 339:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysUnlock(), the
 340:./lib/chibios/os/rt/include/chsys.h ****  *          @p chSysUnlock() could do more than just enable the interrupts.
 341:./lib/chibios/os/rt/include/chsys.h ****  *
 342:./lib/chibios/os/rt/include/chsys.h ****  * @special
 343:./lib/chibios/os/rt/include/chsys.h ****  */
 344:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysEnable(void) {
 345:./lib/chibios/os/rt/include/chsys.h **** 
 346:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_enable();
 347:./lib/chibios/os/rt/include/chsys.h ****   port_enable();
 348:./lib/chibios/os/rt/include/chsys.h **** }
 349:./lib/chibios/os/rt/include/chsys.h **** 
 350:./lib/chibios/os/rt/include/chsys.h **** /**
 351:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state.
 352:./lib/chibios/os/rt/include/chsys.h ****  *
 353:./lib/chibios/os/rt/include/chsys.h ****  * @special
 354:./lib/chibios/os/rt/include/chsys.h ****  */
 355:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysLock(void) {
 136              		.loc 4 355 20 view .LVU34
 356:./lib/chibios/os/rt/include/chsys.h **** 
 357:./lib/chibios/os/rt/include/chsys.h ****   port_lock();
 137              		.loc 4 357 3 view .LVU35
 138              	.LBB82:
 139              	.LBI82:
 140              		.file 5 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
   1:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*
   2:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
   4:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
   6:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     (at your option) any later version.
  10:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  11:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  16:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** */
  19:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  20:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  21:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @file    chcore_v7m.h
  22:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   ARMv7-M architecture port macros and structures.
  23:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
  24:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @addtogroup ARMCMx_V7M_CORE
  25:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
  26:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  27:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  28:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifndef CHCORE_V7M_H
  29:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CHCORE_V7M_H
  30:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  31:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  32:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  34:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  35:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  36:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @name    Port Capabilities and Constants
  37:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
  38:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  39:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  40:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   This port supports a realtime counter.
  41:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  42:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SUPPORTS_RT                TRUE
  43:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  44:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  45:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Natural alignment constant.
  46:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the minimum alignment for pointer-size variables.
  47:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  48:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_NATURAL_ALIGN              sizeof (void *)
  49:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  50:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  51:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Stack alignment constant.
  52:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the alignment required for the stack pointer.
  53:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  54:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_STACK_ALIGN                sizeof (stkalign_t)
  55:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  56:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  57:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Working Areas alignment constant.
  58:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the alignment to be enforced for thread working areas.
  59:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  60:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA_ALIGN         ((PORT_ENABLE_GUARD_PAGES == TRUE) ?\
  61:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                          32U : PORT_STACK_ALIGN)
  62:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /** @} */
  63:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  64:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  65:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Disabled value for BASEPRI register.
  66:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  67:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_BASEPRI_DISABLED         0U
  68:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  69:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  70:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module pre-compile time settings.                                         */
  71:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  72:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  73:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  74:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Implements a syscall interface on SVC.
  75:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  76:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_USE_SYSCALL) || defined(__DOXYGEN__)
  77:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_USE_SYSCALL                FALSE
  78:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
  79:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  80:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  81:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Number of MPU regions to be saved/restored during context switch.
  82:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The first region is always region zero.
  83:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The use of this option has an overhead of 8 bytes for each
  84:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          region for each thread.
  85:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Allowed values are 0..4, zero means none.
  86:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  87:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_SWITCHED_REGIONS_NUMBER) || defined(__DOXYGEN__)
  88:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SWITCHED_REGIONS_NUMBER    0
  89:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
  90:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  91:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  92:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Enables stack overflow guard pages using MPU.
  93:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    This option can only be enabled if also option
  94:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CH_DBG_ENABLE_STACK_CHECK is enabled.
  95:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The use of this option has an overhead of 32 bytes for each
  96:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          thread.
  97:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  98:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_ENABLE_GUARD_PAGES) || defined(__DOXYGEN__)
  99:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ENABLE_GUARD_PAGES         FALSE
 100:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 101:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 102:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 103:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   MPU region to be used to stack guards.
 104:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Make sure this region is not included in the
 105:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p PORT_SWITCHED_REGIONS_NUMBER regions range.
 106:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 107:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_USE_GUARD_MPU_REGION) || defined(__DOXYGEN__)
 108:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_USE_GUARD_MPU_REGION       MPU_REGION_7
 109:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 110:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 111:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 112:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Stack size for the system idle thread.
 113:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This size depends on the idle thread implementation, usually
 114:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          the idle thread should take no more space than those reserved
 115:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 116:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    In this port it is set to 16 because the idle thread does have
 117:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          a stack frame when compiling without optimizations. You may
 118:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          reduce this value to zero when compiling with optimizations.
 119:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 120:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 121:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IDLE_THREAD_STACK_SIZE     16
 122:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 123:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 124:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 125:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 126:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This constant is used in the calculation of the correct working
 127:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          area size.
 128:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    In this port this value is conservatively set to 64 because the
 129:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          function @p chSchDoReschedule() can have a stack frame, especially
 130:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          with compiler optimizations disabled. The value can be reduced
 131:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          when compiler optimizations are enabled.
 132:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 133:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 134:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INT_REQUIRED_STACK         64
 135:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 136:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 137:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 138:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Enables the use of the WFI instruction in the idle thread loop.
 139:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 140:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_ENABLE_WFI_IDLE)
 141:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_ENABLE_WFI_IDLE          FALSE
 142:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 143:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 144:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 145:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   FPU support in context switch.
 146:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details Activating this option activates the FPU support in the kernel.
 147:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 148:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_USE_FPU)
 149:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_USE_FPU                  CORTEX_HAS_FPU
 150:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_USE_FPU == TRUE) && (CORTEX_HAS_FPU == FALSE)
 151:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* This setting requires an FPU presence check in case it is externally
 152:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    redefined.*/
 153:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "the selected core does not have an FPU"
 154:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 155:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 156:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 157:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Simplified priority handling flag.
 158:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details Activating this option makes the Kernel work in compact mode.
 159:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          In compact mode interrupts are disabled globally instead of
 160:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          raising the priority mask to some intermediate level.
 161:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 162:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_SIMPLIFIED_PRIORITY)
 163:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_SIMPLIFIED_PRIORITY      FALSE
 164:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 165:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 166:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 167:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   SVCALL handler priority.
 168:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The default SVCALL handler priority is defaulted to
 169:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAXIMUM_PRIORITY+1, this reserves the
 170:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAXIMUM_PRIORITY priority level as fast interrupts
 171:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          priority level.
 172:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 173:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_PRIORITY_SVCALL)
 174:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIORITY_SVCALL          (CORTEX_MAXIMUM_PRIORITY + 1U)
 175:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif !PORT_IRQ_IS_VALID_PRIORITY(CORTEX_PRIORITY_SVCALL)
 176:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* If it is externally redefined then better perform a validity check on it.*/
 177:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "invalid priority level specified for CORTEX_PRIORITY_SVCALL"
 178:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 179:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 180:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 181:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   NVIC PRIGROUP initialization expression.
 182:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details The default assigns all available priority bits as preemption
 183:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          priority with no sub-priority.
 184:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 185:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_PRIGROUP_INIT) || defined(__DOXYGEN__)
 186:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIGROUP_INIT            (7 - CORTEX_PRIORITY_BITS)
 187:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 188:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 189:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 190:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Derived constants and error checks.                                       */
 191:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 192:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 193:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER < 0) || (PORT_SWITCHED_REGIONS_NUMBER > 4)
 194:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "invalid PORT_SWITCHED_REGIONS_NUMBER value"
 195:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 196:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 197:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(_FROM_ASM_)
 198:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 199:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   MPU guard page size.
 200:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 201:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == TRUE) || defined(__DOXYGEN__)
 202:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_DBG_ENABLE_STACK_CHECK == FALSE
 203:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "PORT_ENABLE_GUARD_PAGES requires CH_DBG_ENABLE_STACK_CHECK"
 204:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 205:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if __MPU_PRESENT == 0
 206:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "MPU not present in current device"
 207:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 208:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_GUARD_PAGE_SIZE          32U
 209:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 210:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_GUARD_PAGE_SIZE          0U
 211:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 212:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* !defined(_FROM_ASM_) */
 213:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 214:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 215:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @name    Architecture and Compiler
 216:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
 217:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 218:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_MODEL == 3) || defined(__DOXYGEN__)
 219:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 220:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM3)
 221:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM3 not defined"
 222:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 223:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 224:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM3 == FALSE
 225:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "ChibiOS Cortex-M3 port not licensed"
 226:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 227:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 228:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 229:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Macro defining the specific ARM architecture.
 230:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 231:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_ARM_v7M
 232:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 233:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 234:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Name of the implemented architecture.
 235:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 236:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_NAME          "ARMv7-M"
 237:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 238:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 239:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Name of the architecture variant.
 240:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 241:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == FALSE) || defined(__DOXYGEN__)
 242:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_CORE_VARIANT_NAME        "Cortex-M3"
 243:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 244:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_CORE_VARIANT_NAME        "Cortex-M3 (MPU)"
 245:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 246:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 247:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_MODEL == 4)
 248:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 249:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM4)
 250:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM4 not defined"
 251:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 252:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 253:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM4 == FALSE
 254:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #error "ChibiOS Cortex-M4 port not licensed"
 255:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 256:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 257:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_ARM_v7ME
 258:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_NAME        "ARMv7E-M"
 259:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CORTEX_USE_FPU
 260:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 261:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4F"
 262:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 263:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4F (MPU)"
 264:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 265:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #else
 266:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 267:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4"
 268:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 269:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4 (MPU)"
 270:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 271:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 272:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 273:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_MODEL == 7)
 274:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 275:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM7)
 276:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM7 not defined"
 277:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 278:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 279:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM7 == FALSE
 280:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "ChibiOS Cortex-M7 port not licensed"
 281:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 282:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 283:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_ARM_v7ME
 284:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_NAME        "ARMv7E-M"
 285:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CORTEX_USE_FPU
 286:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 287:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7F"
 288:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 289:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7F (MPU)"
 290:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 291:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #else
 292:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 293:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7"
 294:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 295:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7 (MPU)"
 296:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 297:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 298:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 299:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 300:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 301:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Port-specific information string.
 302:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 303:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
 304:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INFO                       "Advanced kernel mode"
 305:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 306:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INFO                       "Compact kernel mode"
 307:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 308:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /** @} */
 309:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 310:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
 311:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 312:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Maximum usable priority for normal ISRs.
 313:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 314:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_MAX_KERNEL_PRIORITY      (CORTEX_PRIORITY_SVCALL + 1U)
 315:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 316:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 317:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   BASEPRI level within kernel lock.
 318:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 319:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_BASEPRI_KERNEL                                               \
 320:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   CORTEX_PRIO_MASK(CORTEX_MAX_KERNEL_PRIORITY)
 321:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 322:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 323:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_MAX_KERNEL_PRIORITY      0U
 324:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 325:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 326:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 327:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   PendSV priority level.
 328:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    This priority is enforced to be equal to
 329:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAX_KERNEL_PRIORITY, this handler always have the
 330:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          highest priority that cannot preempt the kernel.
 331:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 332:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIORITY_PENDSV          CORTEX_MAX_KERNEL_PRIORITY
 333:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 334:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 335:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module data structures and types.                                         */
 336:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 337:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 338:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* The following code is not processed when the file is included from an
 339:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    asm module.*/
 340:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(_FROM_ASM_)
 341:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 342:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* The documentation of the following declarations is in chconf.h in order
 343:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    to not have duplicated structure names into the documentation.*/
 344:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(__DOXYGEN__)
 345:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_extctx {
 346:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r0;
 347:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r1;
 348:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r2;
 349:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r3;
 350:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r12;
 351:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      lr_thd;
 352:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      pc;
 353:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      xpsr;
 354:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_USE_FPU
 355:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s0;
 356:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s1;
 357:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s2;
 358:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s3;
 359:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s4;
 360:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s5;
 361:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s6;
 362:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s7;
 363:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s8;
 364:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s9;
 365:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s10;
 366:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s11;
 367:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s12;
 368:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s13;
 369:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s14;
 370:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s15;
 371:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      fpscr;
 372:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      reserved;
 373:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_USE_FPU */
 374:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 375:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 376:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 377:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 378:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Link context structure.
 379:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This structure is used when there is the need to save extra
 380:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          context information that is not part of the registers stacked
 381:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          in HW.
 382:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 383:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_linkctx {
 384:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t              control;
 385:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_extctx    *ectxp;
 386:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 387:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 388:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 389:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_intctx {
 390:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER > 0) || defined(__DOXYGEN__)
 391:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct {
 392:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t    rbar;
 393:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t    rasr;
 394:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   } regions[PORT_SWITCHED_REGIONS_NUMBER];
 395:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 396:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_USE_FPU
 397:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s16;
 398:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s17;
 399:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s18;
 400:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s19;
 401:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s20;
 402:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s21;
 403:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s22;
 404:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s23;
 405:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s24;
 406:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s25;
 407:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s26;
 408:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s27;
 409:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s28;
 410:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s29;
 411:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s30;
 412:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s31;
 413:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_USE_FPU */
 414:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r4;
 415:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r5;
 416:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r6;
 417:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r7;
 418:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r8;
 419:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r9;
 420:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r10;
 421:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r11;
 422:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      lr;
 423:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 424:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 425:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_context {
 426:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_intctx    *sp;
 427:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 428:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct {
 429:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t            psp;
 430:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     const void          *p;
 431:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   } syscall;
 432:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 433:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 434:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* !defined(__DOXYGEN__) */
 435:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 436:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 437:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module macros.                                                            */
 438:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 439:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 440:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* By default threads have no syscall context information.*/
 441:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 442:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop)                              \
 443:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.syscall.psp = (uint32_t)(wtop);                                 \
 444:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.syscall.p   = NULL;
 445:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 446:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop)
 447:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 448:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 449:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* By default threads have all regions disabled.*/
 450:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER == 0) || defined(__DOXYGEN__)
 451:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)
 452:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 1) || defined(__DOXYGEN__)
 453:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 454:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 455:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U
 456:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 2) || defined(__DOXYGEN__)
 457:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 458:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 459:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 460:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 461:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U
 462:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 3) || defined(__DOXYGEN__)
 463:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 464:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 465:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 466:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 467:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U;                                      \
 468:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rbar  = 0U;                                      \
 469:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rasr  = 0U
 470:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 4) || defined(__DOXYGEN__)
 471:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 472:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 473:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 474:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 475:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U;                                      \
 476:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rbar  = 0U;                                      \
 477:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rasr  = 0U;                                      \
 478:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[3].rbar  = 0U;                                      \
 479:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[3].rasr  = 0U
 480:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 481:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 482:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 483:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 484:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 485:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This code usually setup the context switching frame represented
 486:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          by an @p port_intctx structure.
 487:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 488:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 489:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                 \
 490:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                         sizeof (struct port_intctx));       \
 491:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->r4 = (uint32_t)(pf);                                        \
 492:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->r5 = (uint32_t)(arg);                                       \
 493:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->lr = (uint32_t)_port_thread_start;                          \
 494:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __PORT_SETUP_CONTEXT_MPU(tp);                                             \
 495:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop);                                   \
 496:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 497:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 498:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** //  __PORT_SETUP_CONTEXT_MPU(tp)
 499:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 500:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 501:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Computes the thread working area global size.
 502:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    There is no need to perform alignments in this macro.
 503:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 504:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WA_SIZE(n) ((size_t)PORT_GUARD_PAGE_SIZE +                     \
 505:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          sizeof (struct port_intctx) +                      \
 506:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          sizeof (struct port_extctx) +                      \
 507:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          (size_t)(n) +                                      \
 508:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          (size_t)PORT_INT_REQUIRED_STACK)
 509:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 510:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 511:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Static working area allocation.
 512:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro is used to allocate a static thread working area
 513:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          aligned as both position and size.
 514:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 515:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] s         the name to be assigned to the stack array
 516:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] n         the stack size to be assigned to the thread
 517:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 518:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == FALSE) || defined(__DOXYGEN__)
 519:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA(s, n)                                             \
 520:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 521:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 522:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA(s, n)                                             \
 523:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   ALIGNED_VAR(32) stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 524:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 525:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 526:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 527:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ prologue code.
 528:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 529:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          enabled to invoke system APIs.
 530:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 531:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_PROLOGUE()
 532:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 533:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 534:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ epilogue code.
 535:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 536:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          enabled to invoke system APIs.
 537:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 538:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_EPILOGUE() _port_irq_epilogue()
 539:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 540:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 541:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ handler function declaration.
 542:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    @p id can be a function name or a vector number depending on the
 543:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          port implementation.
 544:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 545:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 546:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_HANDLER(id) extern "C" void id(void)
 547:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 548:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_HANDLER(id) void id(void)
 549:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 550:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 551:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 552:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Fast IRQ handler function declaration.
 553:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    @p id can be a function name or a vector number depending on the
 554:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          port implementation.
 555:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 556:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 557:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_FAST_IRQ_HANDLER(id) extern "C" void id(void)
 558:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 559:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_FAST_IRQ_HANDLER(id) void id(void)
 560:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 561:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 562:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 563:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Performs a context switch between two threads.
 564:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This is the most critical code in any port, this function
 565:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          is responsible for the context switch between 2 threads.
 566:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 567:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          switch performance so optimize here as much as you can.
 568:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 569:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] ntp       the thread to be switched in
 570:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] otp       the thread to be switched out
 571:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 572:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CH_DBG_ENABLE_STACK_CHECK == FALSE) || defined(__DOXYGEN__)
 573:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) _port_switch(ntp, otp)
 574:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 575:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if PORT_ENABLE_GUARD_PAGES == FALSE
 576:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) {                                             \
 577:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_intctx *r13 = (struct port_intctx *)__get_PSP();              \
 578:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   if ((stkalign_t *)(r13 - 1) < (otp)->wabase) {                            \
 579:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     chSysHalt("stack overflow");                                            \
 580:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   }                                                                         \
 581:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   _port_switch(ntp, otp);                                                   \
 582:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 583:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 584:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) {                                             \
 585:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   _port_switch(ntp, otp);                                                   \
 586:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                                                             \
 587:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   /* Setting up the guard page for the switched-in thread.*/                \
 588:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   mpuSetRegionAddress(PORT_USE_GUARD_MPU_REGION,                            \
 589:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                       chThdGetSelfX()->wabase);                             \
 590:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 591:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 592:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 593:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 594:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 595:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* External declarations.                                                    */
 596:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 597:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 598:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 599:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** extern "C" {
 600:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 601:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void port_init(void);
 602:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_irq_epilogue(void);
 603:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 604:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_thread_start(void);
 605:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_switch_from_isr(void);
 606:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_exit_from_isr(void);
 607:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if PORT_USE_SYSCALL == TRUE
 608:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void port_unprivileged_jump(uint32_t pc, uint32_t psp);
 609:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 610:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 611:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 612:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 613:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 614:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 615:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module inline functions.                                                  */
 616:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 617:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 618:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 619:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Returns a word encoding the current interrupts status.
 620:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 621:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The interrupts status.
 622:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 623:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE syssts_t port_get_irq_status(void) {
 624:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   syssts_t sts;
 625:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 626:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 627:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   sts = (syssts_t)__get_BASEPRI();
 628:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 629:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   sts = (syssts_t)__get_PRIMASK();
 630:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 631:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return sts;
 632:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 633:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 634:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 635:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Checks the interrupt status.
 636:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 637:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] sts       the interrupt status word
 638:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 639:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The interrupt status.
 640:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval false        the word specified a disabled interrupts status.
 641:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval true         the word specified an enabled interrupts status.
 642:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 643:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE bool port_irq_enabled(syssts_t sts) {
 644:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 645:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 646:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return sts == (syssts_t)CORTEX_BASEPRI_DISABLED;
 647:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 648:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return (sts & (syssts_t)1) == (syssts_t)0;
 649:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 650:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 651:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 652:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 653:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Determines the current execution context.
 654:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 655:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The execution context.
 656:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval false        not running in ISR mode.
 657:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval true         running in ISR mode.
 658:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 659:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE bool port_is_isr_context(void) {
 660:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 661:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 662:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 663:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 664:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 665:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-lock action.
 666:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function raises the base priority to kernel
 667:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 668:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_lock(void) {
 141              		.loc 5 669 27 view .LVU36
 670:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 671:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 672:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 673:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if __CM7_REV <= 1
 674:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __disable_irq();
 675:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 676:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
 142              		.loc 5 677 3 view .LVU37
 143              	.LBB83:
 144              	.LBI83:
 145              		.file 6 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /*
   8:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  10:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  12:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  16:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  18:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * limitations under the License.
  23:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
  24:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  25:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  28:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  38:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  39:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  43:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  46:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  49:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif                                           
  52:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  55:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __USED
  56:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  58:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  61:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  64:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  67:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  70:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  78:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  86:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  94:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 102:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 110:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 113:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 116:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 117:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 118:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 122:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 123:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 124:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 125:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 129:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 131:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 133:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 134:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 135:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 136:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 140:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 142:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 144:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 145:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 146:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 147:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Control Register value
 150:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 151:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 153:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 154:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 155:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 157:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 158:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 159:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 160:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 162:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 166:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 168:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 169:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 170:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 172:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 173:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 174:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 175:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 176:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 177:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 181:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 183:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 185:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 186:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 187:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 189:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 193:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 195:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 197:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 198:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 199:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 200:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 201:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 205:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 207:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 208:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 209:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 211:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 212:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 213:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 214:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 215:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 219:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 221:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 222:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 223:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 225:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 226:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 227:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 228:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 229:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 233:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 235:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 236:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 237:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 239:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 240:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 241:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 242:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 243:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 247:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 249:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 250:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 251:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 253:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 254:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 255:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 256:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 258:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 262:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 264:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 265:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 266:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 268:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 269:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 270:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 271:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 272:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 273:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 277:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 279:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 281:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 282:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 283:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 285:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 289:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 291:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 293:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 294:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 295:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 296:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 297:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 301:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 303:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 304:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 305:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 307:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 308:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 309:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 310:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 312:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 316:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 318:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 319:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 320:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 322:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 323:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 324:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 325:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 326:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 327:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 331:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 333:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 335:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 336:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 337:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 339:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 343:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 345:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 347:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 348:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 349:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 350:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 352:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               SP Register value
 355:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 356:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 358:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 359:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 360:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 362:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 363:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 364:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 365:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 366:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 370:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 372:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 374:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 375:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 376:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 377:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 378:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 382:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 384:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 385:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 386:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 388:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 389:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 390:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 391:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 393:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 397:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 399:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 400:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 401:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 403:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 404:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 405:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 406:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 407:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 408:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 412:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 414:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 416:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 417:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 418:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 420:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 424:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 426:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 428:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 429:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 430:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 431:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 435:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 439:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 441:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 443:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 444:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 445:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 446:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 450:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 452:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 454:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 455:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 456:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 457:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 461:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 463:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 464:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 465:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 467:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 468:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 469:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 470:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 472:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 476:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 478:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 479:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 480:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 482:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 483:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 484:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 485:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 486:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 487:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 146              		.loc 6 491 27 view .LVU38
 147              	.LBB84:
 492:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 493:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 148              		.loc 6 493 3 view .LVU39
 149              	.LBE84:
 150              	.LBE83:
 151              	.LBE82:
 152              	.LBE81:
  89:lib/chibios/os/rt/src/chcond.c **** 
 153              		.loc 2 89 45 is_stmt 0 view .LVU40
 154 0000 08B5     		push	{r3, lr}
 155              		.cfi_def_cfa_offset 8
 156              		.cfi_offset 3, -8
 157              		.cfi_offset 14, -4
 158              	.LBB88:
 159              	.LBB87:
 160              	.LBB86:
 161              	.LBB85:
 162              		.loc 6 493 3 view .LVU41
 163 0002 2023     		movs	r3, #32
 164              		.syntax unified
 165              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 166 0004 83F31188 		MSR basepri, r3
 167              	@ 0 "" 2
 168              	.LVL6:
 169              		.loc 6 493 3 view .LVU42
 170              		.thumb
 171              		.syntax unified
 172              	.LBE85:
 173              	.LBE86:
 174              	.LBE87:
 358:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 175              		.loc 4 358 34 is_stmt 1 view .LVU43
 359:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 176              		.loc 4 359 20 view .LVU44
 177              	.LBE88:
  94:lib/chibios/os/rt/src/chcond.c ****   if (ch_queue_notempty(&cp->queue)) {
 178              		.loc 2 94 3 view .LVU45
 179              	.LBB89:
 180              	.LBI89:
 211:./lib/chibios/os/rt/include/chlists.h **** }
 212:./lib/chibios/os/rt/include/chlists.h **** 
 213:./lib/chibios/os/rt/include/chlists.h **** /**
 214:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is empty.
 215:./lib/chibios/os/rt/include/chlists.h ****  *
 216:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] qp        pointer to the queue header
 217:./lib/chibios/os/rt/include/chlists.h ****  * @return              The status of the queue.
 218:./lib/chibios/os/rt/include/chlists.h ****  *
 219:./lib/chibios/os/rt/include/chlists.h ****  * @notapi
 220:./lib/chibios/os/rt/include/chlists.h ****  */
 221:./lib/chibios/os/rt/include/chlists.h **** static inline bool ch_queue_isempty(const ch_queue_t *qp) {
 222:./lib/chibios/os/rt/include/chlists.h **** 
 223:./lib/chibios/os/rt/include/chlists.h ****   return (bool)(qp->next == qp);
 224:./lib/chibios/os/rt/include/chlists.h **** }
 225:./lib/chibios/os/rt/include/chlists.h **** 
 226:./lib/chibios/os/rt/include/chlists.h **** /**
 227:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is not empty.
 228:./lib/chibios/os/rt/include/chlists.h ****  *
 229:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] qp        pointer to the queue header
 230:./lib/chibios/os/rt/include/chlists.h ****  * @return              The status of the queue.
 231:./lib/chibios/os/rt/include/chlists.h ****  *
 232:./lib/chibios/os/rt/include/chlists.h ****  * @notapi
 233:./lib/chibios/os/rt/include/chlists.h ****  */
 234:./lib/chibios/os/rt/include/chlists.h **** static inline bool ch_queue_notempty(const ch_queue_t *qp) {
 181              		.loc 3 234 20 view .LVU46
 182              	.LBB90:
 235:./lib/chibios/os/rt/include/chlists.h **** 
 236:./lib/chibios/os/rt/include/chlists.h ****   return (bool)(qp->next != qp);
 183              		.loc 3 236 3 view .LVU47
 184              		.loc 3 236 19 is_stmt 0 view .LVU48
 185 0008 0368     		ldr	r3, [r0]
 186              	.LVL7:
 187              		.loc 3 236 19 view .LVU49
 188              	.LBE90:
 189              	.LBE89:
 190              		.loc 2 94 6 view .LVU50
 191 000a 9842     		cmp	r0, r3
 192 000c 06D0     		beq	.L7
  95:lib/chibios/os/rt/src/chcond.c ****     chSchWakeupS((thread_t *)ch_queue_fifo_remove(&cp->queue), MSG_OK);
 193              		.loc 2 95 5 is_stmt 1 view .LVU51
 194              	.LVL8:
 195              	.LBB91:
 196              	.LBI91:
 237:./lib/chibios/os/rt/include/chlists.h **** }
 238:./lib/chibios/os/rt/include/chlists.h **** 
 239:./lib/chibios/os/rt/include/chlists.h **** /**
 240:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Inserts an element into a queue.
 241:./lib/chibios/os/rt/include/chlists.h ****  *
 242:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be inserted in the queue
 243:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] qp        the pointer to the queue header
 244:./lib/chibios/os/rt/include/chlists.h ****  *
 245:./lib/chibios/os/rt/include/chlists.h ****  * @notapi
 246:./lib/chibios/os/rt/include/chlists.h ****  */
 247:./lib/chibios/os/rt/include/chlists.h **** static inline void ch_queue_insert(ch_queue_t *p, ch_queue_t *qp) {
 248:./lib/chibios/os/rt/include/chlists.h **** 
 249:./lib/chibios/os/rt/include/chlists.h ****   p->next       = qp;
 250:./lib/chibios/os/rt/include/chlists.h ****   p->prev       = qp->prev;
 251:./lib/chibios/os/rt/include/chlists.h ****   p->prev->next = p;
 252:./lib/chibios/os/rt/include/chlists.h ****   qp->prev      = p;
 253:./lib/chibios/os/rt/include/chlists.h **** }
 254:./lib/chibios/os/rt/include/chlists.h **** 
 255:./lib/chibios/os/rt/include/chlists.h **** /**
 256:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Removes the first-out element from a queue and returns it.
 257:./lib/chibios/os/rt/include/chlists.h ****  * @note    If the queue is priority ordered then this function returns the
 258:./lib/chibios/os/rt/include/chlists.h ****  *          element with the highest priority.
 259:./lib/chibios/os/rt/include/chlists.h ****  *
 260:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] qp        the pointer to the queue list header
 261:./lib/chibios/os/rt/include/chlists.h ****  * @return              The removed element pointer.
 262:./lib/chibios/os/rt/include/chlists.h ****  *
 263:./lib/chibios/os/rt/include/chlists.h ****  * @notapi
 264:./lib/chibios/os/rt/include/chlists.h ****  */
 265:./lib/chibios/os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
 197              		.loc 3 265 27 view .LVU52
 198              	.LBB92:
 266:./lib/chibios/os/rt/include/chlists.h ****   ch_queue_t *p = qp->next;
 199              		.loc 3 266 3 view .LVU53
 267:./lib/chibios/os/rt/include/chlists.h **** 
 268:./lib/chibios/os/rt/include/chlists.h ****   qp->next       = p->next;
 200              		.loc 3 268 3 view .LVU54
 201              		.loc 3 268 21 is_stmt 0 view .LVU55
 202 000e 1A68     		ldr	r2, [r3]
 203              		.loc 3 268 18 view .LVU56
 204 0010 0260     		str	r2, [r0]
 269:./lib/chibios/os/rt/include/chlists.h ****   qp->next->prev = qp;
 205              		.loc 3 269 3 is_stmt 1 view .LVU57
 206              	.LBE92:
 207              	.LBE91:
 208              		.loc 2 95 5 is_stmt 0 view .LVU58
 209 0012 0021     		movs	r1, #0
 210              	.LBB94:
 211              	.LBB93:
 212              		.loc 3 269 18 view .LVU59
 213 0014 5060     		str	r0, [r2, #4]
 270:./lib/chibios/os/rt/include/chlists.h **** 
 271:./lib/chibios/os/rt/include/chlists.h ****   return p;
 214              		.loc 3 271 3 is_stmt 1 view .LVU60
 215              	.LVL9:
 216              		.loc 3 271 3 is_stmt 0 view .LVU61
 217              	.LBE93:
 218              	.LBE94:
 219              		.loc 2 95 5 view .LVU62
 220 0016 1846     		mov	r0, r3
 221              	.LVL10:
 222              		.loc 2 95 5 view .LVU63
 223 0018 FFF7FEFF 		bl	chSchWakeupS
 224              	.LVL11:
 225              	.L7:
  96:lib/chibios/os/rt/src/chcond.c ****   }
  97:lib/chibios/os/rt/src/chcond.c ****   chSysUnlock();
 226              		.loc 2 97 3 is_stmt 1 view .LVU64
 227              	.LBB95:
 228              	.LBI95:
 360:./lib/chibios/os/rt/include/chsys.h **** }
 361:./lib/chibios/os/rt/include/chsys.h **** 
 362:./lib/chibios/os/rt/include/chsys.h **** /**
 363:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state.
 364:./lib/chibios/os/rt/include/chsys.h ****  *
 365:./lib/chibios/os/rt/include/chsys.h ****  * @special
 366:./lib/chibios/os/rt/include/chsys.h ****  */
 367:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysUnlock(void) {
 229              		.loc 4 367 20 view .LVU65
 230              	.LBB96:
 368:./lib/chibios/os/rt/include/chsys.h **** 
 369:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_unlock();
 231              		.loc 4 369 22 view .LVU66
 370:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 232              		.loc 4 370 33 view .LVU67
 371:./lib/chibios/os/rt/include/chsys.h **** 
 372:./lib/chibios/os/rt/include/chsys.h ****   /* The following condition can be triggered by the use of i-class functions
 373:./lib/chibios/os/rt/include/chsys.h ****      in a critical section not followed by a chSchRescheduleS(), this means
 374:./lib/chibios/os/rt/include/chsys.h ****      that the current thread has a lower priority than the next thread in
 375:./lib/chibios/os/rt/include/chsys.h ****      the ready list.*/
 376:./lib/chibios/os/rt/include/chsys.h ****   chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 233              		.loc 4 376 3 view .LVU68
 234              		.loc 4 376 3 view .LVU69
 235              		.loc 4 376 3 view .LVU70
 377:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 378:./lib/chibios/os/rt/include/chsys.h ****               "priority order violation");
 379:./lib/chibios/os/rt/include/chsys.h **** 
 380:./lib/chibios/os/rt/include/chsys.h ****   port_unlock();
 236              		.loc 4 380 3 view .LVU71
 237              	.LBB97:
 238              	.LBI97:
 678:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 679:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if __CM7_REV <= 1
 680:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __enable_irq();
 681:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 682:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 683:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 684:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __disable_irq();
 685:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 686:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 687:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 688:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 689:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-unlock action.
 690:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function lowers the base priority to user
 691:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 692:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_unlock(void) {
 239              		.loc 5 693 27 view .LVU72
 694:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 695:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 696:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
 240              		.loc 5 696 3 view .LVU73
 241              	.LBB98:
 242              	.LBI98:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 243              		.loc 6 491 27 view .LVU74
 244              	.LBB99:
 245              		.loc 6 493 3 view .LVU75
 246 001c 0023     		movs	r3, #0
 247              		.syntax unified
 248              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 249 001e 83F31188 		MSR basepri, r3
 250              	@ 0 "" 2
 251              	.LVL12:
 252              		.loc 6 493 3 is_stmt 0 view .LVU76
 253              		.thumb
 254              		.syntax unified
 255              	.LBE99:
 256              	.LBE98:
 257              	.LBE97:
 258              	.LBE96:
 259              	.LBE95:
  98:lib/chibios/os/rt/src/chcond.c **** }
 260              		.loc 2 98 1 view .LVU77
 261 0022 08BD     		pop	{r3, pc}
 262              		.cfi_endproc
 263              	.LFE290:
 265              		.section	.text.chCondSignalI,"ax",%progbits
 266              		.align	1
 267              		.global	chCondSignalI
 268              		.syntax unified
 269              		.thumb
 270              		.thumb_func
 271              		.fpu fpv4-sp-d16
 273              	chCondSignalI:
 274              	.LVL13:
 275              	.LFB291:
  99:lib/chibios/os/rt/src/chcond.c **** 
 100:lib/chibios/os/rt/src/chcond.c **** /**
 101:lib/chibios/os/rt/src/chcond.c ****  * @brief   Signals one thread that is waiting on the condition variable.
 102:lib/chibios/os/rt/src/chcond.c ****  * @post    This function does not reschedule so a call to a rescheduling
 103:lib/chibios/os/rt/src/chcond.c ****  *          function must be performed before unlocking the kernel. Note that
 104:lib/chibios/os/rt/src/chcond.c ****  *          interrupt handlers always reschedule on exit so an explicit
 105:lib/chibios/os/rt/src/chcond.c ****  *          reschedule must not be performed in ISRs.
 106:lib/chibios/os/rt/src/chcond.c ****  *
 107:lib/chibios/os/rt/src/chcond.c ****  * @param[in] cp        pointer to the @p condition_variable_t structure
 108:lib/chibios/os/rt/src/chcond.c ****  *
 109:lib/chibios/os/rt/src/chcond.c ****  * @iclass
 110:lib/chibios/os/rt/src/chcond.c ****  */
 111:lib/chibios/os/rt/src/chcond.c **** void chCondSignalI(condition_variable_t *cp) {
 276              		.loc 2 111 46 is_stmt 1 view -0
 277              		.cfi_startproc
 278              		@ args = 0, pretend = 0, frame = 0
 279              		@ frame_needed = 0, uses_anonymous_args = 0
 280              		@ link register save eliminated.
 112:lib/chibios/os/rt/src/chcond.c **** 
 113:lib/chibios/os/rt/src/chcond.c ****   chDbgCheckClassI();
 281              		.loc 2 113 21 view .LVU79
 114:lib/chibios/os/rt/src/chcond.c ****   chDbgCheck(cp != NULL);
 282              		.loc 2 114 3 view .LVU80
 283              		.loc 2 114 3 view .LVU81
 284              		.loc 2 114 3 view .LVU82
 115:lib/chibios/os/rt/src/chcond.c **** 
 116:lib/chibios/os/rt/src/chcond.c ****   if (ch_queue_notempty(&cp->queue)) {
 285              		.loc 2 116 3 view .LVU83
 286              	.LBB100:
 287              	.LBI100:
 234:./lib/chibios/os/rt/include/chlists.h **** 
 288              		.loc 3 234 20 view .LVU84
 289              	.LBB101:
 236:./lib/chibios/os/rt/include/chlists.h **** }
 290              		.loc 3 236 3 view .LVU85
 236:./lib/chibios/os/rt/include/chlists.h **** }
 291              		.loc 3 236 19 is_stmt 0 view .LVU86
 292 0000 0368     		ldr	r3, [r0]
 293              	.LVL14:
 236:./lib/chibios/os/rt/include/chlists.h **** }
 294              		.loc 3 236 19 view .LVU87
 295              	.LBE101:
 296              	.LBE100:
 297              		.loc 2 116 6 view .LVU88
 298 0002 9842     		cmp	r0, r3
 299 0004 07D0     		beq	.L8
 300              	.LBB102:
 117:lib/chibios/os/rt/src/chcond.c ****     thread_t *tp = (thread_t *)ch_queue_fifo_remove(&cp->queue);
 301              		.loc 2 117 5 is_stmt 1 view .LVU89
 302              	.LVL15:
 303              	.LBB103:
 304              	.LBI103:
 265:./lib/chibios/os/rt/include/chlists.h ****   ch_queue_t *p = qp->next;
 305              		.loc 3 265 27 view .LVU90
 306              	.LBB104:
 266:./lib/chibios/os/rt/include/chlists.h **** 
 307              		.loc 3 266 3 view .LVU91
 268:./lib/chibios/os/rt/include/chlists.h ****   qp->next->prev = qp;
 308              		.loc 3 268 3 view .LVU92
 268:./lib/chibios/os/rt/include/chlists.h ****   qp->next->prev = qp;
 309              		.loc 3 268 21 is_stmt 0 view .LVU93
 310 0006 1A68     		ldr	r2, [r3]
 268:./lib/chibios/os/rt/include/chlists.h ****   qp->next->prev = qp;
 311              		.loc 3 268 18 view .LVU94
 312 0008 0260     		str	r2, [r0]
 269:./lib/chibios/os/rt/include/chlists.h **** 
 313              		.loc 3 269 3 is_stmt 1 view .LVU95
 269:./lib/chibios/os/rt/include/chlists.h **** 
 314              		.loc 3 269 18 is_stmt 0 view .LVU96
 315 000a 5060     		str	r0, [r2, #4]
 316              		.loc 3 271 3 is_stmt 1 view .LVU97
 317              	.LVL16:
 318              		.loc 3 271 3 is_stmt 0 view .LVU98
 319              	.LBE104:
 320              	.LBE103:
 118:lib/chibios/os/rt/src/chcond.c ****     tp->u.rdymsg = MSG_OK;
 321              		.loc 2 118 5 is_stmt 1 view .LVU99
 322              		.loc 2 118 18 is_stmt 0 view .LVU100
 323 000c 0022     		movs	r2, #0
 324 000e 5A62     		str	r2, [r3, #36]
 119:lib/chibios/os/rt/src/chcond.c ****     (void) chSchReadyI(tp);
 325              		.loc 2 119 5 is_stmt 1 view .LVU101
 326              		.loc 2 119 12 is_stmt 0 view .LVU102
 327 0010 1846     		mov	r0, r3
 328              	.LVL17:
 329              		.loc 2 119 12 view .LVU103
 330 0012 FFF7FEBF 		b	chSchReadyI
 331              	.LVL18:
 332              	.L8:
 333              		.loc 2 119 12 view .LVU104
 334              	.LBE102:
 120:lib/chibios/os/rt/src/chcond.c ****   }
 121:lib/chibios/os/rt/src/chcond.c **** }
 335              		.loc 2 121 1 view .LVU105
 336 0016 7047     		bx	lr
 337              		.cfi_endproc
 338              	.LFE291:
 340              		.section	.text.chCondBroadcastI,"ax",%progbits
 341              		.align	1
 342              		.global	chCondBroadcastI
 343              		.syntax unified
 344              		.thumb
 345              		.thumb_func
 346              		.fpu fpv4-sp-d16
 348              	chCondBroadcastI:
 349              	.LVL19:
 350              	.LFB293:
 122:lib/chibios/os/rt/src/chcond.c **** 
 123:lib/chibios/os/rt/src/chcond.c **** /**
 124:lib/chibios/os/rt/src/chcond.c ****  * @brief   Signals all threads that are waiting on the condition variable.
 125:lib/chibios/os/rt/src/chcond.c ****  *
 126:lib/chibios/os/rt/src/chcond.c ****  * @param[in] cp        pointer to the @p condition_variable_t structure
 127:lib/chibios/os/rt/src/chcond.c ****  *
 128:lib/chibios/os/rt/src/chcond.c ****  * @api
 129:lib/chibios/os/rt/src/chcond.c ****  */
 130:lib/chibios/os/rt/src/chcond.c **** void chCondBroadcast(condition_variable_t *cp) {
 131:lib/chibios/os/rt/src/chcond.c **** 
 132:lib/chibios/os/rt/src/chcond.c ****   chSysLock();
 133:lib/chibios/os/rt/src/chcond.c ****   chCondBroadcastI(cp);
 134:lib/chibios/os/rt/src/chcond.c ****   chSchRescheduleS();
 135:lib/chibios/os/rt/src/chcond.c ****   chSysUnlock();
 136:lib/chibios/os/rt/src/chcond.c **** }
 137:lib/chibios/os/rt/src/chcond.c **** 
 138:lib/chibios/os/rt/src/chcond.c **** /**
 139:lib/chibios/os/rt/src/chcond.c ****  * @brief   Signals all threads that are waiting on the condition variable.
 140:lib/chibios/os/rt/src/chcond.c ****  * @post    This function does not reschedule so a call to a rescheduling
 141:lib/chibios/os/rt/src/chcond.c ****  *          function must be performed before unlocking the kernel. Note that
 142:lib/chibios/os/rt/src/chcond.c ****  *          interrupt handlers always reschedule on exit so an explicit
 143:lib/chibios/os/rt/src/chcond.c ****  *          reschedule must not be performed in ISRs.
 144:lib/chibios/os/rt/src/chcond.c ****  *
 145:lib/chibios/os/rt/src/chcond.c ****  * @param[in] cp        pointer to the @p condition_variable_t structure
 146:lib/chibios/os/rt/src/chcond.c ****  *
 147:lib/chibios/os/rt/src/chcond.c ****  * @iclass
 148:lib/chibios/os/rt/src/chcond.c ****  */
 149:lib/chibios/os/rt/src/chcond.c **** void chCondBroadcastI(condition_variable_t *cp) {
 351              		.loc 2 149 49 is_stmt 1 view -0
 352              		.cfi_startproc
 353              		@ args = 0, pretend = 0, frame = 0
 354              		@ frame_needed = 0, uses_anonymous_args = 0
 150:lib/chibios/os/rt/src/chcond.c **** 
 151:lib/chibios/os/rt/src/chcond.c ****   chDbgCheckClassI();
 355              		.loc 2 151 21 view .LVU107
 152:lib/chibios/os/rt/src/chcond.c ****   chDbgCheck(cp != NULL);
 356              		.loc 2 152 3 view .LVU108
 357              		.loc 2 152 3 view .LVU109
 358              		.loc 2 152 3 view .LVU110
 153:lib/chibios/os/rt/src/chcond.c **** 
 154:lib/chibios/os/rt/src/chcond.c ****   /* Empties the condition variable queue and inserts all the threads into the
 155:lib/chibios/os/rt/src/chcond.c ****      ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
 156:lib/chibios/os/rt/src/chcond.c ****      order to make a chCondBroadcast() detectable from a chCondSignal().*/
 157:lib/chibios/os/rt/src/chcond.c ****   while (ch_queue_notempty(&cp->queue)) {
 359              		.loc 2 157 3 view .LVU111
 149:lib/chibios/os/rt/src/chcond.c **** 
 360              		.loc 2 149 49 is_stmt 0 view .LVU112
 361 0000 38B5     		push	{r3, r4, r5, lr}
 362              		.cfi_def_cfa_offset 16
 363              		.cfi_offset 3, -16
 364              		.cfi_offset 4, -12
 365              		.cfi_offset 5, -8
 366              		.cfi_offset 14, -4
 149:lib/chibios/os/rt/src/chcond.c **** 
 367              		.loc 2 149 49 view .LVU113
 368 0002 0446     		mov	r4, r0
 158:lib/chibios/os/rt/src/chcond.c ****     chSchReadyI((thread_t *)ch_queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 369              		.loc 2 158 73 view .LVU114
 370 0004 6FF00105 		mvn	r5, #1
 371              	.LVL20:
 372              	.L11:
 157:lib/chibios/os/rt/src/chcond.c ****     chSchReadyI((thread_t *)ch_queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 373              		.loc 2 157 10 is_stmt 1 view .LVU115
 374              	.LBB105:
 375              	.LBI105:
 234:./lib/chibios/os/rt/include/chlists.h **** 
 376              		.loc 3 234 20 view .LVU116
 377              	.LBB106:
 236:./lib/chibios/os/rt/include/chlists.h **** }
 378              		.loc 3 236 3 view .LVU117
 236:./lib/chibios/os/rt/include/chlists.h **** }
 379              		.loc 3 236 19 is_stmt 0 view .LVU118
 380 0008 2068     		ldr	r0, [r4]
 381              	.LVL21:
 236:./lib/chibios/os/rt/include/chlists.h **** }
 382              		.loc 3 236 19 view .LVU119
 383              	.LBE106:
 384              	.LBE105:
 157:lib/chibios/os/rt/src/chcond.c ****     chSchReadyI((thread_t *)ch_queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 385              		.loc 2 157 10 view .LVU120
 386 000a 8442     		cmp	r4, r0
 387 000c 00D1     		bne	.L12
 159:lib/chibios/os/rt/src/chcond.c ****   }
 160:lib/chibios/os/rt/src/chcond.c **** }
 388              		.loc 2 160 1 view .LVU121
 389 000e 38BD     		pop	{r3, r4, r5, pc}
 390              	.LVL22:
 391              	.L12:
 158:lib/chibios/os/rt/src/chcond.c ****   }
 392              		.loc 2 158 5 is_stmt 1 view .LVU122
 393              	.LBB107:
 394              	.LBI107:
 265:./lib/chibios/os/rt/include/chlists.h ****   ch_queue_t *p = qp->next;
 395              		.loc 3 265 27 view .LVU123
 396              	.LBB108:
 266:./lib/chibios/os/rt/include/chlists.h **** 
 397              		.loc 3 266 3 view .LVU124
 268:./lib/chibios/os/rt/include/chlists.h ****   qp->next->prev = qp;
 398              		.loc 3 268 3 view .LVU125
 268:./lib/chibios/os/rt/include/chlists.h ****   qp->next->prev = qp;
 399              		.loc 3 268 21 is_stmt 0 view .LVU126
 400 0010 0368     		ldr	r3, [r0]
 268:./lib/chibios/os/rt/include/chlists.h ****   qp->next->prev = qp;
 401              		.loc 3 268 18 view .LVU127
 402 0012 2360     		str	r3, [r4]
 269:./lib/chibios/os/rt/include/chlists.h **** 
 403              		.loc 3 269 3 is_stmt 1 view .LVU128
 269:./lib/chibios/os/rt/include/chlists.h **** 
 404              		.loc 3 269 18 is_stmt 0 view .LVU129
 405 0014 5C60     		str	r4, [r3, #4]
 406              		.loc 3 271 3 is_stmt 1 view .LVU130
 407              	.LVL23:
 408              		.loc 3 271 3 is_stmt 0 view .LVU131
 409              	.LBE108:
 410              	.LBE107:
 158:lib/chibios/os/rt/src/chcond.c ****   }
 411              		.loc 2 158 5 view .LVU132
 412 0016 FFF7FEFF 		bl	chSchReadyI
 413              	.LVL24:
 158:lib/chibios/os/rt/src/chcond.c ****   }
 414              		.loc 2 158 73 view .LVU133
 415 001a 4562     		str	r5, [r0, #36]
 416 001c F4E7     		b	.L11
 417              		.cfi_endproc
 418              	.LFE293:
 420              		.section	.text.chCondBroadcast,"ax",%progbits
 421              		.align	1
 422              		.global	chCondBroadcast
 423              		.syntax unified
 424              		.thumb
 425              		.thumb_func
 426              		.fpu fpv4-sp-d16
 428              	chCondBroadcast:
 429              	.LVL25:
 430              	.LFB292:
 130:lib/chibios/os/rt/src/chcond.c **** 
 431              		.loc 2 130 48 is_stmt 1 view -0
 432              		.cfi_startproc
 433              		@ args = 0, pretend = 0, frame = 0
 434              		@ frame_needed = 0, uses_anonymous_args = 0
 132:lib/chibios/os/rt/src/chcond.c ****   chCondBroadcastI(cp);
 435              		.loc 2 132 3 view .LVU135
 436              	.LBB109:
 437              	.LBI109:
 355:./lib/chibios/os/rt/include/chsys.h **** 
 438              		.loc 4 355 20 view .LVU136
 357:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 439              		.loc 4 357 3 view .LVU137
 440              	.LBB110:
 441              	.LBI110:
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 442              		.loc 5 669 27 view .LVU138
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 443              		.loc 5 677 3 view .LVU139
 444              	.LBB111:
 445              	.LBI111:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 446              		.loc 6 491 27 view .LVU140
 447              	.LBB112:
 448              		.loc 6 493 3 view .LVU141
 449              	.LBE112:
 450              	.LBE111:
 451              	.LBE110:
 452              	.LBE109:
 130:lib/chibios/os/rt/src/chcond.c **** 
 453              		.loc 2 130 48 is_stmt 0 view .LVU142
 454 0000 08B5     		push	{r3, lr}
 455              		.cfi_def_cfa_offset 8
 456              		.cfi_offset 3, -8
 457              		.cfi_offset 14, -4
 458              	.LBB116:
 459              	.LBB115:
 460              	.LBB114:
 461              	.LBB113:
 462              		.loc 6 493 3 view .LVU143
 463 0002 2023     		movs	r3, #32
 464              		.syntax unified
 465              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 466 0004 83F31188 		MSR basepri, r3
 467              	@ 0 "" 2
 468              	.LVL26:
 469              		.loc 6 493 3 view .LVU144
 470              		.thumb
 471              		.syntax unified
 472              	.LBE113:
 473              	.LBE114:
 474              	.LBE115:
 358:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 475              		.loc 4 358 34 is_stmt 1 view .LVU145
 359:./lib/chibios/os/rt/include/chsys.h **** }
 476              		.loc 4 359 20 view .LVU146
 477              	.LBE116:
 133:lib/chibios/os/rt/src/chcond.c ****   chSchRescheduleS();
 478              		.loc 2 133 3 view .LVU147
 479 0008 FFF7FEFF 		bl	chCondBroadcastI
 480              	.LVL27:
 134:lib/chibios/os/rt/src/chcond.c ****   chSysUnlock();
 481              		.loc 2 134 3 view .LVU148
 482 000c FFF7FEFF 		bl	chSchRescheduleS
 483              	.LVL28:
 135:lib/chibios/os/rt/src/chcond.c **** }
 484              		.loc 2 135 3 view .LVU149
 485              	.LBB117:
 486              	.LBI117:
 367:./lib/chibios/os/rt/include/chsys.h **** 
 487              		.loc 4 367 20 view .LVU150
 488              	.LBB118:
 369:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 489              		.loc 4 369 22 view .LVU151
 370:./lib/chibios/os/rt/include/chsys.h **** 
 490              		.loc 4 370 33 view .LVU152
 376:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 491              		.loc 4 376 3 view .LVU153
 376:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 492              		.loc 4 376 3 view .LVU154
 376:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 493              		.loc 4 376 3 view .LVU155
 494              		.loc 4 380 3 view .LVU156
 495              	.LBB119:
 496              	.LBI119:
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 497              		.loc 5 693 27 view .LVU157
 498              		.loc 5 696 3 view .LVU158
 499              	.LBB120:
 500              	.LBI120:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 501              		.loc 6 491 27 view .LVU159
 502              	.LBB121:
 503              		.loc 6 493 3 view .LVU160
 504 0010 0023     		movs	r3, #0
 505              		.syntax unified
 506              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 507 0012 83F31188 		MSR basepri, r3
 508              	@ 0 "" 2
 509              	.LVL29:
 510              		.loc 6 493 3 is_stmt 0 view .LVU161
 511              		.thumb
 512              		.syntax unified
 513              	.LBE121:
 514              	.LBE120:
 515              	.LBE119:
 516              	.LBE118:
 517              	.LBE117:
 136:lib/chibios/os/rt/src/chcond.c **** 
 518              		.loc 2 136 1 view .LVU162
 519 0016 08BD     		pop	{r3, pc}
 520              		.cfi_endproc
 521              	.LFE292:
 523              		.section	.text.chCondWaitS,"ax",%progbits
 524              		.align	1
 525              		.global	chCondWaitS
 526              		.syntax unified
 527              		.thumb
 528              		.thumb_func
 529              		.fpu fpv4-sp-d16
 531              	chCondWaitS:
 532              	.LVL30:
 533              	.LFB295:
 161:lib/chibios/os/rt/src/chcond.c **** 
 162:lib/chibios/os/rt/src/chcond.c **** /**
 163:lib/chibios/os/rt/src/chcond.c ****  * @brief   Waits on the condition variable releasing the mutex lock.
 164:lib/chibios/os/rt/src/chcond.c ****  * @details Releases the currently owned mutex, waits on the condition
 165:lib/chibios/os/rt/src/chcond.c ****  *          variable, and finally acquires the mutex again. All the sequence
 166:lib/chibios/os/rt/src/chcond.c ****  *          is performed atomically.
 167:lib/chibios/os/rt/src/chcond.c ****  * @pre     The invoking thread <b>must</b> have at least one owned mutex.
 168:lib/chibios/os/rt/src/chcond.c ****  *
 169:lib/chibios/os/rt/src/chcond.c ****  * @param[in] cp        pointer to the @p condition_variable_t structure
 170:lib/chibios/os/rt/src/chcond.c ****  * @return              A message specifying how the invoking thread has been
 171:lib/chibios/os/rt/src/chcond.c ****  *                      released from the condition variable.
 172:lib/chibios/os/rt/src/chcond.c ****  * @retval MSG_OK       if the condition variable has been signaled using
 173:lib/chibios/os/rt/src/chcond.c ****  *                      @p chCondSignal().
 174:lib/chibios/os/rt/src/chcond.c ****  * @retval MSG_RESET    if the condition variable has been signaled using
 175:lib/chibios/os/rt/src/chcond.c ****  *                      @p chCondBroadcast().
 176:lib/chibios/os/rt/src/chcond.c ****  *
 177:lib/chibios/os/rt/src/chcond.c ****  * @api
 178:lib/chibios/os/rt/src/chcond.c ****  */
 179:lib/chibios/os/rt/src/chcond.c **** msg_t chCondWait(condition_variable_t *cp) {
 180:lib/chibios/os/rt/src/chcond.c ****   msg_t msg;
 181:lib/chibios/os/rt/src/chcond.c **** 
 182:lib/chibios/os/rt/src/chcond.c ****   chSysLock();
 183:lib/chibios/os/rt/src/chcond.c ****   msg = chCondWaitS(cp);
 184:lib/chibios/os/rt/src/chcond.c ****   chSysUnlock();
 185:lib/chibios/os/rt/src/chcond.c ****   return msg;
 186:lib/chibios/os/rt/src/chcond.c **** }
 187:lib/chibios/os/rt/src/chcond.c **** 
 188:lib/chibios/os/rt/src/chcond.c **** /**
 189:lib/chibios/os/rt/src/chcond.c ****  * @brief   Waits on the condition variable releasing the mutex lock.
 190:lib/chibios/os/rt/src/chcond.c ****  * @details Releases the currently owned mutex, waits on the condition
 191:lib/chibios/os/rt/src/chcond.c ****  *          variable, and finally acquires the mutex again. All the sequence
 192:lib/chibios/os/rt/src/chcond.c ****  *          is performed atomically.
 193:lib/chibios/os/rt/src/chcond.c ****  * @pre     The invoking thread <b>must</b> have at least one owned mutex.
 194:lib/chibios/os/rt/src/chcond.c ****  *
 195:lib/chibios/os/rt/src/chcond.c ****  * @param[in] cp        pointer to the @p condition_variable_t structure
 196:lib/chibios/os/rt/src/chcond.c ****  * @return              A message specifying how the invoking thread has been
 197:lib/chibios/os/rt/src/chcond.c ****  *                      released from the condition variable.
 198:lib/chibios/os/rt/src/chcond.c ****  * @retval MSG_OK       if the condition variable has been signaled using
 199:lib/chibios/os/rt/src/chcond.c ****  *                      @p chCondSignal().
 200:lib/chibios/os/rt/src/chcond.c ****  * @retval MSG_RESET    if the condition variable has been signaled using
 201:lib/chibios/os/rt/src/chcond.c ****  *                      @p chCondBroadcast().
 202:lib/chibios/os/rt/src/chcond.c ****  *
 203:lib/chibios/os/rt/src/chcond.c ****  * @sclass
 204:lib/chibios/os/rt/src/chcond.c ****  */
 205:lib/chibios/os/rt/src/chcond.c **** msg_t chCondWaitS(condition_variable_t *cp) {
 534              		.loc 2 205 45 is_stmt 1 view -0
 535              		.cfi_startproc
 536              		@ args = 0, pretend = 0, frame = 0
 537              		@ frame_needed = 0, uses_anonymous_args = 0
 206:lib/chibios/os/rt/src/chcond.c ****   thread_t *ctp = currp;
 538              		.loc 2 206 3 view .LVU164
 539              		.loc 2 206 13 is_stmt 0 view .LVU165
 540 0000 0A4B     		ldr	r3, .L15
 205:lib/chibios/os/rt/src/chcond.c ****   thread_t *ctp = currp;
 541              		.loc 2 205 45 view .LVU166
 542 0002 70B5     		push	{r4, r5, r6, lr}
 543              		.cfi_def_cfa_offset 16
 544              		.cfi_offset 4, -16
 545              		.cfi_offset 5, -12
 546              		.cfi_offset 6, -8
 547              		.cfi_offset 14, -4
 548              		.loc 2 206 13 view .LVU167
 549 0004 9C69     		ldr	r4, [r3, #24]
 550              	.LVL31:
 207:lib/chibios/os/rt/src/chcond.c ****   mutex_t *mp = chMtxGetNextMutexX();
 551              		.loc 2 207 3 is_stmt 1 view .LVU168
 552              	.LBB122:
 553              	.LBI122:
 554              		.file 7 "./lib/chibios/os/rt/include/chmtx.h"
   1:./lib/chibios/os/rt/include/chmtx.h **** /*
   2:./lib/chibios/os/rt/include/chmtx.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chmtx.h **** 
   4:./lib/chibios/os/rt/include/chmtx.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chmtx.h **** 
   6:./lib/chibios/os/rt/include/chmtx.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chmtx.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chmtx.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chmtx.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chmtx.h **** 
  11:./lib/chibios/os/rt/include/chmtx.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chmtx.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chmtx.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chmtx.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chmtx.h **** 
  16:./lib/chibios/os/rt/include/chmtx.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chmtx.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chmtx.h **** */
  19:./lib/chibios/os/rt/include/chmtx.h **** 
  20:./lib/chibios/os/rt/include/chmtx.h **** /**
  21:./lib/chibios/os/rt/include/chmtx.h ****  * @file    rt/include/chmtx.h
  22:./lib/chibios/os/rt/include/chmtx.h ****  * @brief   Mutexes macros and structures.
  23:./lib/chibios/os/rt/include/chmtx.h ****  *
  24:./lib/chibios/os/rt/include/chmtx.h ****  * @addtogroup mutexes
  25:./lib/chibios/os/rt/include/chmtx.h ****  * @{
  26:./lib/chibios/os/rt/include/chmtx.h ****  */
  27:./lib/chibios/os/rt/include/chmtx.h **** 
  28:./lib/chibios/os/rt/include/chmtx.h **** #ifndef CHMTX_H
  29:./lib/chibios/os/rt/include/chmtx.h **** #define CHMTX_H
  30:./lib/chibios/os/rt/include/chmtx.h **** 
  31:./lib/chibios/os/rt/include/chmtx.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  32:./lib/chibios/os/rt/include/chmtx.h **** 
  33:./lib/chibios/os/rt/include/chmtx.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chmtx.h **** /* Module constants.                                                         */
  35:./lib/chibios/os/rt/include/chmtx.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chmtx.h **** 
  37:./lib/chibios/os/rt/include/chmtx.h **** /*===========================================================================*/
  38:./lib/chibios/os/rt/include/chmtx.h **** /* Module pre-compile time settings.                                         */
  39:./lib/chibios/os/rt/include/chmtx.h **** /*===========================================================================*/
  40:./lib/chibios/os/rt/include/chmtx.h **** 
  41:./lib/chibios/os/rt/include/chmtx.h **** /*===========================================================================*/
  42:./lib/chibios/os/rt/include/chmtx.h **** /* Derived constants and error checks.                                       */
  43:./lib/chibios/os/rt/include/chmtx.h **** /*===========================================================================*/
  44:./lib/chibios/os/rt/include/chmtx.h **** 
  45:./lib/chibios/os/rt/include/chmtx.h **** /*===========================================================================*/
  46:./lib/chibios/os/rt/include/chmtx.h **** /* Module data structures and types.                                         */
  47:./lib/chibios/os/rt/include/chmtx.h **** /*===========================================================================*/
  48:./lib/chibios/os/rt/include/chmtx.h **** 
  49:./lib/chibios/os/rt/include/chmtx.h **** /**
  50:./lib/chibios/os/rt/include/chmtx.h ****  * @brief   Type of a mutex structure.
  51:./lib/chibios/os/rt/include/chmtx.h ****  */
  52:./lib/chibios/os/rt/include/chmtx.h **** typedef struct ch_mutex mutex_t;
  53:./lib/chibios/os/rt/include/chmtx.h **** 
  54:./lib/chibios/os/rt/include/chmtx.h **** /**
  55:./lib/chibios/os/rt/include/chmtx.h ****  * @brief   Mutex structure.
  56:./lib/chibios/os/rt/include/chmtx.h ****  */
  57:./lib/chibios/os/rt/include/chmtx.h **** struct ch_mutex {
  58:./lib/chibios/os/rt/include/chmtx.h ****   ch_queue_t            queue;      /**< @brief Queue of the threads sleeping
  59:./lib/chibios/os/rt/include/chmtx.h ****                                                 on this mutex.              */
  60:./lib/chibios/os/rt/include/chmtx.h ****   thread_t              *owner;     /**< @brief Owner @p thread_t pointer or
  61:./lib/chibios/os/rt/include/chmtx.h ****                                                 @p NULL.                    */
  62:./lib/chibios/os/rt/include/chmtx.h ****   mutex_t               *next;      /**< @brief Next @p mutex_t into an
  63:./lib/chibios/os/rt/include/chmtx.h ****                                                 owner-list or @p NULL.      */
  64:./lib/chibios/os/rt/include/chmtx.h **** #if (CH_CFG_USE_MUTEXES_RECURSIVE == TRUE) || defined(__DOXYGEN__)
  65:./lib/chibios/os/rt/include/chmtx.h ****   cnt_t                 cnt;        /**< @brief Mutex recursion counter.    */
  66:./lib/chibios/os/rt/include/chmtx.h **** #endif
  67:./lib/chibios/os/rt/include/chmtx.h **** };
  68:./lib/chibios/os/rt/include/chmtx.h **** 
  69:./lib/chibios/os/rt/include/chmtx.h **** /*===========================================================================*/
  70:./lib/chibios/os/rt/include/chmtx.h **** /* Module macros.                                                            */
  71:./lib/chibios/os/rt/include/chmtx.h **** /*===========================================================================*/
  72:./lib/chibios/os/rt/include/chmtx.h **** 
  73:./lib/chibios/os/rt/include/chmtx.h **** /**
  74:./lib/chibios/os/rt/include/chmtx.h ****  * @brief   Data part of a static mutex initializer.
  75:./lib/chibios/os/rt/include/chmtx.h ****  * @details This macro should be used when statically initializing a mutex
  76:./lib/chibios/os/rt/include/chmtx.h ****  *          that is part of a bigger structure.
  77:./lib/chibios/os/rt/include/chmtx.h ****  *
  78:./lib/chibios/os/rt/include/chmtx.h ****  * @param[in] name      the name of the mutex variable
  79:./lib/chibios/os/rt/include/chmtx.h ****  */
  80:./lib/chibios/os/rt/include/chmtx.h **** #if (CH_CFG_USE_MUTEXES_RECURSIVE == TRUE) || defined(__DOXYGEN__)
  81:./lib/chibios/os/rt/include/chmtx.h **** #define _MUTEX_DATA(name) {_CH_QUEUE_DATA(name.queue), NULL, NULL, 0}
  82:./lib/chibios/os/rt/include/chmtx.h **** #else
  83:./lib/chibios/os/rt/include/chmtx.h **** #define _MUTEX_DATA(name) {_CH_QUEUE_DATA(name.queue), NULL, NULL}
  84:./lib/chibios/os/rt/include/chmtx.h **** #endif
  85:./lib/chibios/os/rt/include/chmtx.h **** 
  86:./lib/chibios/os/rt/include/chmtx.h **** /**
  87:./lib/chibios/os/rt/include/chmtx.h ****  * @brief   Static mutex initializer.
  88:./lib/chibios/os/rt/include/chmtx.h ****  * @details Statically initialized mutexes require no explicit initialization
  89:./lib/chibios/os/rt/include/chmtx.h ****  *          using @p chMtxInit().
  90:./lib/chibios/os/rt/include/chmtx.h ****  *
  91:./lib/chibios/os/rt/include/chmtx.h ****  * @param[in] name      the name of the mutex variable
  92:./lib/chibios/os/rt/include/chmtx.h ****  */
  93:./lib/chibios/os/rt/include/chmtx.h **** #define MUTEX_DECL(name) mutex_t name = _MUTEX_DATA(name)
  94:./lib/chibios/os/rt/include/chmtx.h **** 
  95:./lib/chibios/os/rt/include/chmtx.h **** /*===========================================================================*/
  96:./lib/chibios/os/rt/include/chmtx.h **** /* External declarations.                                                    */
  97:./lib/chibios/os/rt/include/chmtx.h **** /*===========================================================================*/
  98:./lib/chibios/os/rt/include/chmtx.h **** 
  99:./lib/chibios/os/rt/include/chmtx.h **** #ifdef __cplusplus
 100:./lib/chibios/os/rt/include/chmtx.h **** extern "C" {
 101:./lib/chibios/os/rt/include/chmtx.h **** #endif
 102:./lib/chibios/os/rt/include/chmtx.h ****   void chMtxObjectInit(mutex_t *mp);
 103:./lib/chibios/os/rt/include/chmtx.h ****   void chMtxLock(mutex_t *mp);
 104:./lib/chibios/os/rt/include/chmtx.h ****   void chMtxLockS(mutex_t *mp);
 105:./lib/chibios/os/rt/include/chmtx.h ****   bool chMtxTryLock(mutex_t *mp);
 106:./lib/chibios/os/rt/include/chmtx.h ****   bool chMtxTryLockS(mutex_t *mp);
 107:./lib/chibios/os/rt/include/chmtx.h ****   void chMtxUnlock(mutex_t *mp);
 108:./lib/chibios/os/rt/include/chmtx.h ****   void chMtxUnlockS(mutex_t *mp);
 109:./lib/chibios/os/rt/include/chmtx.h ****   void chMtxUnlockAll(void);
 110:./lib/chibios/os/rt/include/chmtx.h ****   void chMtxUnlockAllS(void);
 111:./lib/chibios/os/rt/include/chmtx.h **** #ifdef __cplusplus
 112:./lib/chibios/os/rt/include/chmtx.h **** }
 113:./lib/chibios/os/rt/include/chmtx.h **** #endif
 114:./lib/chibios/os/rt/include/chmtx.h **** 
 115:./lib/chibios/os/rt/include/chmtx.h **** /*===========================================================================*/
 116:./lib/chibios/os/rt/include/chmtx.h **** /* Module inline functions.                                                  */
 117:./lib/chibios/os/rt/include/chmtx.h **** /*===========================================================================*/
 118:./lib/chibios/os/rt/include/chmtx.h **** 
 119:./lib/chibios/os/rt/include/chmtx.h **** /**
 120:./lib/chibios/os/rt/include/chmtx.h ****  * @brief   Returns @p true if the mutex queue contains at least a waiting
 121:./lib/chibios/os/rt/include/chmtx.h ****  *          thread.
 122:./lib/chibios/os/rt/include/chmtx.h ****  *
 123:./lib/chibios/os/rt/include/chmtx.h ****  * @param[out] mp       pointer to a @p mutex_t structure
 124:./lib/chibios/os/rt/include/chmtx.h ****  * @return              The mutex queue status.
 125:./lib/chibios/os/rt/include/chmtx.h ****  *
 126:./lib/chibios/os/rt/include/chmtx.h ****  * @sclass
 127:./lib/chibios/os/rt/include/chmtx.h ****  */
 128:./lib/chibios/os/rt/include/chmtx.h **** static inline bool chMtxQueueNotEmptyS(mutex_t *mp) {
 129:./lib/chibios/os/rt/include/chmtx.h **** 
 130:./lib/chibios/os/rt/include/chmtx.h ****   chDbgCheckClassS();
 131:./lib/chibios/os/rt/include/chmtx.h **** 
 132:./lib/chibios/os/rt/include/chmtx.h ****   return ch_queue_notempty(&mp->queue);
 133:./lib/chibios/os/rt/include/chmtx.h **** }
 134:./lib/chibios/os/rt/include/chmtx.h **** 
 135:./lib/chibios/os/rt/include/chmtx.h **** /**
 136:./lib/chibios/os/rt/include/chmtx.h ****  * @brief   Returns the mutex owner thread.
 137:./lib/chibios/os/rt/include/chmtx.h ****  *
 138:./lib/chibios/os/rt/include/chmtx.h ****  * @param[out] mp       pointer to a @p mutex_t structure
 139:./lib/chibios/os/rt/include/chmtx.h ****  * @return              The owner thread.
 140:./lib/chibios/os/rt/include/chmtx.h ****  * @retval NULL         if the mutex is not owned.
 141:./lib/chibios/os/rt/include/chmtx.h ****  *
 142:./lib/chibios/os/rt/include/chmtx.h ****  * @iclass
 143:./lib/chibios/os/rt/include/chmtx.h ****  */
 144:./lib/chibios/os/rt/include/chmtx.h **** static inline thread_t *chMtxGetOwnerI(mutex_t *mp) {
 145:./lib/chibios/os/rt/include/chmtx.h **** 
 146:./lib/chibios/os/rt/include/chmtx.h ****   chDbgCheckClassI();
 147:./lib/chibios/os/rt/include/chmtx.h **** 
 148:./lib/chibios/os/rt/include/chmtx.h ****   return mp->owner;
 149:./lib/chibios/os/rt/include/chmtx.h **** }
 150:./lib/chibios/os/rt/include/chmtx.h **** 
 151:./lib/chibios/os/rt/include/chmtx.h **** /**
 152:./lib/chibios/os/rt/include/chmtx.h ****  * @brief   Returns the next mutex in the mutexes stack of the current thread.
 153:./lib/chibios/os/rt/include/chmtx.h ****  *
 154:./lib/chibios/os/rt/include/chmtx.h ****  * @return              A pointer to the next mutex in the stack.
 155:./lib/chibios/os/rt/include/chmtx.h ****  * @retval NULL         if the stack is empty.
 156:./lib/chibios/os/rt/include/chmtx.h ****  *
 157:./lib/chibios/os/rt/include/chmtx.h ****  * @xclass
 158:./lib/chibios/os/rt/include/chmtx.h ****  */
 159:./lib/chibios/os/rt/include/chmtx.h **** static inline mutex_t *chMtxGetNextMutexX(void) {
 555              		.loc 7 159 24 view .LVU169
 556              	.LBB123:
 160:./lib/chibios/os/rt/include/chmtx.h **** 
 161:./lib/chibios/os/rt/include/chmtx.h ****   return chThdGetSelfX()->mtxlist;
 557              		.loc 7 161 3 view .LVU170
 558              		.loc 7 161 25 is_stmt 0 view .LVU171
 559 0006 A66B     		ldr	r6, [r4, #56]
 560              	.LVL32:
 561              		.loc 7 161 25 view .LVU172
 562              	.LBE123:
 563              	.LBE122:
 208:lib/chibios/os/rt/src/chcond.c ****   msg_t msg;
 564              		.loc 2 208 3 is_stmt 1 view .LVU173
 209:lib/chibios/os/rt/src/chcond.c **** 
 210:lib/chibios/os/rt/src/chcond.c ****   chDbgCheckClassS();
 565              		.loc 2 210 21 view .LVU174
 211:lib/chibios/os/rt/src/chcond.c ****   chDbgCheck(cp != NULL);
 566              		.loc 2 211 3 view .LVU175
 567              		.loc 2 211 3 view .LVU176
 568              		.loc 2 211 3 view .LVU177
 212:lib/chibios/os/rt/src/chcond.c ****   chDbgAssert(mp != NULL, "not owning a mutex");
 569              		.loc 2 212 3 view .LVU178
 570              		.loc 2 212 3 view .LVU179
 571              		.loc 2 212 3 view .LVU180
 213:lib/chibios/os/rt/src/chcond.c **** 
 214:lib/chibios/os/rt/src/chcond.c ****   /* Releasing "current" mutex.*/
 215:lib/chibios/os/rt/src/chcond.c ****   chMtxUnlockS(mp);
 572              		.loc 2 215 3 view .LVU181
 205:lib/chibios/os/rt/src/chcond.c ****   thread_t *ctp = currp;
 573              		.loc 2 205 45 is_stmt 0 view .LVU182
 574 0008 0546     		mov	r5, r0
 575              		.loc 2 215 3 view .LVU183
 576 000a 3046     		mov	r0, r6
 577              	.LVL33:
 578              		.loc 2 215 3 view .LVU184
 579 000c FFF7FEFF 		bl	chMtxUnlockS
 580              	.LVL34:
 216:lib/chibios/os/rt/src/chcond.c **** 
 217:lib/chibios/os/rt/src/chcond.c ****   /* Start waiting on the condition variable, on exit the mutex is taken
 218:lib/chibios/os/rt/src/chcond.c ****      again.*/
 219:lib/chibios/os/rt/src/chcond.c ****   ctp->u.wtobjp = cp;
 581              		.loc 2 219 3 is_stmt 1 view .LVU185
 220:lib/chibios/os/rt/src/chcond.c ****   ch_sch_prio_insert(&ctp->hdr.queue, &cp->queue);
 582              		.loc 2 220 3 is_stmt 0 view .LVU186
 583 0010 2946     		mov	r1, r5
 219:lib/chibios/os/rt/src/chcond.c ****   ch_sch_prio_insert(&ctp->hdr.queue, &cp->queue);
 584              		.loc 2 219 17 view .LVU187
 585 0012 6562     		str	r5, [r4, #36]
 586              		.loc 2 220 3 is_stmt 1 view .LVU188
 587 0014 2046     		mov	r0, r4
 588 0016 FFF7FEFF 		bl	ch_sch_prio_insert
 589              	.LVL35:
 221:lib/chibios/os/rt/src/chcond.c ****   chSchGoSleepS(CH_STATE_WTCOND);
 590              		.loc 2 221 3 view .LVU189
 591 001a 0720     		movs	r0, #7
 592 001c FFF7FEFF 		bl	chSchGoSleepS
 593              	.LVL36:
 222:lib/chibios/os/rt/src/chcond.c ****   msg = ctp->u.rdymsg;
 594              		.loc 2 222 3 view .LVU190
 595              		.loc 2 222 7 is_stmt 0 view .LVU191
 596 0020 646A     		ldr	r4, [r4, #36]
 597              	.LVL37:
 223:lib/chibios/os/rt/src/chcond.c ****   chMtxLockS(mp);
 598              		.loc 2 223 3 is_stmt 1 view .LVU192
 599 0022 3046     		mov	r0, r6
 600 0024 FFF7FEFF 		bl	chMtxLockS
 601              	.LVL38:
 224:lib/chibios/os/rt/src/chcond.c **** 
 225:lib/chibios/os/rt/src/chcond.c ****   return msg;
 602              		.loc 2 225 3 view .LVU193
 226:lib/chibios/os/rt/src/chcond.c **** }
 603              		.loc 2 226 1 is_stmt 0 view .LVU194
 604 0028 2046     		mov	r0, r4
 605 002a 70BD     		pop	{r4, r5, r6, pc}
 606              	.LVL39:
 607              	.L16:
 608              		.loc 2 226 1 view .LVU195
 609              		.align	2
 610              	.L15:
 611 002c 00000000 		.word	ch
 612              		.cfi_endproc
 613              	.LFE295:
 615              		.section	.text.chCondWait,"ax",%progbits
 616              		.align	1
 617              		.global	chCondWait
 618              		.syntax unified
 619              		.thumb
 620              		.thumb_func
 621              		.fpu fpv4-sp-d16
 623              	chCondWait:
 624              	.LVL40:
 625              	.LFB294:
 179:lib/chibios/os/rt/src/chcond.c ****   msg_t msg;
 626              		.loc 2 179 44 is_stmt 1 view -0
 627              		.cfi_startproc
 628              		@ args = 0, pretend = 0, frame = 0
 629              		@ frame_needed = 0, uses_anonymous_args = 0
 180:lib/chibios/os/rt/src/chcond.c **** 
 630              		.loc 2 180 3 view .LVU197
 182:lib/chibios/os/rt/src/chcond.c ****   msg = chCondWaitS(cp);
 631              		.loc 2 182 3 view .LVU198
 632              	.LBB124:
 633              	.LBI124:
 355:./lib/chibios/os/rt/include/chsys.h **** 
 634              		.loc 4 355 20 view .LVU199
 357:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 635              		.loc 4 357 3 view .LVU200
 636              	.LBB125:
 637              	.LBI125:
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 638              		.loc 5 669 27 view .LVU201
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 639              		.loc 5 677 3 view .LVU202
 640              	.LBB126:
 641              	.LBI126:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 642              		.loc 6 491 27 view .LVU203
 643              	.LBB127:
 644              		.loc 6 493 3 view .LVU204
 645              	.LBE127:
 646              	.LBE126:
 647              	.LBE125:
 648              	.LBE124:
 179:lib/chibios/os/rt/src/chcond.c ****   msg_t msg;
 649              		.loc 2 179 44 is_stmt 0 view .LVU205
 650 0000 08B5     		push	{r3, lr}
 651              		.cfi_def_cfa_offset 8
 652              		.cfi_offset 3, -8
 653              		.cfi_offset 14, -4
 654              	.LBB131:
 655              	.LBB130:
 656              	.LBB129:
 657              	.LBB128:
 658              		.loc 6 493 3 view .LVU206
 659 0002 2023     		movs	r3, #32
 660              		.syntax unified
 661              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 662 0004 83F31188 		MSR basepri, r3
 663              	@ 0 "" 2
 664              	.LVL41:
 665              		.loc 6 493 3 view .LVU207
 666              		.thumb
 667              		.syntax unified
 668              	.LBE128:
 669              	.LBE129:
 670              	.LBE130:
 358:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 671              		.loc 4 358 34 is_stmt 1 view .LVU208
 359:./lib/chibios/os/rt/include/chsys.h **** }
 672              		.loc 4 359 20 view .LVU209
 673              	.LBE131:
 183:lib/chibios/os/rt/src/chcond.c ****   chSysUnlock();
 674              		.loc 2 183 3 view .LVU210
 183:lib/chibios/os/rt/src/chcond.c ****   chSysUnlock();
 675              		.loc 2 183 9 is_stmt 0 view .LVU211
 676 0008 FFF7FEFF 		bl	chCondWaitS
 677              	.LVL42:
 184:lib/chibios/os/rt/src/chcond.c ****   return msg;
 678              		.loc 2 184 3 is_stmt 1 view .LVU212
 679              	.LBB132:
 680              	.LBI132:
 367:./lib/chibios/os/rt/include/chsys.h **** 
 681              		.loc 4 367 20 view .LVU213
 682              	.LBB133:
 369:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 683              		.loc 4 369 22 view .LVU214
 370:./lib/chibios/os/rt/include/chsys.h **** 
 684              		.loc 4 370 33 view .LVU215
 376:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 685              		.loc 4 376 3 view .LVU216
 376:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 686              		.loc 4 376 3 view .LVU217
 376:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 687              		.loc 4 376 3 view .LVU218
 688              		.loc 4 380 3 view .LVU219
 689              	.LBB134:
 690              	.LBI134:
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 691              		.loc 5 693 27 view .LVU220
 692              		.loc 5 696 3 view .LVU221
 693              	.LBB135:
 694              	.LBI135:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 695              		.loc 6 491 27 view .LVU222
 696              	.LBB136:
 697              		.loc 6 493 3 view .LVU223
 698 000c 0023     		movs	r3, #0
 699              		.syntax unified
 700              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 701 000e 83F31188 		MSR basepri, r3
 702              	@ 0 "" 2
 703              	.LVL43:
 704              		.loc 6 493 3 is_stmt 0 view .LVU224
 705              		.thumb
 706              		.syntax unified
 707              	.LBE136:
 708              	.LBE135:
 709              	.LBE134:
 710              	.LBE133:
 711              	.LBE132:
 185:lib/chibios/os/rt/src/chcond.c **** }
 712              		.loc 2 185 3 is_stmt 1 view .LVU225
 186:lib/chibios/os/rt/src/chcond.c **** 
 713              		.loc 2 186 1 is_stmt 0 view .LVU226
 714 0012 08BD     		pop	{r3, pc}
 715              		.cfi_endproc
 716              	.LFE294:
 718              		.section	.text.chCondWaitTimeoutS,"ax",%progbits
 719              		.align	1
 720              		.global	chCondWaitTimeoutS
 721              		.syntax unified
 722              		.thumb
 723              		.thumb_func
 724              		.fpu fpv4-sp-d16
 726              	chCondWaitTimeoutS:
 727              	.LVL44:
 728              	.LFB297:
 227:lib/chibios/os/rt/src/chcond.c **** 
 228:lib/chibios/os/rt/src/chcond.c **** #if (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE) || defined(__DOXYGEN__)
 229:lib/chibios/os/rt/src/chcond.c **** /**
 230:lib/chibios/os/rt/src/chcond.c ****  * @brief   Waits on the condition variable releasing the mutex lock.
 231:lib/chibios/os/rt/src/chcond.c ****  * @details Releases the currently owned mutex, waits on the condition
 232:lib/chibios/os/rt/src/chcond.c ****  *          variable, and finally acquires the mutex again. All the sequence
 233:lib/chibios/os/rt/src/chcond.c ****  *          is performed atomically.
 234:lib/chibios/os/rt/src/chcond.c ****  * @pre     The invoking thread <b>must</b> have at least one owned mutex.
 235:lib/chibios/os/rt/src/chcond.c ****  * @pre     The configuration option @p CH_CFG_USE_CONDVARS_TIMEOUT must be enabled
 236:lib/chibios/os/rt/src/chcond.c ****  *          in order to use this function.
 237:lib/chibios/os/rt/src/chcond.c ****  * @post    Exiting the function because a timeout does not re-acquire the
 238:lib/chibios/os/rt/src/chcond.c ****  *          mutex, the mutex ownership is lost.
 239:lib/chibios/os/rt/src/chcond.c ****  *
 240:lib/chibios/os/rt/src/chcond.c ****  * @param[in] cp        pointer to the @p condition_variable_t structure
 241:lib/chibios/os/rt/src/chcond.c ****  * @param[in] timeout   the number of ticks before the operation timeouts, the
 242:lib/chibios/os/rt/src/chcond.c ****  *                      special values are handled as follow:
 243:lib/chibios/os/rt/src/chcond.c ****  *                      - @a TIME_INFINITE no timeout.
 244:lib/chibios/os/rt/src/chcond.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 245:lib/chibios/os/rt/src/chcond.c ****  *                      .
 246:lib/chibios/os/rt/src/chcond.c ****  * @return              A message specifying how the invoking thread has been
 247:lib/chibios/os/rt/src/chcond.c ****  *                      released from the condition variable.
 248:lib/chibios/os/rt/src/chcond.c ****  * @retval MSG_OK       if the condition variable has been signaled using
 249:lib/chibios/os/rt/src/chcond.c ****  *                      @p chCondSignal().
 250:lib/chibios/os/rt/src/chcond.c ****  * @retval MSG_RESET    if the condition variable has been signaled using
 251:lib/chibios/os/rt/src/chcond.c ****  *                      @p chCondBroadcast().
 252:lib/chibios/os/rt/src/chcond.c ****  * @retval MSG_TIMEOUT  if the condition variable has not been signaled within
 253:lib/chibios/os/rt/src/chcond.c ****  *                      the specified timeout.
 254:lib/chibios/os/rt/src/chcond.c ****  *
 255:lib/chibios/os/rt/src/chcond.c ****  * @api
 256:lib/chibios/os/rt/src/chcond.c ****  */
 257:lib/chibios/os/rt/src/chcond.c **** msg_t chCondWaitTimeout(condition_variable_t *cp, sysinterval_t timeout) {
 258:lib/chibios/os/rt/src/chcond.c ****   msg_t msg;
 259:lib/chibios/os/rt/src/chcond.c **** 
 260:lib/chibios/os/rt/src/chcond.c ****   chSysLock();
 261:lib/chibios/os/rt/src/chcond.c ****   msg = chCondWaitTimeoutS(cp, timeout);
 262:lib/chibios/os/rt/src/chcond.c ****   chSysUnlock();
 263:lib/chibios/os/rt/src/chcond.c **** 
 264:lib/chibios/os/rt/src/chcond.c ****   return msg;
 265:lib/chibios/os/rt/src/chcond.c **** }
 266:lib/chibios/os/rt/src/chcond.c **** 
 267:lib/chibios/os/rt/src/chcond.c **** /**
 268:lib/chibios/os/rt/src/chcond.c ****  * @brief   Waits on the condition variable releasing the mutex lock.
 269:lib/chibios/os/rt/src/chcond.c ****  * @details Releases the currently owned mutex, waits on the condition
 270:lib/chibios/os/rt/src/chcond.c ****  *          variable, and finally acquires the mutex again. All the sequence
 271:lib/chibios/os/rt/src/chcond.c ****  *          is performed atomically.
 272:lib/chibios/os/rt/src/chcond.c ****  * @pre     The invoking thread <b>must</b> have at least one owned mutex.
 273:lib/chibios/os/rt/src/chcond.c ****  * @pre     The configuration option @p CH_CFG_USE_CONDVARS_TIMEOUT must be enabled
 274:lib/chibios/os/rt/src/chcond.c ****  *          in order to use this function.
 275:lib/chibios/os/rt/src/chcond.c ****  * @post    Exiting the function because a timeout does not re-acquire the
 276:lib/chibios/os/rt/src/chcond.c ****  *          mutex, the mutex ownership is lost.
 277:lib/chibios/os/rt/src/chcond.c ****  *
 278:lib/chibios/os/rt/src/chcond.c ****  * @param[in] cp        pointer to the @p condition_variable_t structure
 279:lib/chibios/os/rt/src/chcond.c ****  * @param[in] timeout   the number of ticks before the operation timeouts, the
 280:lib/chibios/os/rt/src/chcond.c ****  *                      special values are handled as follow:
 281:lib/chibios/os/rt/src/chcond.c ****  *                      - @a TIME_INFINITE no timeout.
 282:lib/chibios/os/rt/src/chcond.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 283:lib/chibios/os/rt/src/chcond.c ****  *                      .
 284:lib/chibios/os/rt/src/chcond.c ****  * @return              A message specifying how the invoking thread has been
 285:lib/chibios/os/rt/src/chcond.c ****  *                      released from the condition variable.
 286:lib/chibios/os/rt/src/chcond.c ****  * @retval MSG_OK       if the condition variable has been signaled using
 287:lib/chibios/os/rt/src/chcond.c ****  *                      @p chCondSignal().
 288:lib/chibios/os/rt/src/chcond.c ****  * @retval MSG_RESET    if the condition variable has been signaled using
 289:lib/chibios/os/rt/src/chcond.c ****  *                      @p chCondBroadcast().
 290:lib/chibios/os/rt/src/chcond.c ****  * @retval MSG_TIMEOUT  if the condition variable has not been signaled within
 291:lib/chibios/os/rt/src/chcond.c ****  *                      the specified timeout.
 292:lib/chibios/os/rt/src/chcond.c ****  *
 293:lib/chibios/os/rt/src/chcond.c ****  * @sclass
 294:lib/chibios/os/rt/src/chcond.c ****  */
 295:lib/chibios/os/rt/src/chcond.c **** msg_t chCondWaitTimeoutS(condition_variable_t *cp, sysinterval_t timeout) {
 729              		.loc 2 295 75 is_stmt 1 view -0
 730              		.cfi_startproc
 731              		@ args = 0, pretend = 0, frame = 0
 732              		@ frame_needed = 0, uses_anonymous_args = 0
 296:lib/chibios/os/rt/src/chcond.c ****   mutex_t *mp = chMtxGetNextMutexX();
 733              		.loc 2 296 3 view .LVU228
 734              	.LBB137:
 735              	.LBI137:
 159:./lib/chibios/os/rt/include/chmtx.h **** 
 736              		.loc 7 159 24 view .LVU229
 737              	.LBB138:
 738              		.loc 7 161 3 view .LVU230
 739              	.LBB139:
 740              	.LBI139:
 741              		.file 8 "./lib/chibios/os/rt/include/chthreads.h"
   1:./lib/chibios/os/rt/include/chthreads.h **** /*
   2:./lib/chibios/os/rt/include/chthreads.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chthreads.h **** 
   4:./lib/chibios/os/rt/include/chthreads.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chthreads.h **** 
   6:./lib/chibios/os/rt/include/chthreads.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chthreads.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chthreads.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chthreads.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chthreads.h **** 
  11:./lib/chibios/os/rt/include/chthreads.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chthreads.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chthreads.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chthreads.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chthreads.h **** 
  16:./lib/chibios/os/rt/include/chthreads.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chthreads.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chthreads.h **** */
  19:./lib/chibios/os/rt/include/chthreads.h **** 
  20:./lib/chibios/os/rt/include/chthreads.h **** /**
  21:./lib/chibios/os/rt/include/chthreads.h ****  * @file    rt/include/chthreads.h
  22:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Threads module macros and structures.
  23:./lib/chibios/os/rt/include/chthreads.h ****  *
  24:./lib/chibios/os/rt/include/chthreads.h ****  * @addtogroup threads
  25:./lib/chibios/os/rt/include/chthreads.h ****  * @{
  26:./lib/chibios/os/rt/include/chthreads.h ****  */
  27:./lib/chibios/os/rt/include/chthreads.h **** 
  28:./lib/chibios/os/rt/include/chthreads.h **** #ifndef CHTHREADS_H
  29:./lib/chibios/os/rt/include/chthreads.h **** #define CHTHREADS_H
  30:./lib/chibios/os/rt/include/chthreads.h **** 
  31:./lib/chibios/os/rt/include/chthreads.h **** /*lint -sem(chThdExit, r_no) -sem(chThdExitS, r_no)*/
  32:./lib/chibios/os/rt/include/chthreads.h **** 
  33:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chthreads.h **** /* Module constants.                                                         */
  35:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chthreads.h **** 
  37:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  38:./lib/chibios/os/rt/include/chthreads.h **** /* Module pre-compile time settings.                                         */
  39:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  40:./lib/chibios/os/rt/include/chthreads.h **** 
  41:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  42:./lib/chibios/os/rt/include/chthreads.h **** /* Derived constants and error checks.                                       */
  43:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  44:./lib/chibios/os/rt/include/chthreads.h **** 
  45:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  46:./lib/chibios/os/rt/include/chthreads.h **** /* Module data structures and types.                                         */
  47:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  48:./lib/chibios/os/rt/include/chthreads.h **** 
  49:./lib/chibios/os/rt/include/chthreads.h **** /**
  50:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Thread function.
  51:./lib/chibios/os/rt/include/chthreads.h ****  */
  52:./lib/chibios/os/rt/include/chthreads.h **** typedef void (*tfunc_t)(void *p);
  53:./lib/chibios/os/rt/include/chthreads.h **** 
  54:./lib/chibios/os/rt/include/chthreads.h **** /**
  55:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Type of a thread descriptor.
  56:./lib/chibios/os/rt/include/chthreads.h ****  */
  57:./lib/chibios/os/rt/include/chthreads.h **** typedef struct {
  58:./lib/chibios/os/rt/include/chthreads.h ****   /**
  59:./lib/chibios/os/rt/include/chthreads.h ****    * @brief   Thread name.
  60:./lib/chibios/os/rt/include/chthreads.h ****    */
  61:./lib/chibios/os/rt/include/chthreads.h ****   const char        *name;
  62:./lib/chibios/os/rt/include/chthreads.h ****   /**
  63:./lib/chibios/os/rt/include/chthreads.h ****    * @brief   Pointer to the working area base.
  64:./lib/chibios/os/rt/include/chthreads.h ****    */
  65:./lib/chibios/os/rt/include/chthreads.h ****   stkalign_t        *wbase;
  66:./lib/chibios/os/rt/include/chthreads.h ****   /**
  67:./lib/chibios/os/rt/include/chthreads.h ****    * @brief   End of the working area.
  68:./lib/chibios/os/rt/include/chthreads.h ****    */
  69:./lib/chibios/os/rt/include/chthreads.h ****   stkalign_t        *wend;
  70:./lib/chibios/os/rt/include/chthreads.h ****   /**
  71:./lib/chibios/os/rt/include/chthreads.h ****    * @brief   Thread priority.
  72:./lib/chibios/os/rt/include/chthreads.h ****    */
  73:./lib/chibios/os/rt/include/chthreads.h ****   tprio_t           prio;
  74:./lib/chibios/os/rt/include/chthreads.h ****   /**
  75:./lib/chibios/os/rt/include/chthreads.h ****    * @brief   Thread function pointer.
  76:./lib/chibios/os/rt/include/chthreads.h ****    */
  77:./lib/chibios/os/rt/include/chthreads.h ****   tfunc_t           funcp;
  78:./lib/chibios/os/rt/include/chthreads.h ****   /**
  79:./lib/chibios/os/rt/include/chthreads.h ****    * @brief   Thread argument.
  80:./lib/chibios/os/rt/include/chthreads.h ****    */
  81:./lib/chibios/os/rt/include/chthreads.h ****   void              *arg;
  82:./lib/chibios/os/rt/include/chthreads.h **** } thread_descriptor_t;
  83:./lib/chibios/os/rt/include/chthreads.h **** 
  84:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  85:./lib/chibios/os/rt/include/chthreads.h **** /* Module macros.                                                            */
  86:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  87:./lib/chibios/os/rt/include/chthreads.h **** 
  88:./lib/chibios/os/rt/include/chthreads.h **** /**
  89:./lib/chibios/os/rt/include/chthreads.h ****  * @name    Threads queues
  90:./lib/chibios/os/rt/include/chthreads.h ****  * @{
  91:./lib/chibios/os/rt/include/chthreads.h ****  */
  92:./lib/chibios/os/rt/include/chthreads.h **** /**
  93:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Data part of a static threads queue object initializer.
  94:./lib/chibios/os/rt/include/chthreads.h ****  * @details This macro should be used when statically initializing a threads
  95:./lib/chibios/os/rt/include/chthreads.h ****  *          queue that is part of a bigger structure.
  96:./lib/chibios/os/rt/include/chthreads.h ****  *
  97:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] name      the name of the threads queue variable
  98:./lib/chibios/os/rt/include/chthreads.h ****  */
  99:./lib/chibios/os/rt/include/chthreads.h **** #define _THREADS_QUEUE_DATA(name) {_CH_QUEUE_DATA(name)}
 100:./lib/chibios/os/rt/include/chthreads.h **** 
 101:./lib/chibios/os/rt/include/chthreads.h **** /**
 102:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Static threads queue object initializer.
 103:./lib/chibios/os/rt/include/chthreads.h ****  * @details Statically initialized threads queues require no explicit
 104:./lib/chibios/os/rt/include/chthreads.h ****  *          initialization using @p queue_init().
 105:./lib/chibios/os/rt/include/chthreads.h ****  *
 106:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] name      the name of the threads queue variable
 107:./lib/chibios/os/rt/include/chthreads.h ****  */
 108:./lib/chibios/os/rt/include/chthreads.h **** #define THREADS_QUEUE_DECL(name)                                            \
 109:./lib/chibios/os/rt/include/chthreads.h ****   threads_queue_t name = _THREADS_QUEUE_DATA(name)
 110:./lib/chibios/os/rt/include/chthreads.h **** /** @} */
 111:./lib/chibios/os/rt/include/chthreads.h **** 
 112:./lib/chibios/os/rt/include/chthreads.h **** /**
 113:./lib/chibios/os/rt/include/chthreads.h ****  * @name    Working Areas
 114:./lib/chibios/os/rt/include/chthreads.h ****  * @{
 115:./lib/chibios/os/rt/include/chthreads.h ****  */
 116:./lib/chibios/os/rt/include/chthreads.h **** /**
 117:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Calculates the total Working Area size.
 118:./lib/chibios/os/rt/include/chthreads.h ****  *
 119:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 120:./lib/chibios/os/rt/include/chthreads.h ****  * @return              The total used memory in bytes.
 121:./lib/chibios/os/rt/include/chthreads.h ****  *
 122:./lib/chibios/os/rt/include/chthreads.h ****  * @api
 123:./lib/chibios/os/rt/include/chthreads.h ****  */
 124:./lib/chibios/os/rt/include/chthreads.h **** #define THD_WORKING_AREA_SIZE(n)                                            \
 125:./lib/chibios/os/rt/include/chthreads.h ****   MEM_ALIGN_NEXT(sizeof(thread_t) + PORT_WA_SIZE(n), PORT_STACK_ALIGN)
 126:./lib/chibios/os/rt/include/chthreads.h **** 
 127:./lib/chibios/os/rt/include/chthreads.h **** /**
 128:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Static working area allocation.
 129:./lib/chibios/os/rt/include/chthreads.h ****  * @details This macro is used to allocate a static thread working area
 130:./lib/chibios/os/rt/include/chthreads.h ****  *          aligned as both position and size.
 131:./lib/chibios/os/rt/include/chthreads.h ****  *
 132:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] s         the name to be assigned to the stack array
 133:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 134:./lib/chibios/os/rt/include/chthreads.h ****  *
 135:./lib/chibios/os/rt/include/chthreads.h ****  * @api
 136:./lib/chibios/os/rt/include/chthreads.h ****  */
 137:./lib/chibios/os/rt/include/chthreads.h **** #define THD_WORKING_AREA(s, n) PORT_WORKING_AREA(s, n)
 138:./lib/chibios/os/rt/include/chthreads.h **** 
 139:./lib/chibios/os/rt/include/chthreads.h **** /**
 140:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Base of a working area casted to the correct type.
 141:./lib/chibios/os/rt/include/chthreads.h ****  *
 142:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 143:./lib/chibios/os/rt/include/chthreads.h ****  */
 144:./lib/chibios/os/rt/include/chthreads.h **** #define THD_WORKING_AREA_BASE(s) ((stkalign_t *)(s))
 145:./lib/chibios/os/rt/include/chthreads.h **** 
 146:./lib/chibios/os/rt/include/chthreads.h **** /**
 147:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   End of a working area casted to the correct type.
 148:./lib/chibios/os/rt/include/chthreads.h ****  *
 149:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 150:./lib/chibios/os/rt/include/chthreads.h ****  */
 151:./lib/chibios/os/rt/include/chthreads.h **** #define THD_WORKING_AREA_END(s) (THD_WORKING_AREA_BASE(s) +                 \
 152:./lib/chibios/os/rt/include/chthreads.h ****                                  (sizeof (s) / sizeof (stkalign_t)))
 153:./lib/chibios/os/rt/include/chthreads.h **** /** @} */
 154:./lib/chibios/os/rt/include/chthreads.h **** 
 155:./lib/chibios/os/rt/include/chthreads.h **** /**
 156:./lib/chibios/os/rt/include/chthreads.h ****  * @name    Threads abstraction macros
 157:./lib/chibios/os/rt/include/chthreads.h ****  * @{
 158:./lib/chibios/os/rt/include/chthreads.h ****  */
 159:./lib/chibios/os/rt/include/chthreads.h **** /**
 160:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Thread declaration macro.
 161:./lib/chibios/os/rt/include/chthreads.h ****  * @note    Thread declarations should be performed using this macro because
 162:./lib/chibios/os/rt/include/chthreads.h ****  *          the port layer could define optimizations for thread functions.
 163:./lib/chibios/os/rt/include/chthreads.h ****  */
 164:./lib/chibios/os/rt/include/chthreads.h **** #define THD_FUNCTION(tname, arg) PORT_THD_FUNCTION(tname, arg)
 165:./lib/chibios/os/rt/include/chthreads.h **** /** @} */
 166:./lib/chibios/os/rt/include/chthreads.h **** 
 167:./lib/chibios/os/rt/include/chthreads.h **** /**
 168:./lib/chibios/os/rt/include/chthreads.h ****  * @name    Macro Functions
 169:./lib/chibios/os/rt/include/chthreads.h ****  * @{
 170:./lib/chibios/os/rt/include/chthreads.h ****  */
 171:./lib/chibios/os/rt/include/chthreads.h **** /**
 172:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 173:./lib/chibios/os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 174:./lib/chibios/os/rt/include/chthreads.h ****  *          system tick clock.
 175:./lib/chibios/os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 176:./lib/chibios/os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 177:./lib/chibios/os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 178:./lib/chibios/os/rt/include/chthreads.h ****  *          converted.
 179:./lib/chibios/os/rt/include/chthreads.h ****  *
 180:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] sec       time in seconds, must be different from zero
 181:./lib/chibios/os/rt/include/chthreads.h ****  *
 182:./lib/chibios/os/rt/include/chthreads.h ****  * @api
 183:./lib/chibios/os/rt/include/chthreads.h ****  */
 184:./lib/chibios/os/rt/include/chthreads.h **** #define chThdSleepSeconds(sec) chThdSleep(TIME_S2I(sec))
 185:./lib/chibios/os/rt/include/chthreads.h **** 
 186:./lib/chibios/os/rt/include/chthreads.h **** /**
 187:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 188:./lib/chibios/os/rt/include/chthreads.h ****  *          milliseconds.
 189:./lib/chibios/os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 190:./lib/chibios/os/rt/include/chthreads.h ****  *          system tick clock.
 191:./lib/chibios/os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 192:./lib/chibios/os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 193:./lib/chibios/os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 194:./lib/chibios/os/rt/include/chthreads.h ****  *          converted.
 195:./lib/chibios/os/rt/include/chthreads.h ****  *
 196:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 197:./lib/chibios/os/rt/include/chthreads.h ****  *
 198:./lib/chibios/os/rt/include/chthreads.h ****  * @api
 199:./lib/chibios/os/rt/include/chthreads.h ****  */
 200:./lib/chibios/os/rt/include/chthreads.h **** #define chThdSleepMilliseconds(msec) chThdSleep(TIME_MS2I(msec))
 201:./lib/chibios/os/rt/include/chthreads.h **** 
 202:./lib/chibios/os/rt/include/chthreads.h **** /**
 203:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 204:./lib/chibios/os/rt/include/chthreads.h ****  *          microseconds.
 205:./lib/chibios/os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 206:./lib/chibios/os/rt/include/chthreads.h ****  *          system tick clock.
 207:./lib/chibios/os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 208:./lib/chibios/os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 209:./lib/chibios/os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 210:./lib/chibios/os/rt/include/chthreads.h ****  *          converted.
 211:./lib/chibios/os/rt/include/chthreads.h ****  *
 212:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] usec      time in microseconds, must be different from zero
 213:./lib/chibios/os/rt/include/chthreads.h ****  *
 214:./lib/chibios/os/rt/include/chthreads.h ****  * @api
 215:./lib/chibios/os/rt/include/chthreads.h ****  */
 216:./lib/chibios/os/rt/include/chthreads.h **** #define chThdSleepMicroseconds(usec) chThdSleep(TIME_US2I(usec))
 217:./lib/chibios/os/rt/include/chthreads.h **** /** @} */
 218:./lib/chibios/os/rt/include/chthreads.h **** 
 219:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
 220:./lib/chibios/os/rt/include/chthreads.h **** /* External declarations.                                                    */
 221:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
 222:./lib/chibios/os/rt/include/chthreads.h **** 
 223:./lib/chibios/os/rt/include/chthreads.h **** #ifdef __cplusplus
 224:./lib/chibios/os/rt/include/chthreads.h **** extern "C" {
 225:./lib/chibios/os/rt/include/chthreads.h **** #endif
 226:./lib/chibios/os/rt/include/chthreads.h ****    thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio);
 227:./lib/chibios/os/rt/include/chthreads.h **** #if CH_DBG_FILL_THREADS == TRUE
 228:./lib/chibios/os/rt/include/chthreads.h ****   void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v);
 229:./lib/chibios/os/rt/include/chthreads.h **** #endif
 230:./lib/chibios/os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp);
 231:./lib/chibios/os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspended(const thread_descriptor_t *tdp);
 232:./lib/chibios/os/rt/include/chthreads.h ****   thread_t *chThdCreateI(const thread_descriptor_t *tdp);
 233:./lib/chibios/os/rt/include/chthreads.h ****   thread_t *chThdCreate(const thread_descriptor_t *tdp);
 234:./lib/chibios/os/rt/include/chthreads.h ****   thread_t *chThdCreateStatic(void *wsp, size_t size,
 235:./lib/chibios/os/rt/include/chthreads.h ****                               tprio_t prio, tfunc_t pf, void *arg);
 236:./lib/chibios/os/rt/include/chthreads.h ****   thread_t *chThdStart(thread_t *tp);
 237:./lib/chibios/os/rt/include/chthreads.h **** #if CH_CFG_USE_REGISTRY == TRUE
 238:./lib/chibios/os/rt/include/chthreads.h ****   thread_t *chThdAddRef(thread_t *tp);
 239:./lib/chibios/os/rt/include/chthreads.h ****   void chThdRelease(thread_t *tp);
 240:./lib/chibios/os/rt/include/chthreads.h **** #endif
 241:./lib/chibios/os/rt/include/chthreads.h ****   void chThdExit(msg_t msg);
 242:./lib/chibios/os/rt/include/chthreads.h ****   void chThdExitS(msg_t msg);
 243:./lib/chibios/os/rt/include/chthreads.h **** #if CH_CFG_USE_WAITEXIT == TRUE
 244:./lib/chibios/os/rt/include/chthreads.h ****   msg_t chThdWait(thread_t *tp);
 245:./lib/chibios/os/rt/include/chthreads.h **** #endif
 246:./lib/chibios/os/rt/include/chthreads.h ****   tprio_t chThdSetPriority(tprio_t newprio);
 247:./lib/chibios/os/rt/include/chthreads.h ****   void chThdTerminate(thread_t *tp);
 248:./lib/chibios/os/rt/include/chthreads.h ****   msg_t chThdSuspendS(thread_reference_t *trp);
 249:./lib/chibios/os/rt/include/chthreads.h ****   msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout);
 250:./lib/chibios/os/rt/include/chthreads.h ****   void chThdResumeI(thread_reference_t *trp, msg_t msg);
 251:./lib/chibios/os/rt/include/chthreads.h ****   void chThdResumeS(thread_reference_t *trp, msg_t msg);
 252:./lib/chibios/os/rt/include/chthreads.h ****   void chThdResume(thread_reference_t *trp, msg_t msg);
 253:./lib/chibios/os/rt/include/chthreads.h ****   msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout);
 254:./lib/chibios/os/rt/include/chthreads.h ****   void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg);
 255:./lib/chibios/os/rt/include/chthreads.h ****   void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg);
 256:./lib/chibios/os/rt/include/chthreads.h ****   void chThdSleep(sysinterval_t time);
 257:./lib/chibios/os/rt/include/chthreads.h ****   void chThdSleepUntil(systime_t time);
 258:./lib/chibios/os/rt/include/chthreads.h ****   systime_t chThdSleepUntilWindowed(systime_t prev, systime_t next);
 259:./lib/chibios/os/rt/include/chthreads.h ****   void chThdYield(void);
 260:./lib/chibios/os/rt/include/chthreads.h **** #ifdef __cplusplus
 261:./lib/chibios/os/rt/include/chthreads.h **** }
 262:./lib/chibios/os/rt/include/chthreads.h **** #endif
 263:./lib/chibios/os/rt/include/chthreads.h **** 
 264:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
 265:./lib/chibios/os/rt/include/chthreads.h **** /* Module inline functions.                                                  */
 266:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
 267:./lib/chibios/os/rt/include/chthreads.h **** 
 268:./lib/chibios/os/rt/include/chthreads.h **** /**
 269:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Returns a pointer to the current @p thread_t.
 270:./lib/chibios/os/rt/include/chthreads.h ****  *
 271:./lib/chibios/os/rt/include/chthreads.h ****  * @return              A pointer to the current thread.
 272:./lib/chibios/os/rt/include/chthreads.h ****  *
 273:./lib/chibios/os/rt/include/chthreads.h ****  * @xclass
 274:./lib/chibios/os/rt/include/chthreads.h ****  */
 275:./lib/chibios/os/rt/include/chthreads.h **** static inline thread_t *chThdGetSelfX(void) {
 742              		.loc 8 275 25 view .LVU231
 743              	.LBB140:
 276:./lib/chibios/os/rt/include/chthreads.h **** 
 277:./lib/chibios/os/rt/include/chthreads.h ****   return ch.rlist.current;
 744              		.loc 8 277 3 view .LVU232
 745              	.LBE140:
 746              	.LBE139:
 747              	.LBE138:
 748              	.LBE137:
 295:lib/chibios/os/rt/src/chcond.c ****   mutex_t *mp = chMtxGetNextMutexX();
 749              		.loc 2 295 75 is_stmt 0 view .LVU233
 750 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 751              		.cfi_def_cfa_offset 24
 752              		.cfi_offset 3, -24
 753              		.cfi_offset 4, -20
 754              		.cfi_offset 5, -16
 755              		.cfi_offset 6, -12
 756              		.cfi_offset 7, -8
 757              		.cfi_offset 14, -4
 758              	.LBB144:
 759              	.LBB143:
 760              	.LBB142:
 761              	.LBB141:
 762              		.loc 8 277 18 view .LVU234
 763 0002 0C4F     		ldr	r7, .L23
 764              	.LBE141:
 765              	.LBE142:
 766              		.loc 7 161 25 view .LVU235
 767 0004 BB69     		ldr	r3, [r7, #24]
 768 0006 9E6B     		ldr	r6, [r3, #56]
 769              	.LVL45:
 770              		.loc 7 161 25 view .LVU236
 771              	.LBE143:
 772              	.LBE144:
 297:lib/chibios/os/rt/src/chcond.c ****   msg_t msg;
 773              		.loc 2 297 3 is_stmt 1 view .LVU237
 298:lib/chibios/os/rt/src/chcond.c **** 
 299:lib/chibios/os/rt/src/chcond.c ****   chDbgCheckClassS();
 774              		.loc 2 299 21 view .LVU238
 300:lib/chibios/os/rt/src/chcond.c ****   chDbgCheck((cp != NULL) && (timeout != TIME_IMMEDIATE));
 775              		.loc 2 300 3 view .LVU239
 776              		.loc 2 300 3 view .LVU240
 777              		.loc 2 300 3 view .LVU241
 301:lib/chibios/os/rt/src/chcond.c ****   chDbgAssert(mp != NULL, "not owning a mutex");
 778              		.loc 2 301 3 view .LVU242
 779              		.loc 2 301 3 view .LVU243
 780              		.loc 2 301 3 view .LVU244
 302:lib/chibios/os/rt/src/chcond.c **** 
 303:lib/chibios/os/rt/src/chcond.c ****   /* Releasing "current" mutex.*/
 304:lib/chibios/os/rt/src/chcond.c ****   chMtxUnlockS(mp);
 781              		.loc 2 304 3 view .LVU245
 295:lib/chibios/os/rt/src/chcond.c ****   mutex_t *mp = chMtxGetNextMutexX();
 782              		.loc 2 295 75 is_stmt 0 view .LVU246
 783 0008 0446     		mov	r4, r0
 784              		.loc 2 304 3 view .LVU247
 785 000a 3046     		mov	r0, r6
 786              	.LVL46:
 295:lib/chibios/os/rt/src/chcond.c ****   mutex_t *mp = chMtxGetNextMutexX();
 787              		.loc 2 295 75 view .LVU248
 788 000c 0D46     		mov	r5, r1
 789              		.loc 2 304 3 view .LVU249
 790 000e FFF7FEFF 		bl	chMtxUnlockS
 791              	.LVL47:
 305:lib/chibios/os/rt/src/chcond.c **** 
 306:lib/chibios/os/rt/src/chcond.c ****   /* Start waiting on the condition variable, on exit the mutex is taken
 307:lib/chibios/os/rt/src/chcond.c ****      again.*/
 308:lib/chibios/os/rt/src/chcond.c ****   currp->u.wtobjp = cp;
 792              		.loc 2 308 3 is_stmt 1 view .LVU250
 793 0012 B869     		ldr	r0, [r7, #24]
 309:lib/chibios/os/rt/src/chcond.c ****   ch_sch_prio_insert(&currp->hdr.queue, &cp->queue);
 794              		.loc 2 309 3 is_stmt 0 view .LVU251
 795 0014 2146     		mov	r1, r4
 308:lib/chibios/os/rt/src/chcond.c ****   ch_sch_prio_insert(&currp->hdr.queue, &cp->queue);
 796              		.loc 2 308 19 view .LVU252
 797 0016 4462     		str	r4, [r0, #36]
 798              		.loc 2 309 3 is_stmt 1 view .LVU253
 799 0018 FFF7FEFF 		bl	ch_sch_prio_insert
 800              	.LVL48:
 310:lib/chibios/os/rt/src/chcond.c ****   msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, timeout);
 801              		.loc 2 310 3 view .LVU254
 802              		.loc 2 310 9 is_stmt 0 view .LVU255
 803 001c 2946     		mov	r1, r5
 804 001e 0720     		movs	r0, #7
 805 0020 FFF7FEFF 		bl	chSchGoSleepTimeoutS
 806              	.LVL49:
 311:lib/chibios/os/rt/src/chcond.c ****   if (msg != MSG_TIMEOUT) {
 807              		.loc 2 311 6 view .LVU256
 808 0024 431C     		adds	r3, r0, #1
 310:lib/chibios/os/rt/src/chcond.c ****   msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, timeout);
 809              		.loc 2 310 9 view .LVU257
 810 0026 0446     		mov	r4, r0
 811              	.LVL50:
 812              		.loc 2 311 3 is_stmt 1 view .LVU258
 813              		.loc 2 311 6 is_stmt 0 view .LVU259
 814 0028 02D0     		beq	.L18
 312:lib/chibios/os/rt/src/chcond.c ****     chMtxLockS(mp);
 815              		.loc 2 312 5 is_stmt 1 view .LVU260
 816 002a 3046     		mov	r0, r6
 817              	.LVL51:
 818              		.loc 2 312 5 is_stmt 0 view .LVU261
 819 002c FFF7FEFF 		bl	chMtxLockS
 820              	.LVL52:
 313:lib/chibios/os/rt/src/chcond.c ****   }
 314:lib/chibios/os/rt/src/chcond.c **** 
 315:lib/chibios/os/rt/src/chcond.c ****   return msg;
 821              		.loc 2 315 3 is_stmt 1 view .LVU262
 822              	.L18:
 316:lib/chibios/os/rt/src/chcond.c **** }
 823              		.loc 2 316 1 is_stmt 0 view .LVU263
 824 0030 2046     		mov	r0, r4
 825 0032 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 826              	.LVL53:
 827              	.L24:
 828              		.loc 2 316 1 view .LVU264
 829              		.align	2
 830              	.L23:
 831 0034 00000000 		.word	ch
 832              		.cfi_endproc
 833              	.LFE297:
 835              		.section	.text.chCondWaitTimeout,"ax",%progbits
 836              		.align	1
 837              		.global	chCondWaitTimeout
 838              		.syntax unified
 839              		.thumb
 840              		.thumb_func
 841              		.fpu fpv4-sp-d16
 843              	chCondWaitTimeout:
 844              	.LVL54:
 845              	.LFB296:
 257:lib/chibios/os/rt/src/chcond.c ****   msg_t msg;
 846              		.loc 2 257 74 is_stmt 1 view -0
 847              		.cfi_startproc
 848              		@ args = 0, pretend = 0, frame = 0
 849              		@ frame_needed = 0, uses_anonymous_args = 0
 258:lib/chibios/os/rt/src/chcond.c **** 
 850              		.loc 2 258 3 view .LVU266
 260:lib/chibios/os/rt/src/chcond.c ****   msg = chCondWaitTimeoutS(cp, timeout);
 851              		.loc 2 260 3 view .LVU267
 852              	.LBB145:
 853              	.LBI145:
 355:./lib/chibios/os/rt/include/chsys.h **** 
 854              		.loc 4 355 20 view .LVU268
 357:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 855              		.loc 4 357 3 view .LVU269
 856              	.LBB146:
 857              	.LBI146:
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 858              		.loc 5 669 27 view .LVU270
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 859              		.loc 5 677 3 view .LVU271
 860              	.LBB147:
 861              	.LBI147:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 862              		.loc 6 491 27 view .LVU272
 863              	.LBB148:
 864              		.loc 6 493 3 view .LVU273
 865              	.LBE148:
 866              	.LBE147:
 867              	.LBE146:
 868              	.LBE145:
 257:lib/chibios/os/rt/src/chcond.c ****   msg_t msg;
 869              		.loc 2 257 74 is_stmt 0 view .LVU274
 870 0000 08B5     		push	{r3, lr}
 871              		.cfi_def_cfa_offset 8
 872              		.cfi_offset 3, -8
 873              		.cfi_offset 14, -4
 874              	.LBB152:
 875              	.LBB151:
 876              	.LBB150:
 877              	.LBB149:
 878              		.loc 6 493 3 view .LVU275
 879 0002 2023     		movs	r3, #32
 880              		.syntax unified
 881              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 882 0004 83F31188 		MSR basepri, r3
 883              	@ 0 "" 2
 884              	.LVL55:
 885              		.loc 6 493 3 view .LVU276
 886              		.thumb
 887              		.syntax unified
 888              	.LBE149:
 889              	.LBE150:
 890              	.LBE151:
 358:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 891              		.loc 4 358 34 is_stmt 1 view .LVU277
 359:./lib/chibios/os/rt/include/chsys.h **** }
 892              		.loc 4 359 20 view .LVU278
 893              	.LBE152:
 261:lib/chibios/os/rt/src/chcond.c ****   chSysUnlock();
 894              		.loc 2 261 3 view .LVU279
 261:lib/chibios/os/rt/src/chcond.c ****   chSysUnlock();
 895              		.loc 2 261 9 is_stmt 0 view .LVU280
 896 0008 FFF7FEFF 		bl	chCondWaitTimeoutS
 897              	.LVL56:
 262:lib/chibios/os/rt/src/chcond.c **** 
 898              		.loc 2 262 3 is_stmt 1 view .LVU281
 899              	.LBB153:
 900              	.LBI153:
 367:./lib/chibios/os/rt/include/chsys.h **** 
 901              		.loc 4 367 20 view .LVU282
 902              	.LBB154:
 369:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 903              		.loc 4 369 22 view .LVU283
 370:./lib/chibios/os/rt/include/chsys.h **** 
 904              		.loc 4 370 33 view .LVU284
 376:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 905              		.loc 4 376 3 view .LVU285
 376:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 906              		.loc 4 376 3 view .LVU286
 376:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 907              		.loc 4 376 3 view .LVU287
 908              		.loc 4 380 3 view .LVU288
 909              	.LBB155:
 910              	.LBI155:
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 911              		.loc 5 693 27 view .LVU289
 912              		.loc 5 696 3 view .LVU290
 913              	.LBB156:
 914              	.LBI156:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 915              		.loc 6 491 27 view .LVU291
 916              	.LBB157:
 917              		.loc 6 493 3 view .LVU292
 918 000c 0023     		movs	r3, #0
 919              		.syntax unified
 920              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 921 000e 83F31188 		MSR basepri, r3
 922              	@ 0 "" 2
 923              	.LVL57:
 924              		.loc 6 493 3 is_stmt 0 view .LVU293
 925              		.thumb
 926              		.syntax unified
 927              	.LBE157:
 928              	.LBE156:
 929              	.LBE155:
 930              	.LBE154:
 931              	.LBE153:
 264:lib/chibios/os/rt/src/chcond.c **** }
 932              		.loc 2 264 3 is_stmt 1 view .LVU294
 265:lib/chibios/os/rt/src/chcond.c **** 
 933              		.loc 2 265 1 is_stmt 0 view .LVU295
 934 0012 08BD     		pop	{r3, pc}
 935              		.cfi_endproc
 936              	.LFE296:
 938              		.text
 939              	.Letext0:
 940              		.file 9 "/usr/arm-none-eabi/include/machine/_default_types.h"
 941              		.file 10 "/usr/arm-none-eabi/include/sys/_stdint.h"
 942              		.file 11 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 943              		.file 12 "./lib/chibios/os/rt/include/chsystypes.h"
 944              		.file 13 "./lib/chibios/os/rt/include/chtime.h"
 945              		.file 14 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 946              		.file 15 "./lib/chibios/os/rt/include/chtm.h"
 947              		.file 16 "./lib/chibios/os/rt/include/chsem.h"
 948              		.file 17 "./lib/chibios/os/rt/include/chcond.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chcond.c
     /tmp/ccDKoaB2.s:18     .text.ch_sch_prio_insert:0000000000000000 $t
     /tmp/ccDKoaB2.s:25     .text.ch_sch_prio_insert:0000000000000000 ch_sch_prio_insert
     /tmp/ccDKoaB2.s:77     .text.chCondObjectInit:0000000000000000 $t
     /tmp/ccDKoaB2.s:84     .text.chCondObjectInit:0000000000000000 chCondObjectInit
     /tmp/ccDKoaB2.s:115    .text.chCondSignal:0000000000000000 $t
     /tmp/ccDKoaB2.s:122    .text.chCondSignal:0000000000000000 chCondSignal
     /tmp/ccDKoaB2.s:266    .text.chCondSignalI:0000000000000000 $t
     /tmp/ccDKoaB2.s:273    .text.chCondSignalI:0000000000000000 chCondSignalI
     /tmp/ccDKoaB2.s:341    .text.chCondBroadcastI:0000000000000000 $t
     /tmp/ccDKoaB2.s:348    .text.chCondBroadcastI:0000000000000000 chCondBroadcastI
     /tmp/ccDKoaB2.s:421    .text.chCondBroadcast:0000000000000000 $t
     /tmp/ccDKoaB2.s:428    .text.chCondBroadcast:0000000000000000 chCondBroadcast
     /tmp/ccDKoaB2.s:524    .text.chCondWaitS:0000000000000000 $t
     /tmp/ccDKoaB2.s:531    .text.chCondWaitS:0000000000000000 chCondWaitS
     /tmp/ccDKoaB2.s:611    .text.chCondWaitS:000000000000002c $d
     /tmp/ccDKoaB2.s:616    .text.chCondWait:0000000000000000 $t
     /tmp/ccDKoaB2.s:623    .text.chCondWait:0000000000000000 chCondWait
     /tmp/ccDKoaB2.s:719    .text.chCondWaitTimeoutS:0000000000000000 $t
     /tmp/ccDKoaB2.s:726    .text.chCondWaitTimeoutS:0000000000000000 chCondWaitTimeoutS
     /tmp/ccDKoaB2.s:831    .text.chCondWaitTimeoutS:0000000000000034 $d
     /tmp/ccDKoaB2.s:836    .text.chCondWaitTimeout:0000000000000000 $t
     /tmp/ccDKoaB2.s:843    .text.chCondWaitTimeout:0000000000000000 chCondWaitTimeout

UNDEFINED SYMBOLS
chSchWakeupS
chSchReadyI
chSchRescheduleS
chMtxUnlockS
chSchGoSleepS
chMtxLockS
ch
chSchGoSleepTimeoutS
